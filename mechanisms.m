(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["mechanisms`",{"Developer`"}];


(* 
	We need MeshRegion to work for this package to work.
*)
If[$VersionNumber<10,Print["Mathematica version may be too low."]];


(* 
	A snippet of code to test or a working C compiler, modified from
	https://mathematica.stackexchange.com/questions/39837/check-whether-a-working-ccompiler-is-installed
*)
If[Quiet[Check[TrueQ[Compile[{}, 0, CompilationTarget -> "C"][] == 0], False]],
  $compilationTarget = "C",
  Print["C compilation failed. Using MVM code instead."];
  $compilationTarget = "MVM"
];


$mechanismsVersion=1.1;
$mechanismsVersionText="mechanisms version 1.1";


$mechanismComponents::usage="$mechanismComponents lists all valid components. $mechanismCompositeComponents lists composite mechanism components.";
$mechanismCompositeComponents::usage="$mechanismComponents lists all valid components. $mechanismCompositeComponents lists composite mechanism components.";


rigidBar::usage=
"rigidBar[{\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\)}] represents a rigid bar. Use Options[rigidBar] to see valid properties.";
SetAttributes[rigidBar,NHoldFirst];

spring::usage="spring[{\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\)}] represents a spring. Use Options[spring] to see valid properties.";
SetAttributes[spring,NHoldFirst];

joint::usage="joint[\!\(\*
StyleBox[\"v\",\nFontSlant->\"Italic\"]\)] represents a freely rotating joint that is fixed in place. Use Options[joint] to see valid properties.";
SetAttributes[joint,NHoldFirst];

angleJoint::usage="angleJoint[{\!\(\*
StyleBox[\"v1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"v2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"v3\",\nFontSlant->\"Italic\"]\)}] represents a torsional spring associated with the turning angle from vertex \!\(\*
StyleBox[\"v1\",\nFontSlant->\"Italic\"]\) to \!\(\*
StyleBox[\"v2\",\nFontSlant->\"Italic\"]\) to \!\(\*
StyleBox[\"v3\",\nFontSlant->\"Italic\"]\). Use Options[angleJoint] to see valid properties.";
SetAttributes[angleJoint,NHoldFirst];

fold::usage="fold[\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"v1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"v2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)] represents a fold with a torsional spring controlling its fold angle. Use Options[fold] to see valid properties.";
SetAttributes[fold,NHoldFirst];

vertexData::usage="vertexData[\!\(\*
StyleBox[\"v\",\nFontSlant->\"Italic\"]\)] represents a vertex. Use Options[vertexData] to see valid properties.";
SetAttributes[vertexData,NHoldFirst];

edgeData::usage="edgeData[\!\(\*
StyleBox[\"v\",\nFontSlant->\"Italic\"]\)] represents an edge. Use Options[edgeData] to see valid properties.";
SetAttributes[edgeData,NHoldFirst];

faceData::usage="faceData[\!\(\*
StyleBox[\"v\",\nFontSlant->\"Italic\"]\)] represents a face. Use Options[faceData] to see valid properties.";
SetAttributes[faceData,NHoldFirst];

face::usage="face[{\!\(\*
StyleBox[\"v1\",\nFontSlant->\"Italic\"]\),...}] represents a face. Use Options[face] to see valid properties.";
SetAttributes[face,NHoldAll];


block::usage="block[{\!\(\*
StyleBox[\"v1\",\nFontSlant->\"Italic\"]\),...}] is a mechanism component that creates a \"block\" face made rigid by extra rigidBar elements.";
triangulatedFace::usage="triangulatedFace[{\!\(\*
StyleBox[\"v1\",\nFontSlant->\"Italic\"]\),...}] is a mechanism component that creates a triangulated face, with shortest diagonal triangulated first.";
flexibleBar::usage="flexibleBar[{\!\(\*
StyleBox[\"v1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"v2\",\nFontSlant->\"Italic\"]\)},\!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\)] is a mechanism component that creates a bar with \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\) points between.";


framework::usage="framework[\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)x1, y1\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"x2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"y2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"i1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"i2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"..\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"j1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"j2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)] creates a linkage mechanism in 2D with vertex coordinates specified by the first argument and cells specified by the second..
framework[\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)x1, y1, z2\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"x2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"y2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"z2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"i1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"i2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"..\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"j1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"j2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)] creates a linkage mechanism in 3D.";
origami::usage="origami[\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)x1, y1\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"x2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"y2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"i1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"i2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"..\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"j1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"j2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)] creates an origami mechanism in 3D with vertex coordinates specified in 2D by the first argument and cells specified by the second..
origami[\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)x1, y1, z2\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"x2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"y2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"z2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"i1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"i2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"..\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"[\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"j1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"j2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"]\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)] creates an origami mechanism in 3D.";

mechanismQ::usage="mechanismQ[\!\(\*
StyleBox[\"m\",\nFontSlant->\"Italic\"]\)] returns True if \!\(\*
StyleBox[\"m\",\nFontSlant->\"Italic\"]\) is a mechanism.";


polygonalLinkage::usage="polygonalLinkage[{\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\),...}] returns a polygonal linkage in which vertices are joined by rigid bars in cyclic order.";


boundaryVertices::usage=
"boundaryVertices[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) ] returns a list of oriented boundary vertices { component 1, ...} where each boundary component is a list of vertex indices.
A boundary is defined as the boundary of a set of 2D faces.";

boundaryEdges::usage=
"boundaryEdges[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) ] returns a list of oriented boundary components {{\!\(\*
StyleBox[\"edge\",\nFontSlant->\"Italic\"]\) 1, \!\(\*
StyleBox[\"edge\",\nFontSlant->\"Italic\"]\) 2, ...}, ...}. A boundary is defined as the boundary of a set of 2D faces.";

boundaryFaces::usage=
"boundaryFaces[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) ] returns a list of oriented boundary components {{\!\(\*
StyleBox[\"face\",\nFontSlant->\"Italic\"]\) 1, \!\(\*
StyleBox[\"face\",\nFontSlant->\"Italic\"]\) 2, ...}, ...}. A boundary is defined as the boundary of a set of 2D faces.";

interiorVertices::usage=
"interiorVertices[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) ] returns a list of interior vertices.";
interiorEdges::usage=
"interiorEdges[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) ] returns a list of interior edges.";

listVertices::usage=
"listVertices[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), {\!\(\*
StyleBox[\"cell1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)] lists the vertices associated with a list of cells.";

listEdges::usage=
"listEdges[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)] lists the edges (oriented if possible) associated with a list of cells.";

listFaces::usage=
"listFaces[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cell2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)] lists of the faces (oriented if possible) associated with a list of cells.";


joinMechanism::usage=
"joinMechanism[\!\(\*
StyleBox[\"m1\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"m2\",\nFontSlant->\"Italic\"]\), ...] creates a new mechanism by joining several individual ones. Overlapping vertices are identified if they fall within a specified precision.";


mechanismPositions::usage=
"mechanismPositions[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) ] returns the coordinates of the vertices of \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\).
mechanismPositions[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) -> \!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\) ] returns a new mechanism with coordinates given by \!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\).";


displayDimension::usage=
"displayDimension[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) ] returns the display dimension.
displayDimension[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) -> \!\(\*
StyleBox[\"dim\",\nFontSlant->\"Italic\"]\) ] returns a mechanism with display dimension \!\(\*
StyleBox[\"dim\",\nFontSlant->\"Italic\"]\).";

embeddingDimension::usage=
"embeddingDimension[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) ] returns the embedding dimension.
embeddingDimension[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) -> \!\(\*
StyleBox[\"dim\",\nFontSlant->\"Italic\"]\) ] returns a mechanism with embedding dimension \!\(\*
StyleBox[\"dim\",\nFontSlant->\"Italic\"]\).";


deleteVertices::usage="deleteVertices[\!\(\*
StyleBox[\"m\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)] deletes a list of vertices from a mechanism.";

deleteDanglingVertices::usage="deleteDanglingVertices[\!\(\*
StyleBox[\"m\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"type\",\nFontSlant->\"Italic\"]\)] deletes all vertices of \!\(\*
StyleBox[\"m\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)not adjacent to a cell of a specific type, either \"faces\" or \"edges\".
If omitted, the argument \!\(\*
StyleBox[\"type\",\nFontSlant->\"Italic\"]\) defaults to \"faces\" for origami or \"edges\" for frameworks. See: deleteVertices[]";


tesselateMechanism::usage=
"tesselateMechanism[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), {\!\(\*
StyleBox[\"primitive\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"vectors\",\nFontSlant->\"Italic\"]\)}, {\!\(\*
StyleBox[\"nx\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"ny\",\nFontSlant->\"Italic\"]\)} ],tesselateMechanism[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"primitive\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"vectors\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"nx\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"ny\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"nz\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\) ] tesselates a mechanism using a set of 2D or 3D primitive vectors.";


saveToFOLD::usage="saveToFOLD[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"filename\",\nFontSlant->\"Italic\"]\)] saves a FOLD file from a mechanism.";
loadFromFOLD::usage=
"loadFromFOLD[\!\(\*
StyleBox[\"filename\",\nFontSlant->\"Italic\"]\)] loads a mechanism from a FOLD. Use option \"face\" to choose how to treat a polygon.";


alignMechanism::usage="alignMechanism[\!\(\*
StyleBox[\"point\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"list\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"point\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"list\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\)] aligns \!\(\*
StyleBox[\"point\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"list\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\) with \!\(\*
StyleBox[\"point\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"list\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\) using only Euclidean motions.
alignMechanism[\!\(\*
StyleBox[\"point\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"list\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\)] aligns a mechanical with \!\(\*
StyleBox[\"point\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"list\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\) using Euclidean motions.
alignMechanism[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\)] aligns \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\) to \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\) using Euclidean motions.";


displaceVertices::usage="displaceVertices[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\),{\!\(\*
StyleBox[\"v1\",\nFontSlant->\"Italic\"]\) -> \!\(\*
StyleBox[\"vector1\",\nFontSlant->\"Italic\"]\),...}] returns a mechanism with vertices having index {v1, ...} displaced by a vector.";


dataForm::usage="dataForm[\!\(\*
StyleBox[\"cell\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"type\",\nFontSlant->\"Italic\"]\)] returns a list of data elements in the order they appear as components.";


modifyMechanism::usage="modifyMechanism[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"action\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\) -> \!\(\*
StyleBox[\"data\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\), ...] modifies a mechanism. Use modifyMechanism[\"Methods\"] for valid actions.";


mechanismComponents::usage=
"mechanismComponents[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"pattern\",\nFontSlant->\"Italic\"]\) ] returns the components matching pattern.
mechanismComponents[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"pattern1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"->\",\nFontSlant->\"Italic\"]\) {\!\(\*
StyleBox[\"property1\",\nFontSlant->\"Italic\"]\)->\!\(\*
StyleBox[\"data1\",\nFontSlant->\"Italic\"]\),...}, ...] changes components matching pattern by adding, if possible the property specified.";


deleteCells::usage=
"deleteCells[mech, pattern] deletes cells that match a pattern.
deleteCells[pattern] is a form of deleteCells[] that can act on a mechanism.";

deleteData::usage=
"deleteData[mech, pattern] deletes the data associated with a pattern.
deleteData[pattern] is a form of deleteData[] that can act on a mechanism.";

addCells::usage="addCells[m, {cell1[{i1, i2, ...}], ...}] adds cells to a mechanism.";


infinitesimal::usage=
"infinitesimal[\!\(\*
StyleBox[\"name\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"order\",\nFontSlant->\"Italic\"]\)] represents an infinitesimal quantity that will be automatically expanded to a particular order.";
SetAttributes[infinitesimal,{NHoldAll,Constant}]


vertexPosition::usage=
"vertexPosition[\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"component\",\nFontSlant->\"Italic\"]\)] represents the displacement of vertex v along a particular component, which is one of \"x\", \"y\", or \"z\" or All[d] where d is the dimension.
vertexPosition[{\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)},{\!\(\*
StyleBox[\"component\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"component\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)}] returns a nested list of positions and components.";
SetAttributes[vertexPosition,{NHoldAll,Constant}]

vertexDisplacement::usage=
"vertexDisplacement[\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"component\",\nFontSlant->\"Italic\"]\)] represents the displacement of vertex v along a particular component, which is one of \"x\", \"y\", or \"z\" or All[d] where d is the dimension.
vertexDisplacement[{\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)},{\!\(\*
StyleBox[\"component\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"component\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"...\",\nFontSlant->\"Italic\"]\)}] returns a nested list of displacements and components.";
SetAttributes[vertexDisplacement,{NHoldAll,Constant}]


to3D::usage="to3D[\!\(\*
StyleBox[\"vertices\",\nFontSlant->\"Italic\"]\)] embeds a list of coordinates into 3D.";
to2D::usage="to2D[\!\(\*
StyleBox[\"vertices\",\nFontSlant->\"Italic\"]\)] projects a list of coordinates into 2D.";
toDim::usage="toDim[d][\!\(\*
StyleBox[\"vertices\",\nFontSlant->\"Italic\"]\)] projects a list of coordinates into d dimensions.";


randomDisplacements::usage=
"randomDisplacements[ \!\(\*
StyleBox[\"d\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\) ] creates a random displacement for \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\) vertices in \!\(\*
StyleBox[\"d\",\nFontSlant->\"Italic\"]\) dimensions.
randomDisplacements[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\)] returns vertex positions that are randomly displaced from the mesh positions.";


orthogonalizeDisplacements::usage=
"orthogonalizeDisplacements[ {\!\(\*
StyleBox[\"displacement\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"displacement\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"2\",\nFontSlant->\"Italic\"]\), ...}(, \!\(\*
StyleBox[\"tolerance\",\nFontSlant->\"Italic\"]\)) ] returns an orthogonalized set of vertex displacements using optional tolerance.";


dataRules::usage="dataRules[vertexPosition|vertexDisplacement, \!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"/\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"displacements\",\nFontSlant->\"Italic\"]\) ] returns rules assigning \!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\) or \!\(\*
StyleBox[\"displacements\",\nFontSlant->\"Italic\"]\) to vertexPosition/vertexDisplacement head.";


displacements::usage="displacements[\!\(\*
StyleBox[\"expression\",\nFontSlant->\"Italic\"]\)] returns a list of vertexDisplacement[] objects in the expression.";
parameters::usage="parameters[\!\(\*
StyleBox[\"expression\",\nFontSlant->\"Italic\"]\)] returns a list of variables that are not vertexDisplacement[] objects in the expression.";


displacementVector::usage=
"displacementVector[ positions, edge ] returns the vector pointing along an oriented edge.
displacementVector[ positions, { edge 1, edge 2, ...} ] returns list of displacement vectors.
Edges can be specified as Line[{v1,v2}] or {v1,v2}.";

displacementLength::usage=
"displacementLength[ positions, edge 1 ] returns the length of an edge.
displacementLength[ positions, { edge 1, edge 2, ...} ] returns lengths of a list of edges.
Edges can be specified as Line[{v1,v2}] or {v1,v2}.";

displacementLengthSquared::usage=
"displacementLengthSquared[ positions, edge 1 ] returns the squared length of an edge.
displacementLengthSquared[ positions, { edge 1, edge 2, ...} ] returns squared lengths of a list of edges.
Edges can be specified as Line[{v1,v2}] or {v1,v2}.";

vectorAngle::usage=
"vectorAngle[ positions, {vertex 1, vertex 2, vertex 3}] returns the angle at vertex 2 spanned by the other two points.
vectorAngle[ positions, { triple 1, triple 2, ...} ] returns the vertex angles anong a list of vertex triples.";

turningAngle::usage=
"turningAngle[ positions, {vertex 1, vertex 2, vertex 3}] returns the turning angle at vertex 2 spanned by the other two points.
turningAngle[ positions, { triple 1, triple 2, ...} ] returns the turning angles anong a list of vertex triples.";

normalVector::usage=
"normalVector[ positions, {vertex 1, vertex 2, vertex 3} ] returns the vector normal to the plane spanned by the three points.
normalVector[ positions, { triple 1, triple 2, ...} ] returns vectors normal to the plane spanned by the list of triples.
normalVector[ positions, polygon ] returns the vector normal to a polygon.
normalVector[ positions, {polygon 1, polygon 2, ...} ] returns the vectors normal to a list of polygons.";

planarAngle::usage=
"planarAngle[positions, {v1, v2, v3}] returns the oriented angle at vertex v2 spanned by the other two vertices.
planarAngle[positions, {triple 1, triple 2, ...}] returns the oriented angles at for each triple of verticles.";

foldAngle::usage=
"foldAngle[ mesh, positions, edge ] returns the fold angle along an edge.
foldAngle[ mesh, positions,{edge 1, edge 2,...} ] returns the fold angle of a list of edges.";

gaussianCurvature::usage=
"gaussianCurvature[ mesh, positions,vertex ] returns the discrete Gaussian curvature of vertex.
gaussianCurvature[ mesh, positions,{vertex 1, vertex 2, ...} ] returns the discrete Gaussian curvature of a list of vertices.
gaussianCurvature[ mesh, metric,{vertex 1, vertex 2, ...} uses a metric to explicitly compute the Gaussian curvature at each vertex.";


congruentQ::usage="congruentQ[p1,p2] tests whether the two vectorPositions are related by a rigid transformation.
congruentQ[p1,p2,tolerance] tests whether the two vectorPositions are related by a rigid transformation.
congruentQ[tolerance] is a function that can check the positions between two vertexPosition configurations.";


kawasakiQ::usage=
"kawasakiQ[\!\(\*
StyleBox[\"origami\",\nFontSlant->\"Italic\"]\)] returns True if it can be determined that the origami satisfies Kawasaki's theorem at each vertex.
Use option ZeroTest to modify how the function tests for zero. Use option WorkingPrecision to set a number of digits for the test.";


foldMatrix::usage=
"foldMatrix[\!\(\*
StyleBox[\"origami\",\nFontSlant->\"Italic\"]\)] returns the fold matrix mapping linear vertex displacements to linear fold angle changes.";

angularFoldMatrix::usage=
"angularFoldMatrix[\!\(\*
StyleBox[\"origami\",\nFontSlant->\"Italic\"]\), (\!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\), ) \!\(\*
StyleBox[\"vertex\",\nFontSlant->\"Italic\"]\)] returns the angular fold matrix of a vertex mapping the angular displacements of the folds from the xy plane to the fold angle changes.";


toOrigami::usage=
"toOrigami[ \!\(\*
StyleBox[\"object\",\nFontSlant->\"Italic\"]\) ] converts an object to an origami mechanism. Effectively this only works for some MeshRegion[] or framework[] objects.";


singleVertex::usage=
"singleVertex[ {\!\(\*
StyleBox[\"angle\",\nFontSlant->\"Italic\"]\) 1, \!\(\*
StyleBox[\"angle\",\nFontSlant->\"Italic\"]\) 2, ...} ] returns a single vertex origami with angles as sector angles.
singleVertex[ {\!\(\*
StyleBox[\"angle\",\nFontSlant->\"Italic\"]\) 1, \!\(\*
StyleBox[\"angle\",\nFontSlant->\"Italic\"]\) 2, ...}, {\!\(\*
StyleBox[\"length\",\nFontSlant->\"Italic\"]\) 1, ...} ] returns a single vertex origami with angles as sector angles and fold lengths given by the list of lengths.

See options \"angles\" and \"torsional stiffnesses\" to set the equilibrium angles and torsional stiffnesses.";

randomOrigami::usage=
"randomOrigami[ \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\) ] returns random origami with n internal vertices.";

miuraOri::usage=
"miuraOri[ \!\(\*
StyleBox[\"angle\",\nFontSlant->\"Italic\"]\) ] returns a Miura ori at a particular angle.";


flatOrigamiQ::usage=
"flatOrigamiQ[ \!\(\*
StyleBox[\"origami\",\nFontSlant->\"Italic\"]\) ] returns True if the origami mechanism is flat.
Use option ZeroTest to specify how to test for zero. Use option WorkingPrecision to choose the precision.";


yoshimuraOrigami::usage=
"yoshimuraOrigami[{\!\(\*
StyleBox[\"#\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"azimuthal\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"cells\",\nFontSlant->\"Italic\"]\), #\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"of\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"rings\",\nFontSlant->\"Italic\"]\)(, \!\(\*
StyleBox[\"twist\",\nFontSlant->\"Italic\"]\))},\!\(\*
StyleBox[\"overall\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"scale\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"height\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"ratio\",\nFontSlant->\"Italic\"]\)] creates a Yoshimura fold pattern of a particular radius, height, and integer twist if specified.";


fixVertices::usage=
"fixVertices[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), {\!\(\*
StyleBox[\"v1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"v2\",\nFontSlant->\"Italic\"]\),...}] returns a list of rules for displacements that keep a list of vertices fixed.";


constraintMatrix::usage="constraintMatrix[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) (,\!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\))] returns the matrix associated with all linear constraints in a mechanism.
Use option \"constraints\" to set additional constraints.";

compatibilityMatrix::usage="compatibilityMatrix[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) (, \!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\))] returns the compatibility matrix associated with the rigid bars of a mechanism.
It is slightly faster than constraintMatrix[] when a mechanism only has rigid bars.";


constraintEquations::usage=
"constraintEquations[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\)(, \!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\)), \!\(\*
StyleBox[\"order\",\nFontSlant->\"Italic\"]\)] returns constraint equations valid to some order in the displacements.
\!\(\*
StyleBox[\"order\",\nFontSlant->\"Italic\"]\) should be 1, 2 or Infinity. Use option \"constraints\" to set additional constraints.";


selfStresses::usage=
"selfStresses[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) (,\!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\))] returns a list of self stresses based on the rigid bars in the structure.";


infinitesimalMotions::usage=
"infinitesimalMotions[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\)(, \!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\))] returns a list of two elements: an infinitesimal linear motion and, if necessary, a list of quadratic constraints they must satisfy.

Use option \"variables\" to control the form of the output.";


isometricTrajectory::usage=
"isometricTrajectory[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"\[CapitalDelta]x1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"\[CapitalDelta]y1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"..\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"..\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\)] creates a trajectory using \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\) steps through the configuration space of a mechanism starting in the
displacement direction \!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"\[CapitalDelta]x1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"\[CapitalDelta]y1\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"..\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"..\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\).";


$defaultStiffness::usage="$defaultStiffness[\!\(\*
StyleBox[\"component\",\nFontSlant->\"Italic\"]\)] returns the default stiffness in case the constraint is rigid.
Use $defaultStiffness[\"constraints\"] to find the stiffness of added constraints.";


mechanismEnergy::usage=
"mechanismEnergy[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) ] returns an energy expression for a mechanism.
mechanismEnergy[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\) ] returns an energy expression assuming a set of vertex positions.";


compiledMechanismEnergy::usage=
"compiledMechanismEnergy[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\) ] compiles an energy and gradient for a mechanism.
compiledMechanismEnergy[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\) ] compiles an energy and gradient for a mechanism starting from a set of positions.

Undefined symbols in the energy must be set using ReplaceAll[].";


minimizeEnergy::usage=
"minimizeEnergy[ \!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"energy\",\nFontSlant->\"Italic\"]\) ] minimizes the energy of a mechanism. \!\(\*
StyleBox[\"energy\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)can be a compiled mechanism energy.";


repeatedMinimizeEnergy::usage=
"repeatedMinimizeEnergy[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"energy\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"number\",\nFontSlant->\"Italic\"]\)] minimizes the energy number times using random initial conditions.
repeatedMinimizeEnergy[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\),\!\(\*
StyleBox[\"energy\",\nFontSlant->\"Italic\"]\),\!\(\*
StyleBox[\"number\",\nFontSlant->\"Italic\"]\),\!\(\*
StyleBox[\"test\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"value\",\nFontSlant->\"Italic\"]\)] uses a numeric test value to determine if two vertex positions are the same.
repeatedMinimizeEnergy[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\),\!\(\*
StyleBox[\"energy\",\nFontSlant->\"Italic\"]\),\!\(\*
StyleBox[\"number\",\nFontSlant->\"Italic\"]\),\!\(\*
StyleBox[\"test\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"function\",\nFontSlant->\"Italic\"]\)] uses a test function to determine if two vertex positions are the same.";


tallyRepeatedMinimizeEnergy::usage=
"tallyRepeatedMinimizeEnergy[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"energy\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"number\",\nFontSlant->\"Italic\"]\)] minimizes the energy number times using random initial conditions and tallies the results.
tallyRepeatedMinimizeEnergy[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\),energy,\!\(\*
StyleBox[\"number\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"test\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"value\",\nFontSlant->\"Italic\"]\)] uses a numeric test value to determine if two vertexPositions are the same.
tallyRepeatedMinimizeEnergy[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\),energy,\!\(\*
StyleBox[\"number\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"test\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"function\",\nFontSlant->\"Italic\"]\)] uses a test function to determine if two vertexPositions are the same.";


orthogonalComplement::usage="orthogonalComplement[\!\(\*
StyleBox[\"basis\",\nFontSlant->\"Italic\"]\)] returns an orthonormal basis for the orthogonal complement of the vector space spanned by basis.
orthogonalComplement[\!\(\*
StyleBox[\"basis\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"f\",\nFontSlant->\"Italic\"]\)] returns an orthonormal basis for the complement of the vector space spanned by basis using inner product function \!\(\*
StyleBox[\"f\",\nFontSlant->\"Italic\"]\).
Options are the same as Orthogonal.";


findMinimalTrajectory::usage=
"findMinimalTrajectory[\!\(\*
StyleBox[\"mechanism\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"start\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"end\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\)] attempts to find a valid trajectory from \!\(\*
StyleBox[\"start\",\nFontSlant->\"Italic\"]\) to \!\(\*
StyleBox[\"end\",\nFontSlant->\"Italic\"]\) configurations using \!\(\*
StyleBox[\"n\",\nFontSlant->\"Italic\"]\) intermediate steps.";


dynamicalSystem::usage=
"dynamicalSystem[\!\(\*
StyleBox[\"m\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"initial\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"positions\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"initial\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"velocities\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"{\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"time\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"variable\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"start\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"time\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\",\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"end\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"time\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"}\",\nFontSlant->\"Italic\"]\)] returns a list of functions specifying how vertices will move as a function of \!\(\*
StyleBox[\"time\",\nFontSlant->\"Italic\"]\).

Use options \"mass\" and \"drag\" to set the mass and drag coefficient for the particles.";


dynamicalSystemEquations::usage=
"dynamicalSystemEquations[\!\(\*
StyleBox[\"mech\",\nFontSlant->\"Italic\"]\), {\!\(\*
StyleBox[\"variable\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"time\",\nFontSlant->\"Italic\"]\)}] returns dynamical equations for vertex positions, using \!\(\*
StyleBox[\"variable\",\nFontSlant->\"Italic\"]\) as vertex names, and \!\(\*
StyleBox[\"time\",\nFontSlant->\"Italic\"]\) as the symbol for time.

Use options \"mass\" and \"drag\" to set the mass and drag coefficient for the particles.";


mechanismPrimitives::usage=
"mechanismPrimitives[mechanism] returns a list of mechanism primitives.
mechanismPrimitives[mechanism,positions] returns a list of mechanism primitives with vertices at positions.
mechanismPrimitives[mechanism,positions, cellspec] returns a list of mechanism primitives with vertices at positions and cells specified by cellspec.";


toGraphics::usage="toGraphics[mechanism (,positions)] converts a mechanism to graphics.
toGraphics[mechanism, positions, cellspec] converts mechanism components matching cellspec to graphics.";


toMeshRegion::usage="toMeshRegion[mechanism,positions] attempts to convert a mechanism to a MeshRegion object.";


plotMechanism::usage=
"plotMechanism[ mechanism, positions ] plots a mechanism using positions.
plotMechanism[mechanism, {positions 1, positions 2,...}] creates a list of plotted mechanisms with uniform size.";


plotDisplacement::usage=
"plotDisplacement[ mechanism, vertex displacements ] plots mechanism with arrows correspond to vertex displacements overlayed.";
plotTension::usage=
"plotTension[ mechanism, edges->tesions ] plots tensions on the edges of a mechanism.";


angleMarker::usage="angleMarker[m, {v1,v2,v3}, (radius) ] creates an arc around an angle spanning (v1,v2) to (v3,v2).";
angleText::usage="angleTest[m, {v1,v2,v3}, (distance) ] adds a text label to the angle spanning (v1,v2) to (v3,v2).";


toFramework::usage=
"toFramework[ mesh ] attempts to create a linkage from a mesh.";


KLChainUnitCell::usage="KLChainUnitCell[\!\(\*
StyleBox[\"a\",\nFontSlant->\"Italic\"]\),\!\(\*
StyleBox[\"r\",\nFontSlant->\"Italic\"]\),\!\(\*
StyleBox[\"\[Theta]\",\nFontSlant->\"Italic\"]\)] returns a unit cell of the KLchain with spacing \!\(\*
StyleBox[\"a\",\nFontSlant->\"Italic\"]\), bar length \!\(\*
StyleBox[\"r\",\nFontSlant->\"Italic\"]\) and equilibrium angle for the first bar \!\(\*
StyleBox[\"\[Theta]\",\nFontSlant->\"Italic\"]\).";


HennebergOperation::usage="HennebergOperation[\!\(\*
StyleBox[\"m\",\nFontSlant->\"Italic\"]\), {\!\(\*
StyleBox[\"move1\",\nFontSlant->\"Italic\"]\), \!\(\*
StyleBox[\"move2\",\nFontSlant->\"Italic\"]\),...}] takes a list of Henneberg moves specified as either 1 or 2 and performs them on a 2D mechanism \!\(\*
StyleBox[\"m\",\nFontSlant->\"Italic\"]\).";


periodicData::usage="periodicData[] contains data needed to compute for a periodic mechanism.";
periodicityRules::usage=
"periodicityRules[mechanism, periodic data, vertexPosition|vertexDisplacement, maps] returns a list of rules mapping either vertexPosition or vertexDisplacement data associated with the periodic data of a mechanism.";
identificationRules::usage="identificationRules[mechanism, {map1,...}] finds the equivalence classes of vertices that are overlapping under a set of maps";


periodicEquivalenceClasses::usage="periodicEquivalenceClasses[m,periodic data,elements] groups \!\(\*
StyleBox[\"elements\",\nFontSlant->\"Italic\"]\) of mechanism \!\(\*
StyleBox[\"m\",\nFontSlant->\"Italic\"]\) into classes related by being periodic images.";


Begin["`Private`"];


$meshRegionProperties={MeshCellStyle,MeshCellLabel,MeshCellShapeFunction};


$mechanismComponents={rigidBar,spring,joint,fold,vertexData,edgeData,angleJoint};
$mechanismCompositeComponents={block,flexibleBar,triangulatedFace};


mechanismQ[_framework|_origami]:=True
mechanismQ[_]:=False


mechanismPattern=_framework|_origami;


dataForm[rigidBar]:={"length","stiffness"}
dataForm[spring]:={"length","stiffness","force"}
dataForm[joint]:={"position","components","stiffness"}
dataForm[fold]:={"angle","torsionalStiffness"}
dataForm[vertexData]:={"label","data"}
dataForm[edgeData]:={"label","data"}
dataForm[angleJoint]:={"angle","angularStiffness"}
dataForm[_]:={}


(* 
	overlappingVertices returns a list of which vertices in the first set of positions can be
	identified in the second set.
*)
overlappingVertices[positions1_?MatrixQ,positions2_?MatrixQ]/;Dimensions[positions1]==Dimensions[positions2]:=
With[
{
	allPairs=Tuples[{Range[Length[positions1]],Range[Length[positions2]]}],
	zeroTest=(Chop[# . #]==0&)
},
	Rule@@@Select[
		allPairs,
		zeroTest[positions1[[#[[1]]]]-positions2[[#[[2]]]]]&
	]
]


Options[orthogonalComplement]=Options[Orthogonalize];
orthogonalComplement::notmat="Not all elements of basis have the same dimension.";
orthogonalComplement::notind="Basis is not linearly independent.";


basisQ[array_?MatrixQ]:=MatrixRank[array]==Dimensions[array][[1]]
basisQ[_]:=(Message[orthogonalComplement::notmat]; False)


orthogonalComplement[array_?basisQ,opt:OptionsPattern[]]:=
Select[Drop[
	Orthogonalize[Join[array,IdentityMatrix[Dimensions[array][[2]]]],opt],
	Dimensions[array][[1]]
],# . #>0&]
orthogonalComplement[array_?basisQ,inn_,opt:OptionsPattern[]]:=
Select[Drop[
	Orthogonalize[Join[array,IdentityMatrix[Dimensions[array][[2]]]],inn,opt],
	Dimensions[array][[1]]
],# . #>0&]

orthogonalComplement[__]:="nothing" /; Message[orthogonalComplement::notind]


(* returns a projection operator to project out the array *)
projectOut[array_?MatrixQ]:=With[
{oarray=Orthogonalize[array]},
IdentityMatrix[Dimensions[array][[2]]] - Transpose[oarray] . oarray
]


(* returns a projection operator to project in the array *)
projectTo[array_?MatrixQ]:=With[
{oarray=Orthogonalize[array]},
Transpose[oarray] . oarray
]


displacements[expr_]:=Cases[Variables[expr],_vertexDisplacement]
parameters[expr_]:=DeleteCases[Variables[expr],_vertexDisplacement]


realQ[data_]:=(Chop[#.#]==0 &) @ Im[Flatten[{data}]]


orderPairs[{}]:={}
orderPairs[pairList_?(MatrixQ[#,IntegerQ]&)]:=
	orderPairsTopologicalSort[Graph[UndirectedEdge@@@pairList]]/; Dimensions[pairList][[2]]==2

orderPairs[pairList_,correspondingList_]:=
With[
{
association=Dispatch@Thread[pairList->correspondingList]
},
	orderPairs[pairList]/.association
]/; Length[pairList]==Length[correspondingList]


(* this does a topological sort on a graph *)
orderPairsTopologicalSort[g_?AcyclicGraphQ]:=Partition[TopologicalSort[DirectedEdge@@@EdgeList[g]],2,1]
orderPairsTopologicalSort[g_Graph]:=List@@@(First@FindCycle[g,Infinity,1])


rotateTo[s_List,v_]:=With[{pos=FirstPosition[s,v]},If[MissingQ[pos],s,RotateLeft[s,pos[[1]]-1]]]
rotateTo[h_[s_List],v_]:=h[rotateTo[s,v]]


distributePropertyTag[data_]:=
	Module[{x,y,z},
		Flatten[data//.{
			Property[x_,{}]:>x,
			Property[x_List,y_]:>(Property[#,y]&/@x),
			Property[Property[x_,y_],z_]:>Property[x,Join[Flatten@{{y},{z}}]]
		}]
	]


orderFaces[faceList_,v_Integer]:=orderPairs[{#[[2]],Last[#]}&/@faceList,faceList]


Options[rotateCells]={"Flatten"->True};


rotateCells[cells_,OptionsPattern[]]:=With[
{sortedCells=GatherBy[cells,Length]},
	Flatten[NestList[RotateLeft[#,{0,1}]&,#,Length[#[[1]]]-1]&/@sortedCells,2]
]/;OptionValue["Flatten"]


rotateCells[cells_,OptionsPattern[]]:=With[
{sortedCells=GatherBy[cells,Length]},
	First[NestList[RotateLeft[#,{0,1}]&,#,Length[#[[1]]]-1]&/@sortedCells]
]/;Not[OptionValue["Flatten"]]


connectivity["Methods"]:={{"vertices","edges","faces"}->{"vertices","edges","faces","ordered faces","ordered edges"}};


(*
connectivity[surf,"faces"\[Rule]"vertices"];//RepeatedTiming
0.0079s on {7445,22105,14661} triangulated vertices, edges and faces
*)
connectivity[m_?MeshRegionQ,Rule["faces","vertices"]]:=
	MeshCells[m,2][[All,1]]


rotateThroughFaces[faces_]:=Flatten[NestList[RotateLeft[#,{0,1}]&,faces,Last[Dimensions[faces]]-1],1]
connectivity[m_MeshRegion,Rule["vertices","faces"]]:=With[
{faces=rotateThroughFaces[MeshCells[m,2][[All,1]]]},
	GatherBy[
		Join[
			Transpose[{Range[MeshCellCount[m,0]]}], (*make a list of vertices in order of the form {{1},{2},...}*)
			faces
		],
	First][[All,2;;]]
]


(* 
geometry`Private`connectivity[surf,"faces"\[Rule]"edges"];//RepeatedTiming
0.036s on {12289,36571,24283} triangulated vertices, edges and faces

Added ToPackedArray[] which ever so slightly speeds this function up. Since Transpose[]
packs arrays, it must speed up the operation of Transpose[] itself.
*)
connectivity[m_?MeshRegionQ,Rule["faces","edges"]]:=
With[{cells=Transpose[ToPackedArray[MeshCells[m,2][[All,1]]]]},
	Flatten[Partition[Transpose[Join[cells,{cells[[1]]}]],{1,2},1],{3}][[1]]
]

(* 
geometry`Private`connectivity[surf,"faces"\[Rule]"edges"];//RepeatedTiming
0.19s on {7445,22105,14661} triangulated vertices, edges and faces
*)
connectivity[m_MeshRegion,Rule["edges","faces"]]:=With[
{edges=MeshCells[m,1][[All,1]],faces=MeshCells[m,2][[All,1]]},
	GatherBy[Flatten[{edges,rotateCells[faces]},1],Sort[#[[1;;2]]]&][[All,2;;]]
]


(*
geometry`Private`connectivity[surf,"edges"\[Rule]"vertices"];//RepeatedTiming
0.015s on {8236,24449,16214} triangulated vertices, edges and faces
*)
connectivity[m_?MeshRegionQ,Rule["edges","vertices"]]:=
	MeshCells[m,1][[All,1]]

(*
geometry`Private`connectivity[surf,"vertices"\[Rule]"edges"];//RepeatedTiming
0.032s on {8236,24449,16214} triangulated vertices, edges and faces
*)
connectivity[m_?MeshRegionQ,Rule["vertices","edges"]]:=With[
{edges=MeshCells[m,1][[All,1]]},
	SortBy[GatherBy[Flatten[{edges,Reverse[edges,{2}]},1],First],First]
]


(* 
geometry`Private`connectivity[surf,"edges"\[Rule]"ordered faces"];//RepeatedTiming
0.81s on {24731,73776,49046} triangulated vertices, edges and faces

This function unpacks packed arrays.
*)
connectivity[m_MeshRegion,Rule["edges","ordered faces"]]:=
With[
{
test1=connectivity[m,"vertices"->"faces"],
edges=Transpose[MeshCells[m,1][[All,1]]]
},
	ToPackedArray@MapThread[
		Join[#1,#2]&,
		{
		MapThread[Cases[#1,{__,#2}]&,{test1[[edges[[1]]]],edges[[2]]}],
		MapThread[Cases[#1,{_,#2,__}]&,{test1[[edges[[1]]]],edges[[2]]}]
		}
	]
]


(*
geometry`Private`connectivity[surf,"vertices"\[Rule]"ordered faces"];//Timing
0.90s on {7445,22105,14661} triangulated surface.

Unpacks lists.
*)
connectivity[m_MeshRegion,Rule["vertices","ordered faces"]]:=With[
{unorderedFace=connectivity[m,"vertices"->"faces"]},
	MapThread[orderFaces,{unorderedFace,Range[Length[unorderedFace]]}]
]


(*
geometry`Private`connectivity[surf,"vertices"\[Rule]"ordered edges"];//Timing
0.912s on {7445,22105,14661}

Unpacks lists.
*)
connectivity[m_?MeshRegionQ,Rule["vertices","ordered edges"]]:=
	connectivity[m,"vertices"->"ordered faces"][[All,All,1;;2]]


connectivity::badcombo="Methods are not recognized in this combination.";
connectivity[m_MeshRegion,Rule[_,_]]:="nothing" /; Message[connectivity::badcombo]


boundaryEdges[m_MeshRegion]:=
Module[
{
	facePairs=connectivity[m,"edges"->"faces"],
	edges=MeshCells[m,1][[All,1]],
	boundary
},
	boundary=Pick[edges,Length/@facePairs,1];
	If[Length[boundary]==0,
		{},
		Map[List@@#&,FindCycle[Graph[boundary],Infinity,All],{2}]
	]
]


boundaryVertices[m_MeshRegion]:=Map[First@@#&,boundaryEdges[m],{2}]


boundaryFaces[m_MeshRegion]:=Module[{i},
With[{boundary=boundaryVertices[m],faces=MeshCells[m,2][[All,1]]},
	Table[Select[faces,ContainsAny[boundary[[i]],#]&],{i,1,Length[boundary]}]
]]


interiorEdges[mr_MeshRegion]:=
	Pick[
		MeshCells[mr,1][[All,1]],
		Length/@connectivity[mr,"edges"->"faces"],
		2
	]


interiorVertices[mr_MeshRegion]:=
Complement[
	DeleteDuplicates[Flatten[interiorEdges[mr]]],
	Flatten@boundaryVertices[mr]
]


inactiveForm[expr_]:=With[{head=Head[expr]},
	ReleaseHold[Uncompress[Compress[expr],Hold]/.head:>Inactive[head]]
]


deformMesh[m_MeshRegion,pos_?numericCoordinatesQ]:=
	Activate[
		ReplacePart[inactiveForm[m],1->pos]
	]/;MeshCellCount[m,0]==Length[pos]
deformMesh[m_compiledMeshRegion,pos_?numericCoordinatesQ]:=
	ReplacePart[m,1->deformMesh[m["mesh"],pos]]


deformMesh::badpos="Number of vertices in positions not the same as in the MeshRegion.";
deformMesh::badnum="Displacements are not valid or numeric.";

deformMesh[m_MeshRegion,pos_?numericCoordinatesQ]:="nothing"/;Message[deformMesh::badpos]
deformMesh[m_MeshRegion,p_]:="nothing"/;Message[deformMesh::badnum]


meshCells[mr_MeshRegion]:=Module[
{i},
	distributePropertyTag[Flatten@Table[Property[
		MeshCells[mr,{i,#}],DeleteCases[{
		MeshCellStyle->PropertyValue[{mr,{i,#}},MeshCellStyle],
		MeshCellShapeFunction->PropertyValue[{mr,{i,#}},MeshCellShapeFunction],
		MeshCellLabel->PropertyValue[{mr,{i,#}},MeshCellLabel]
	},Rule[_,Automatic]]]&/@Range[MeshCellCount[mr,i]],{i,0,2}]]
]


meshCells[mr_MeshRegion,i_Integer]:=
	distributePropertyTag[Flatten@Property[
		MeshCells[mr,{i,#}],DeleteCases[{
		MeshCellStyle->PropertyValue[{mr,{i,#}},MeshCellStyle],
		MeshCellShapeFunction->PropertyValue[{mr,{i,#}},MeshCellShapeFunction],
		MeshCellLabel->PropertyValue[{mr,{i,#}},MeshCellLabel]
	},Rule[_,Automatic]]]&/@Range[MeshCellCount[mr,i]]]


orientedQ[mr:_MeshRegion|_compiledMeshRegion]:=
	AllTrue[
		DeleteCases[connectivity[mr,"edges"->"faces"],{_}],
		facePairOrientedQ
	]
orientedQ[_]:=False


facePairOrientedQ[{v1_,v2_}]:=With[
{
	eg2=Take[RotateLeft[v2,#],2]&/@Range[Length[v2]],
	eg1=Reverse[Take[RotateLeft[v1,#],2]]&/@Range[Length[v1]]
},
	ContainsAny[eg1,eg2]
]
facePairOrientedQ[v1_,v2_]:=With[
{
	eg2=Take[RotateLeft[v2,#],2]&/@Range[Length[v2]],
	eg1=Reverse[Take[RotateLeft[v1,#],2]]&/@Range[Length[v1]]
},
	ContainsAny[eg1,eg2]
]


listParameters[expr_]:=DeleteDuplicates[(Extract[expr,#]&)/@Position[List@@expr,infinitesimal[_,_]]]


(*
	This basically does what Series[] does in a somewhat dumber way.
	It won't handle limits as nicely as Series[] but it typically presents results that look
	more useful for analytic expressions.
*)
expandExpression[expr_,param_]:=Module[
{i,tmp},
	Total[Table[(tmp@@param)^i D[expr,{param,i}]/(i!),{i,0,param[[2]]}]/.param->0]/.tmp->infinitesimal
]
expandExpression[expr_?NumericQ]:=expr
expandExpression[expr_]:=With[{params=listParameters[expr]},
	Fold[expandExpression,expr,Reverse@params]
]


orthogonalizeDisplacements[displacements_?ArrayQ,tol:_?NumericQ:10^(-8)]:=
With[{dim=Dimensions[displacements][[3]],tolsq=tol^2},
	Partition[#,dim]&/@Select[Orthogonalize[Flatten/@displacements,Tolerance->tol],#.#>tolsq&]
]/;Length[Dimensions[displacements]]==3


orthogonalizeDisplacements::notdispl="Not a list of valid vertex displacements of the same dimension.";
orthogonalizeDisplacements::tol="Tolerance must be numeric.";

orthogonalizeDisplacements[displacements_?ArrayQ,___]:="nothing"/;Message[orthogonalizeDisplacements::notdispl]
orthogonalizeDisplacements[displacements_?ArrayQ,_]:="nothing"/;Message[orthogonalizeDisplacements::tol]


normalizeDisplacement[displacement_?MatrixQ]:=Partition[Normalize[Flatten[displacement]],Last[Dimensions[displacement]]]


evaluateData[{Automatic,d_}]:=d
evaluateData[{x_,d_}]:=x


componentData["stiffness", m_, positions_, spring[indices_,data_] ]:=data[[All,2]]

componentData["length",m_,positions_,spring[indices_,data_]]:=
With[{lengths=Sqrt[displacementLengthSquared[positions,indices]],prescribedLengths=data[[All,1]]},
	evaluateData /@ Transpose[{prescribedLengths,lengths}]
]

componentData["force",m_,positions_,spring[indices_,data_]]:=data[[All,3]] /. "harmonic"->((#1-#2)^2/2&)


componentData["stiffness",m_,positions_,rigidBar[indices_,data_]]:=data[[All,2]]

componentData["length",m_,positions_,rigidBar[indices_,data_]]:=
With[{lengths=Sqrt[displacementLengthSquared[positions,indices]],prescribedLengths=data[[All,1]]},
	evaluateData /@ Transpose[{prescribedLengths,lengths}]
]


componentData["torsionalStiffness",m_,positions_,fold[indices_,data_]]:=Last/@data
componentData["angle",m_,positions_,fold[indices_,data_]]:=With[{angles=First/@data},With[
{automaticIndices=indices[[ Pick[Range[Length[indices]],angles,Automatic] ]]},
	If[Length[automaticIndices]>0,
		indices/.Dispatch@Thread[automaticIndices->foldAngle[m,positions,automaticIndices]]/.Dispatch@Thread[indices->angles],
		angles
	]
]]


componentData["angularStiffness",m_,positions_,angleJoint[indices_,data_]]:=Last/@data

componentData["angle",m_,positions_,angleJoint[indices_,data_]]:=
With[{angles=data[[All,1]]},With[
{automaticIndices=indices[[ Pick[Range[Length[indices]],angles,Automatic] ]]},
	If[Length[automaticIndices]>0,
		(indices/.Dispatch[Thread[automaticIndices->turningAngle[positions,automaticIndices]]])/.Dispatch@Thread[indices->angles],
		angles
	]
]]


componentData["stiffness",m_,positions_,joint[indices_,data_]]:=data[[All,3]]

componentData["components",m_,positions_,joint[indices_,data_]]:=With[{
allMeaning=Switch[embeddingDimension[m],
	3,{"x","y","z"},
	2,{"x","y"},
	_,{}
]},
	data[[All,2]]/.All->allMeaning
]

computePosition[index_,Automatic,pos_]:=pos[[index]]
computePosition[index_,specified_,pos_]:=specified

componentData["position",m_,positions_,joint[indices_,data_]]:=With[{pos=data[[All,1]]},
	MapThread[computePosition[#1,#2,positions]&,{indices,pos}]
]


expandCell[coordinates_][Property[cell_,properties_]]:=Property[expandCell[coordinates][cell],properties]


expandCell[coordinates_][block[indices_]]:=With[
{
	centroid=Mean[to3D[coordinates][[indices]]],
	nv=First[normalVector[to3D[coordinates],{indices},"normalize"->False]],
	p1=ToString[Unique[]],p2=ToString[Unique[]]
},
	Join[
	{
	Polygon[indices],
	Point[p1->(centroid+nv/10)],
	Point[p2->(centroid-nv/10)]
	},
	rigidBar[{#,p1}]&/@indices,
	rigidBar[{#,p2}]&/@indices,
	rigidBar[#]&/@Partition[indices,2,1,1]
	]
]/;Length[indices]>=3


block::badn="Faces need at least 3 indices.";
expandCell[coordinates_][block[_]]:=(Message[block::badn]; {})


expandCell[coordinates_][triangulatedFace[indices_]]:=Flatten[decomposePolygon[coordinates,indices]]/;Length[indices]>2

triangulatedFace::badn="Faces need more than 3 indices.";
expandCell[coordinates_][triangulatedFace[indices_]]:=(Message[triangulatedFace::badn]; {})/;Length[indices]<3


findShortestDiagonal[coordinates_,indices_]:=Module[{
	pairs=Subsets[Range[Length[indices]],{2}],
	adjacent=Join[Partition[Range[Length[indices]],2,1,1],Reverse/@Partition[Range[Length[indices]],2,1,1]],
	diagonals
},
	diagonals=Select[pairs,Not[MemberQ[adjacent,#]]&]; (*remove the sides of the polygon to make the diagonal list*)
	First[First[MinimalBy[Transpose[{diagonals,displacementLengthSquared[coordinates[[indices]],diagonals]}],Last]]]
]


decomposePolygon[coordinates_,indices_]:=With[
{
diagonal=findShortestDiagonal[coordinates,indices]
},
	{
	Property[edgeData[indices[[diagonal]]],{"data"->indices}],
	Property[fold[indices[[diagonal]]],{"angle"->0,"stiffness"->Infinity,MeshCellStyle->Gray}],
	decomposePolygon[coordinates,indices[[diagonal[[1]];;diagonal[[2]]]]],
	decomposePolygon[coordinates,Join[indices[[diagonal[[2]];;]],indices[[;;diagonal[[1]]]]]]
	}
]/;Length[indices]>3
decomposePolygon[coordinates_,indices_]:=face[indices]/;Length[indices]==3


expandCell[coordinates_][flexibleBar[indices_,num_Integer]]:=With[
{
	endPoints=coordinates[[indices]],pLabel=ToString[Unique[]]
},
	Join[
		Property[Point[pLabel[#]->(endPoints[[1]]+# endPoints[[2]]/(num+1))],MeshCellStyle->{Gray}]&/@Range[num],
		rigidBar/@Partition[Range[3,num+2],2,1],
		{rigidBar[{indices[[1]],pLabel[1]}],rigidBar[{pLabel[num],indices[[2]]}]},
		angleJoint/@Partition[Range[3,num+2],3,1],
		{angleJoint[{indices[[1]],3,4}],angleJoint[{num+1,num+2,indices[[2]]}]}
	]
]/;num>1


expandCell[coordinates_][flexibleBar[indices_,1]]:=With[
{
	endPoints=coordinates[[indices]],pLabel=ToString[Unique[]]
},
		{
		Property[Point[pLabel->(endPoints[[1]]+endPoints[[2]])/2],MeshCellStyle->{Gray}],
		rigidBar[{indices[[1]],pLabel}],rigidBar[{pLabel,indices[[2]]}],
		angleJoint[{indices[[1]],pLabel,indices[[2]]}]
		}
]


expandCell[coordinates_][flexibleBar[indices_,0]]:={rigidBar[indices]}

flexibleBar::badn="Number of points between `1` and `2` must be an integer 0 or larger.";
expandCell[coordinates_][flexibleBar[indices_,_]]:=(Message[flexibleBar::badn,indices[[1]],indices[[2]]]; {rigidBar[indices]})


expandCell[coordinates_][cell_]:=cell/;Not[MatchQ[Join[{Property},$mechanismCompositeComponents],Head[cell]]]


cellForm[cell_]:=cellForm[Property[cell,{}]]/;Head[cell]=!=Property


(*MeshRegion cell forms*)
cellForm[Property[Point[index_],properties_]]:={
	{},
	{{Point,index,FilterRules[properties,$meshRegionProperties]}},
	{}
}
cellForm[Property[Polygon[index_],properties_]]:={
	{},
	{{Polygon,index,FilterRules[properties,$meshRegionProperties]}},
	{}
}
cellForm[Property[Line[index_],properties_]]:={
	{},
	{{Line,index,FilterRules[properties,$meshRegionProperties]}},
	{}
}


(*vertex adding cell*)
cellForm[Property[Point[label_->position_],properties_]]:={
	{{label,position}},
	{{Point,label,FilterRules[properties,$meshRegionProperties]}},
	{}
}


Options[spring]={"stiffness"->1,"length"->Automatic,"force"->"harmonic"};
cellForm[Property[spring[indices_],properties_]]:={
	{},
	{{Line,indices,Join[{MeshCellStyle->Gray},FilterRules[properties,$meshRegionProperties]]}},
	{{spring,indices,FilterRules[properties,Options[spring]]}}
}


Options[rigidBar]={"stiffness"->Infinity,"length"->Automatic};
cellForm[Property[rigidBar[indices_],properties_]]:={
	{},
	{{Line,indices,Join[{MeshCellStyle->Black},FilterRules[properties,$meshRegionProperties]]}},
	{{rigidBar,indices,FilterRules[properties,Options[rigidBar]]}}
}


Options[fold]={"torsionalStiffness"->Infinity,"angle"->Automatic};
cellForm[Property[fold[indices_],properties_]]:={
	{},
	{{Line,indices,Join[{MeshCellStyle->Black},FilterRules[properties,$meshRegionProperties]]}},
	{
	{rigidBar,indices,FilterRules[properties,Options[rigidBar]]},
	{fold,indices,FilterRules[properties,Options[fold]]}
	}
}


Options[face]={"stiffness"->Infinity,"length"->Automatic};
cellForm[Property[face[indices_],properties_]]:={
	{},
	Join[
	{{Polygon,indices,FilterRules[properties,$meshRegionProperties]}},
	{Line,#,{MeshCellStyle->Black}}&/@Partition[indices,2,1,1]
	],
	{rigidBar,#,FilterRules[properties,Options[rigidBar]]}&/@Partition[indices,2,1,1]
}


Options[joint]={"stiffness"->Infinity,"position"->Automatic,"components"->All};
cellForm[Property[joint[indices_],properties_]]:={
	{},
	{{Point,indices,Join[{MeshCellStyle->{Gray,PointSize[Scaled[0.02]]}},FilterRules[properties,$meshRegionProperties]]}},
	{{joint,indices,FilterRules[properties,Options[joint]]}}
}


Options[angleJoint]={"angularStiffness"->Infinity,"angle"->Automatic};
cellForm[Property[angleJoint[indices_],properties_]]:={
	{},
	{},
	{{angleJoint,indices,FilterRules[properties,Options[angleJoint]]}}
}


Options[vertexData]={"label"->None,"data"->{}};
cellForm[Property[vertexData[indices_],properties_]]:={
	{},
	{},
	{{vertexData,indices,FilterRules[properties,Options[vertexData]]}}
}


Options[edgeData]={"label"->None,"data"->{}};
cellForm[Property[edgeData[indices_],properties_]]:={
	{},
	{},
	{{edgeData,indices,FilterRules[properties,Options[edgeData]]}}
}


Options[faceData]={"label"->None,"data"->{}};
cellForm[Property[faceData[indices_],properties_]]:={
	{},
	{},
	{{faceData,indices,FilterRules[properties,Options[faceData]]}}
}


Options[periodicVertex]={"label"->None,"data"->{}};
cellForm[Property[periodicVertex[indices_],properties_]]:={
	{},
	{},
	{{periodicVertex,indices,FilterRules[properties,Options[periodicVertex]]}}
}


cellForm::unknowncell="Cell type `1` unrecognized.";
cellForm[Property[x_,_]]:=(
	Message[cellForm::unknowncell,Head[x]];
	{{},{},{}}
)


unpackCell[Property[cell_[indices_],properties_]]:={{cell,indices,properties}}
unpackCell[cell_[indices_]]:={{cell,indices,{}}}/;Head[cell]=!=Property
unpackCell[h_[indices_,data_]]:=MapThread[{h,#1,Thread[dataForm[h]->#2]}&,{indices,data}]

unpackCells[data_List]:=Flatten[unpackCell/@data,1]


repackDisplayCell[{cell_Symbol,indices_,{}}]:=cell[indices]
repackDisplayCell[{cell_Symbol,indices_,properties_}]:=Property[cell[indices],properties]

repackDisplayCells[unpackedCells_]:=repackDisplayCell/@unpackedCells


repackMechanismCells[mechanismCells_]:=
	#[[1,1]][Developer`ToPackedArray[#[[2]]],Developer`ToPackedArray[#[[3]]]]&/@Transpose/@GatherBy[
		{#[[1]],#[[2]],dataForm[#[[1]]]/.#[[3]]/.Options[#[[1]]]}&/@mechanismCells,
		First
	]/;Length[mechanismCells]>0
repackMechanismCells[{}]:={}


replaceUnpackedCells[data_,rules_]:=With[
{flipCells=Transpose[data]},
	Transpose[{flipCells[[1]],flipCells[[2]]/.rules,flipCells[[3]]}]
]/;Length[data]>0
replaceUnpackedCells[{},rules_]:={}


replaceRepeatedUnpackedCells[data_,rules_]:=With[
{flipCells=Transpose[data]},
	Transpose[{flipCells[[1]],flipCells[[2]]//.rules,flipCells[[3]]}]
]/;Length[data]>0
replaceRepeatedUnpackedCells[{},rules_]:={}


removeOverlappingCoordinates[{coordinateList_,displayCells_,mechanicalCells_},precision_:10^(-12)]:=
Module[
{
	numberedVertices=Transpose[{ Range @ Length @ coordinateList, coordinateList }],
	gatheredVertices,rules
},
	gatheredVertices=GatherBy[
		numberedVertices,
		(*they are the same if they are the same within the specified precision.*)
		Rationalize[N[#[[2]]],precision]&
	];
	rules=Dispatch @ Flatten[ (*two levels to thread through*)
		Thread /@ Thread[gatheredVertices[[All,All,1]] -> Range[Length[gatheredVertices]] ]
	];

	{
	#[[1,2]]& /@ gatheredVertices,
	replaceUnpackedCells[displayCells,rules],
	replaceUnpackedCells[mechanicalCells,rules]
	}
]


(*distribute properties across a list of cells recursively *)
distributeProperty[cellList_List]:=Flatten[cellList //. {
	Property[x_List,y_]:>(Property[#,y]&/@x),
	Property[Property[x_,y_],z_]:>Property[x,Normal@Merge[Flatten[{{y},{z}}],Flatten]]
}]


processCells[coordinates_,cellList_List]:=
	Flatten[#,1]&/@Transpose[cellForm /@ distributeProperty[ expandCell[ coordinates ] /@ cellList] ]


processCoordinates[oldCoordinates_,newCoordinates_]:=
With[{dim=Max[Length/@oldCoordinates,Length/@Last/@newCoordinates],num=Length[oldCoordinates]+Length[newCoordinates]},
{
	PadRight[Join[oldCoordinates,Last/@newCoordinates],{num,dim}],
	Dispatch[MapThread[#1->#2&,{First/@newCoordinates,Range[Length[oldCoordinates]+1,Length[oldCoordinates]+Length[newCoordinates]]}]]
}]


processElements[coordinates_,cells_List]:=Module[
{
finalCoordinates,newCoordinates,displayElements,mechanicalElements,coordinateLabels
},
	{newCoordinates,displayElements,mechanicalElements}=processCells[coordinates,cells];
	{finalCoordinates,coordinateLabels}=processCoordinates[coordinates,newCoordinates];
	{
		finalCoordinates,
		replaceUnpackedCells[displayElements,coordinateLabels],
		replaceUnpackedCells[mechanicalElements,coordinateLabels]
	}
]


deleteDegenerateCells[{coordinates_,displayCells_,elementCells_}]:=
{
	coordinates,
	Select[
		DeleteDuplicatesBy[displayCells,{#[[1]],Sort[Flatten[{#[[2]]}]]}&],
		DuplicateFreeQ[Flatten[{#[[2]]}]]&
	],
	Select[
		DeleteDuplicatesBy[elementCells,{#[[1]],Sort[Flatten[{#[[2]]}]]}&],
		DuplicateFreeQ[Flatten[{#[[2]]}]]&
	]
}


vertexRulesQ[num_Integer,r:{__Rule}]:=With[{ruleRewrite=Transpose[List@@@r]},
	MatrixQ[ruleRewrite,IntegerQ]&&
	ContainsAll[Range[num],ruleRewrite[[1]]]&&
	ContainsAll[Range[num],ruleRewrite[[2]]]&&
	Length[r]==num
]


remapVertices[m_?mechanismQ,r_]:=With[{
unpackedm=m["unpack"],sorted=Transpose[SortBy[List@@@r,First]]
},
	Head[m][{
		unpackedm[[1]][[sorted[[2]]]],
		replaceUnpackedCells[unpackedm[[2]],r],
		replaceUnpackedCells[unpackedm[[3]],r]
	}]
]/;vertexRulesQ[MeshCellCount[m,0],r]

remapVertices::ru="Rules should be a valid permutation of the vertices of the mechanism in the form {_Integer->_Integer,...}";
remapVertices[m_?mechanismQ,_]:="nothing"/;Message[remapVertices::ru]


cleanupCells[{coordinates_, displayCells_, mechanismCells_}]:=With[
{numVertices=Length[coordinates]},
	{ coordinates, Select[displayCells, validCellQ[numVertices, # ]&], Select[mechanismCells, validCellQ[numVertices, # ]&] }
]


validCellQ::range="Index for cell `1` out of range.";
validCellQ::ind="Indices haven't evaluated to integers for cell `1`.";

validCellQ[numVertices_,{cellType_Symbol, indices : _Integer | {__Integer}, properties : {___Rule}}]:=With[
{ind=Flatten[{indices}]},
	If[Min[ind]<0 || Max[ind]>numVertices,
		Message[validCellQ::range,cellType[indices]];
		False,

		True
	]
]
validCellQ[numVertices_,{cellType_Symbol, indices_, properties : {___Rule}}]:=(Message[validCellQ::ind, cellType[indices]]; False)


equationToExpression[Equal[a_,b_]]:=a-b
equationToExpression[Equal[a_,b__]]:=ConstantArray[a,Length[{b}]]-{b}
equationToExpression[a:Except[_Equal]]:=a
SetAttributes[equationToExpression,Listable];


constraintVector[positions_,None]:={}
constraintVector[positions_,constraints_]:=With[
{
equations=Flatten[{equationToExpression[constraints]}],
dimensions=Dimensions[positions]
},
	equations/.Dispatch[dataRules[vertexDisplacement,vertexPosition[ Range[dimensions[[1]]],All[dimensions[[2]]] ]-positions]]
]


reduceConstraintToOrder[positions_,constraintVector_,order_Integer?(#>=0&)]:=Module[
{
dimensions=Dimensions[positions],
expandedExpression,x
},
	expandedExpression=constraintVector/.Dispatch[dataRules[vertexPosition, positions+x vertexDisplacement[Range[dimensions[[1]]],All[dimensions[[2]]]]]];
	Total[D[expandedExpression,{x,#}]/Factorial[#]&/@Range[0,order] /. x->0]
]
reduceConstraintToOrder[positions_,constraintVector_,_]:=constraintVector


numericExpressionQ[positions_,expression_]:=
With[{reducedExpression=(# . #&)[Flatten[{expression/.dataRules[vertexPosition,N[positions]]/.vertexDisplacement[_,_]->0.001} ]]},
	NumericQ[reducedExpression]&&Chop[Im[reducedExpression]]==0
]


parseValidTokenQ[foldAngle[{_Integer,_Integer}]]:=True
parseValidTokenQ[displacementLength[{_Integer,_Integer}]]:=True
parseValidTokenQ[displacementLengthSquared[{_Integer,_Integer}]]:=True
parseValidTokenQ[_]:=False

parseExtractTokens[expr_]:=With[{rawTokens=Select[Variables[expr],parseValidTokenQ]},
	Head[#[[1]]][#[[All,1]]]&/@GatherBy[rawTokens,Head]
]

parseEvaluateTokens[m_,positions_,foldAngle[data_]]:=Thread[(foldAngle/@data) -> foldAngle[m,positions,data]]
parseEvaluateTokens[m_,positions_,displacementLength[data_]]:=Thread[(displacementLength/@data) -> displacementLength[m,positions,data]]
parseEvaluateTokens[m_,positions_,displacementLengthSquared[data_]]:=Thread[(displacementLengthSquared/@data) -> displacementLengthSquared[m,positions,data]]


parseComponentData[m_,positions_,rigidBar[indices_,data_]]:=With[
{
	lengths=MapThread[If[#2===Automatic,#1,#2]&,{displacementLength[positions,indices],data[[All,1]]}],
	stiffnesses=data[[All,2]]
},
	Join[
		Thread[(length/@indices)->lengths],
		Thread[(length/@(Reverse/@indices))->lengths],
		Thread[(lengthSquared/@indices)->lengths^2],
		Thread[(lengthSquared/@(Reverse/@indices))->lengths^2],
		Thread[(stiffness/@indices)->stiffnesses],
		Thread[(stiffness/@(Reverse/@indices))->stiffnesses]
	]
]

parseComponentData[m_,positions_,foldAngle[indices_,data_]]:=With[
{
	angles=MapThread[If[#2===Automatic,#1,#2]&,{displacementLength[positions,indices],data[[All,1]]}],
	torsionalStiffnesses=data[[All,2]]
},
	Join[
		Thread[(angle/@indices)->angles],
		Thread[(angle/@(Reverse/@indices))->angles],
		Thread[(torsionalStiffness/@indices)->torsionalStiffnesses],
		Thread[(torsionalStiffness/@(Reverse/@indices))->torsionalStiffnesses]
	]
]

parseComponentData[m_,positions_,_]:={}


parseExpression[m_,positions_,expr_]:=With[
{
	parsingRules=Flatten[{
		parseComponentData[m,positions,#]&/@m["components"],
		parseEvaluateTokens[m,vertexPosition[m],#]&/@parseExtractTokens[expr]
	}]
},
	expr//.Dispatch[parsingRules]
]


$coordinateSymbols[3]={"x","y","z"};
$coordinateSymbols[2]={"x","y"};


vertexPosition[n : {__Integer}, d_]:=vertexPosition[#,d]& /@ n
vertexPosition[n_Integer, d : {__String}|{__Integer}]:=vertexPosition[n,#]&/@d
vertexPosition[n_Integer, All[ d_Integer ] ]:=vertexPosition[n,#]& /@ $coordinateSymbols[d]
vertexPosition[n_Integer, m_Integer]:=vertexPosition[n, $coordinateSymbols[3][[m]]]
vertexPosition[m : mechanismPattern, d_]:=vertexPosition[#,d]& /@ Range[MeshCellCount[m["mesh"],0]]
vertexPosition[m : mechanismPattern]:=vertexPosition[m, All[ embeddingDimension[m] ] ]


vertexDisplacement[n : {__Integer},d_]:=vertexDisplacement[#,d]&/@n
vertexDisplacement[n_Integer,d : {__String}|{__Integer}]:=vertexDisplacement[n,#]&/@d
vertexDisplacement[n_Integer,All[d_Integer]]:=vertexDisplacement[n,#]&/@$coordinateSymbols[d]
vertexDisplacement[n_Integer,m_Integer]:=vertexDisplacement[n,$coordinateSymbols[3][[m]]]
vertexDisplacement[m : mechanismPattern,d_]:=vertexDisplacement[#,d]&/@Range[MeshCellCount[m["mesh"],0]]
vertexDisplacement[m : mechanismPattern]:=vertexDisplacement[m,All[embeddingDimension[m]]]


to3D=PadRight[#,{Length[#],3}]&;
to2D=PadRight[#,{Length[#],2}]&;


toDim::dim="Number of dimensions is not a positive integer.";

toDim[n_Integer]:=PadRight[#,{Length[#],n}]& /; n>0
toDim[n_]:="nothing"/;Message[toDim::dim]


Options[randomDisplacements]={
	"distribution"->NormalDistribution[0,1/10],
	WorkingPrecision->MachinePrecision,
	"rules"->{}
};


randomDisplacements[coords_?vertexCoordinatesQ, OptionsPattern[] ]:=With[{dim=Dimensions[coords]},
Module[{res=randomDisplacementsInternal[dim[[1]], dim[[2]], OptionValue["distribution"], OptionValue["WorkingPrecision"], Flatten @ {OptionValue["rules"]}]},
	coords + res /; Head[res] =!= randomDisplacementsInternal
]]

randomDisplacements[m : mechanismPattern, OptionsPattern[] ]:=
Module[{res=randomDisplacementsInternal[MeshCellCount[m,0], embeddingDimension[m], OptionValue["distribution"], OptionValue["WorkingPrecision"], Flatten @ {OptionValue["rules"]}]},
	m["positions"] + res /; Head[res] =!= randomDisplacementsInternal
]

randomDisplacements[numberOfVertices_, All[ dim_ ], OptionsPattern[] ]:=
Module[{res=randomDisplacementsInternal[numberOfVertices, dim, OptionValue["distribution"], OptionValue["WorkingPrecision"], Flatten @ {OptionValue["rules"]}]},
	res /; Head[res] =!= randomDisplacementsInternal
]

randomDisplacements::arg="First argument is not a positive integer, mechanism, or list of vertex coordinates.";
randomDisplacements[_, OptionsPattern[]]:="nothing" /; Message[randomDisplacements::arg]


randomDisplacementsInternal[numberOfVertices_Integer?(#>0&), dim : 2|3, distribution_, precision_?(NumericQ[#]&&#>0&), {}]:=
	RandomVariate[
		distribution,
		{numberOfVertices,dim},
		WorkingPrecision->precision
	]

randomDisplacementsInternal[numberOfVertices_Integer?(#>0&), dim : 2|3, distribution_, precision_?(NumericQ[#]&&#>0&), rules : {Rule[vertexDisplacement[_,_],_]..}]:=
Module[
{
	displacements = Array[vertexDisplacement[#1,#2]&, {numberOfVertices,dim}] /. rules,
	arbitraryDisplacements
},
	arbitraryDisplacements = Cases[ Flatten[displacements], _vertexDisplacement];

	displacements /. Thread[arbitraryDisplacements->RandomVariate[
		distribution,
		Length[arbitraryDisplacements],
		WorkingPrecision->precision
	]]
]

randomDisplacements::dim="Dimension must be either 2 or 3.";
randomDisplacements::numvert="Not a valid number of vertices.";
randomDisplacements::precision="Working precision should be a real, positive number.";
randomDisplacements::rules="List of rules must be of the form {vertexDisplacements[_,_]->_, ..}";

randomDisplacementsInternal[numberOfVertices_Integer?(#>0&), dim : 2|3, distribution_, precision_?(NumericQ[#]&&#>0&), _]:="nothing" /; Message[randomDisplacements::rules]
randomDisplacementsInternal[numberOfVertices_Integer?(#>0&), dim : 2|3, _, _, {Rule[vertexDisplacement[_,_],_]..}]:="nothing" /; Message[randomDisplacements::precision]
randomDisplacementsInternal[numberOfVertices_Integer?(#>0&), _, _, _?(NumericQ[#]&&#>0&), {Rule[vertexDisplacement[_,_],_]..}]:="nothing" /; Message[randomDisplacements::dim]
randomDisplacementsInternal[_, 2 | 3, _, _?(NumericQ[#]&&#>0&), {Rule[vertexDisplacement[_,_],_]..}]:="nothing" /; Message[randomDisplacements::numvert]


vertexCoordinatesQ[positions_]:=And[ MatrixQ[positions], Last[Dimensions[positions]]<=3 ]
vertexCoordinatesQ[m : mechanismPattern, Automatic]:=True
vertexCoordinatesQ[m : mechanismPattern, positions : Except[Automatic]]:=And[ MatrixQ[positions], Dimensions[positions]=={MeshCellCount[m,0],embeddingDimension[m]} ]

numericMachinePrecisionCoordinatesQ[positions_]:=And[ MatrixQ[positions,MachineRealQ], Last[Dimensions[positions]]<=3 ]
numericMachinePrecisionCoordinatesQ[m : mechanismPattern, Automatic]:=MatrixQ[ m["positions"], MachineRealQ ]
numericMachinePrecisionCoordinatesQ[m : mechanismPattern, positions : Except[Automatic]]:=And[ MatrixQ[positions, MachineRealQ], Dimensions[positions]=={MeshCellCount[m,0],embeddingDimension[m]} ]

numericCoordinatesQ[positions_]:=And[ MatrixQ[positions,NumericQ], Last[Dimensions[positions]]<=3, realQ[positions] ]
numericCoordinatesQ[m : mechanismPattern, Automatic]:=MatrixQ[ m["positions"], MachineRealQ ]
numericCoordinatesQ[m : mechanismPattern, positions : Except[Automatic]]:=And[ MatrixQ[positions, NumericQ], Dimensions[positions]=={MeshCellCount[m,0],embeddingDimension[m]}, realQ[positions] ]


dataRules[head : vertexPosition|vertexDisplacement,positions_?vertexCoordinatesQ]:=Module[
{numberOfVertices,dim},

	{numberOfVertices,dim}=Dimensions[positions];
	Thread[Flatten[head[Range[numberOfVertices],All[dim]]]->Flatten[positions]]
]
dataRules[head : vertexPosition|vertexDisplacement,{positions__?vertexCoordinatesQ}]:=dataRules[head,#]&/@positions

dataRules::head="Invalid head.";
dataRules::coord="Second argument should be valid vertex coordinates.";
dataRules[_,positions_?vertexCoordinatesQ]:="nothing"/;Message[dataRules::head]
dataRules[vertexPosition|vertexDisplacement,positions_]:="nothing"/;Message[dataRules::coord]


Format[framework[positions_,mesh_MeshRegion,energyComponents_]]:=mesh
SetAttributes[framework,NHoldRest];

Options[framework]=Join[Options[MeshRegion],{"overlapPrecision"->10^(-12)}];


framework[positions_,mesh_MeshRegion,components_]["Methods"]:={"positions","mesh","components","unpack"}
framework[positions_,mesh_MeshRegion,components_]["positions"]:=positions
framework[positions_,mesh_MeshRegion,components_]["mesh"]:=mesh
framework[positions_,mesh_MeshRegion,components_]["components"]:=components


framework[positions_,mesh_MeshRegion,components_]["unpack",n_Integer:1]:=Module[{x},{
	positions,
	replaceUnpackedCells[unpackCells[meshCells[mesh]],x_->(x+n-1)],
	replaceUnpackedCells[unpackCells[components],x_->(x+n-1)]
}]


framework[positions_,mesh_MeshRegion,components_]["positions"->newPositions_,r___Rule]:=framework[newPositions,mesh,components][r]
framework[positions_,mesh_MeshRegion,components_]["mesh"->newmesh_,r___Rule]:=framework[positions,newmesh,components][r]
framework[positions_,mesh_MeshRegion,components_]["components"->newcomponents_,r___Rule]:=framework[positions,mesh,newcomponents][r]
framework[positions_,mesh_MeshRegion,components_][]:=framework[positions,mesh,components]


framework[coordinates_?numericCoordinatesQ,cellList_List,opt:OptionsPattern[]]:=
	framework[processElements[coordinates,Flatten[cellList]],opt]/;Length[cellList]>0

framework[coordinates_?numericCoordinatesQ,{},opt:OptionsPattern[]]:=
	framework[processElements[coordinates,Flatten[cellList]],opt]/;Length[coordinates]>0


framework[unpacked:{_?MatrixQ,_List,_List},opt:OptionsPattern[]]:=
Module[{coordinates,displayCells,mechanismCells},
	{coordinates,displayCells,mechanismCells}=cleanupCells[deleteDegenerateCells[removeOverlappingCoordinates[unpacked,OptionValue["overlapPrecision"]]]];

	(*this is where you would check if there were cells you could not support*)
				
	With[
	{packedCoords=Developer`ToPackedArray[PadRight[coordinates]]},
		framework[
			packedCoords,
			Quiet[MeshRegion[packedCoords,
				DeleteDuplicates[Join[repackDisplayCells[displayCells],Point/@Range[Length[packedCoords]]]],
				Join[{Method->{"CoplanarityTolerance"->100}},FilterRules[{opt},Options[MeshRegion]]]],MeshRegion::dupcell],
			repackMechanismCells[mechanismCells]
		]
	]
]


Format[origami[positions_,foldPattern_MeshRegion,energyComponents_]]:=foldPattern


SetAttributes[origami,NHoldRest];


origami[positions_,mesh_MeshRegion,components_]["Methods"]={"positions","mesh","components","unpack"};
origami[positions_,mesh_MeshRegion,components_]["positions"]:=positions
origami[positions_,mesh_MeshRegion,components_]["mesh"]:=mesh
origami[positions_,mesh_MeshRegion,components_]["components"]:=components


origami[positions_,mesh_MeshRegion,components_]["unpack",n_Integer:1]:=Module[{x},{
	If[RegionEmbeddingDimension[mesh]==2,to2D[positions],positions],
	replaceUnpackedCells[unpackCells[meshCells[mesh]],x_->(x+n-1)],
	replaceUnpackedCells[unpackCells[components],x_->(x+n-1)]
}]


origami[positions_,mesh_MeshRegion,components_]["positions"->newPositions_,r___Rule]:=origami[newPositions,mesh,components][r]
origami[positions_,mesh_MeshRegion,components_]["mesh"->newmesh_,r___Rule]:=origami[positions,newmesh,components][r]
origami[positions_,mesh_MeshRegion,components_]["components"->newcomponents_,r___Rule]:=origami[positions,mesh,newcomponents][r]
origami[positions_,mesh_MeshRegion,components_][]:=origami[positions,mesh,components]


Options[origami]=Join[Options[MeshRegion],{"overlapPrecision"->10^(-12)}];


origami::cells="Cells of type `1` are not valid for origami.";


(*BUG FIX: 
Sometimes MatrixQ[] does not acknowledge output of randomOrigami[] is a numerical list of coordinates.
Forcing it to machine precision first works.
*)
origami[coordinates_?numericCoordinatesQ,cellList_List,opt:OptionsPattern[]]:=
	origami[processElements[PadRight[coordinates],Flatten[cellList]],opt] /; Length[cellList]>0
	
origami[coordinates_?numericCoordinatesQ,{},opt:OptionsPattern[]]:=
	origami[processElements[PadRight[coordinates],Flatten[{Point[1]}]],opt] /; Length[coordinates]>0


origami[unpacked:{_?MatrixQ,_List,_List},opt:OptionsPattern[]]:=
Module[{coordinates,displayCells,mechanismCells},
	{coordinates,displayCells,mechanismCells}=cleanupCells[deleteDegenerateCells[removeOverlappingCoordinates[unpacked,OptionValue["overlapPrecision"]]]];

	(*this is where you would check if there were cells you could not support*)

	With[{
		packedCoords3D=Developer`ToPackedArray[to3D[coordinates]],
		packedCoordsDisplay=PadRight[coordinates]
	},
		origami[
			packedCoords3D,
			Quiet[MeshRegion[packedCoordsDisplay,
				DeleteDuplicates[Join[repackDisplayCells[displayCells],Point/@Range[Length[coordinates]]]],
				Join[{Method->{"CoplanarityTolerance"->100}}, FilterRules[{opt},Options[MeshRegion]] ]
			],MeshRegion::dupcell],
			repackMechanismCells[mechanismCells]
		]
	]
]


Options[singleVertex]=Join[
	Options[origami],
	{
	"angles"->None,
	"torsionalStiffnesses"->None
	}
];

vertexOptionQ[None,_]:=True
vertexOptionQ[x_?VectorQ,n_Integer]:=Length[x]==n
vertexOptionQ[_,_]:=False


angleData[stiffnesses_List,angles_List]:=MapThread[Property[fold[{1,#1}],{"torsionalStiffness"->#2,"angle"->#3}]&,{Range[2,Length[stiffnesses]+1],stiffnesses,angles}]
angleData[None,angles_List]:=MapThread[Property[fold[{1,#1}],{"torsionalStiffness"->0,"angle"->#2}]&,{Range[2,Length[angles]+1],angles}]
angleData[stiffnesses_List,None]:=MapThread[Property[fold[{1,#1}],{"torsionalStiffness"->#2,"angle"->0}]&,{Range[2,Length[stiffnesses]+1],stiffnesses}]
angleData[None,None]:={}


singleVertex[angles:{__?NumericQ}, opt : OptionsPattern[]]:=
	singleVertexCreator[
		angles,ConstantArray[1,Length[angles]],
		angleData[OptionValue["torsionalStiffnesses"],OptionValue["angles"]],
		FilterRules[{opt},Options[MeshRegion]]
	]/; (
		(*check the options to make sure they make sense*)
		Length[angles]>2&&vertexOptionQ[OptionValue["angles"],Length[angles]]&&vertexOptionQ[OptionValue["torsionalStiffnesses"],Length[angles]]
	)
singleVertex[angles : {__?NumericQ}, lengths : {__?NumericQ}, opt : OptionsPattern[]]:=
	singleVertexCreator[
		angles,lengths,
		angleData[OptionValue["torsionalStiffnesses"],OptionValue["angles"]],
		FilterRules[{opt},Options[MeshRegion]]
	]/; (
		(*check the options to make sure they make sense*)
		Length[angles]>2&&Length[angles]==Length[lengths]&&vertexOptionQ[OptionValue["angles"],Length[angles]]&&vertexOptionQ[OptionValue["torsionalStiffnesses"],Length[angles]]
	)

singleVertex::sectorangles="Sector angles are not a vector of numerical values.";
singleVertex::length="Lengths are not a vector of numerical values.";
singleVertex::lengthmatch="Number of sector angles does not agree with number of lengths.";
singleVertex::folds="Number of fold stiffnesses does not match number of sector angles.";
singleVertex::angles="Number of fold angles does not match number of sector angles.";

singleVertex[angles_List,OptionsPattern[]]:="nothing"/;Which[
	Not@VectorQ[angles,NumericQ],Message[singleVertex::sectorangles],
	Not@vertexOptionQ[OptionValue["torsionalStiffnesses"],Length[angles]],Message[singleVertex::folds],
	Not@vertexOptionQ[OptionValue["angles"],Length[angles]],Message[singleVertex::angles]
]
singleVertex[angles_List,lengths_List,OptionsPattern[]]:="nothing"/;Which[
	Not@VectorQ[angles,NumericQ],Message[singleVertex::sectorangles],
	Not@VectorQ[lengths,NumericQ],Message[singleVertex::length],
	Length[angles]!=Length[lengths],Message[singleVertex::lengthmatch],
	Not@vertexOptionQ[OptionValue["torsionalStiffnesses"],Length[angles]],Message[singleVertex::folds],
	Not@vertexOptionQ[OptionValue["angles"],Length[angles]],Message[singleVertex::angles]
]


Options[singleVertexCreator]=Options[MeshRegion];

(*for Gaussian curvature zero vertices*)
singleVertexCreator[angles_,lengths_,extraCells_,opt:OptionsPattern[]]:=
Module[{tmp},With[
{
	foldDirections=Accumulate[angles],
	vertices=Range[2,Length[angles]+1]
},
	origami[
		(*construct vertex locations*)
		Join[{{0,0}},MapThread[#2 {Cos[#1],Sin[#1]}&,{foldDirections,lengths}]],
		Join[
			(*should folds be just edges or torsional springs?*)
			extraCells,
			(*there may be some redundancy here with the extra cells*)
			rigidBar[{1,#}]&/@vertices,
			(*rigid bars around boundary *)
			rigidBar/@(tmp=Partition[vertices,2,1,1]),
			(* faces are just polygons *)
			Polygon[Join[{1},#]]&/@tmp
		],
		opt
	]
]]/;PossibleZeroQ[Total[angles]-2 Pi]


singleVertex::notflat="Not able to handle non-flat vertices (yet).";
singleVertexCreator[__]:="nothing"/;Message[singleVertex::notflat]


Options[miuraOri]=Join[Options[origami],
{
	"Size"->{1/2,1/2}, (* Unit cell square size *)
	"Triangulated"->False,
	"primitive"->False
}];


miuraOriFaces[False,False]:={
		Polygon[{4,5,2,1}],Polygon[{6,4,1,3}],
		Polygon[{9,7,4,6}],Polygon[{7,8,5,4}],
		Polygon[{12,10,7,9}],Polygon[{10,11,8,7}],
		
		Line[{4,5}],Line[{5,2}],Line[{2,1}],Line[{1,4}],
		Line[{6,4}],Line[{1,3}],Line[{3,6}],
		Line[{6,9}],Line[{9,12}],Line[{12,10}],Line[{10,11}],
		Line[{11,8}],Line[{8,5}],
		Line[{7,4}],Line[{7,9}],Line[{7,10}],Line[{7,8}]
}

miuraOriFaces[True,False]:={
		Polygon[{4,5,2}],Polygon[{4,2,1}],Polygon[{6,4,1}],Polygon[{6,1,3}],
		Polygon[{9,7,6}],Polygon[{7,4,6}],Polygon[{7,8,4}],Polygon[{8,5,4}],
		Polygon[{12,10,7}],Polygon[{12,7,9}],Polygon[{10,11,8}],Polygon[{10,8,7}],
		
		Line[{4,5}],Line[{5,2}],Line[{2,1}],Line[{1,4}],
		Line[{6,4}],Line[{1,3}],Line[{3,6}],
		Line[{6,9}],Line[{9,12}],Line[{12,10}],Line[{10,11}],
		Line[{11,8}],Line[{8,5}],
		Line[{7,4}],Line[{7,9}],Line[{7,10}],Line[{7,8}],
		
		Property[Line[{6,1}],{MeshCellStyle->GrayLevel[0.65]}],
		Property[Line[{4,2}],{MeshCellStyle->GrayLevel[0.65]}],
		Property[Line[{4,8}],{MeshCellStyle->GrayLevel[0.65]}],
		Property[Line[{6,7}],{MeshCellStyle->GrayLevel[0.65]}],
		Property[Line[{12,7}],{MeshCellStyle->GrayLevel[0.65]}],
		Property[Line[{10,8}],{MeshCellStyle->GrayLevel[0.65]}]
}

miuraOriFaces[False,True]:={
		Polygon[{4,5,2,1}],Polygon[{6,4,1,3}],
		Polygon[{9,7,4,6}],Polygon[{7,8,5,4}],
		
		Line[{4,5}],Line[{5,2}],Line[{2,1}],Line[{1,4}],
		Line[{6,4}],Line[{1,3}],Line[{3,6}],
		Line[{6,9}],Line[{9,7}],Line[{7,8}],Line[{8,5}],
		Line[{7,4}]
}

miuraOriFaces[True,True]:={
		Polygon[{4,5,2}],Polygon[{4,2,1}],Polygon[{6,4,1}],Polygon[{6,1,3}],
		Polygon[{9,7,6}],Polygon[{7,4,6}],Polygon[{7,8,4}],Polygon[{8,5,4}],
		
		Line[{4,5}],Line[{5,2}],Line[{2,1}],Line[{1,4}],
		Line[{6,4}],Line[{1,3}],Line[{3,6}],
		Line[{6,9}],Line[{9,7}],Line[{7,8}],Line[{8,5}],
		Line[{7,4}],
		
		Property[Line[{6,1}],{MeshCellStyle->GrayLevel[0.65]}],
		Property[Line[{4,2}],{MeshCellStyle->GrayLevel[0.65]}],
		Property[Line[{4,8}],{MeshCellStyle->GrayLevel[0.65]}],
		Property[Line[{6,7}],{MeshCellStyle->GrayLevel[0.65]}]

}


miuraOri["Properties"]:={"HorizontalShift","AcuteAngle"}


miuraOri["HorizontalShift"[shift_],opt:OptionsPattern[]]:=With[
{
	sizex=OptionValue["Size"][[1]],sizey=OptionValue["Size"][[2]]
},
origami[
	Take[{
		{0,2 sizey},{sizex,2 sizey},{-sizex,2 sizey},
		{shift,sizey},{sizex+shift,sizey},{-sizex+shift,sizey},
		{0,0},{sizex,0},{-sizex,0},
		{shift,-sizey},{shift+sizex,-sizey},{shift-sizex,-sizey}
		},
		If[OptionValue["primitive"],9,12]
	],
	Flatten@{
		Point[#]&/@Range[If[OptionValue["primitive"],9,12]],
		miuraOriFaces[OptionValue["Triangulated"],OptionValue["primitive"]]/.Line->rigidBar
	},
	FilterRules[{opt},Options[origami]]
]]


miuraOri["AcuteAngle"[angle_],opt:OptionsPattern[]]:=
	miuraOri["HorizontalShift"[Cot[angle] OptionValue["Size"][[2]]],opt]


miuraOri[angle_,opt:OptionsPattern[]]:=miuraOri["AcuteAngle"[angle],opt]


Options[yoshimuraOrigami]=Options[origami];


yoshimuraOrigami[{numTriangles_Integer,numHeight_Integer,twist_Integer:0},opt:OptionsPattern[]]:=yoshimuraOrigami[{numTriangles,numHeight,twist},1,1,opt]
yoshimuraOrigami[{numTriangles_Integer,numHeight_Integer,twist_Integer:0},radius_?NumericQ,heightScale_?NumericQ,opt:OptionsPattern[]]:=Module[{i},
With[
{
height=heightScale Sqrt[2 (Cos[Pi/numTriangles]-Cos[2 Pi/numTriangles])]
},
	origami[
		radius Join@@Table[
			{
			Cos[2 Pi #/numTriangles+((-1)^(i-1)) Pi/numTriangles/2],
			Sin[2 Pi #/numTriangles+((-1)^(i-1)) Pi/numTriangles/2],
			(i-1) height
			}&/@Range[numTriangles],
			{i,1,numHeight+1}],
		Table[{
			face[
				{
				#+i numTriangles,
				Mod[#+i numTriangles+1,numTriangles,i numTriangles+1],
				Mod[#+(1+(-1)^i)/2+(i+1) numTriangles+twist,numTriangles,(i+1) numTriangles+1]
				}
			]&/@Range[numTriangles],
			face[
				{
				#+i numTriangles,
				Mod[#+(i+1) numTriangles+(1+(-1)^i)/2+twist,numTriangles,(i+1)numTriangles+1],
				Mod[#+(i+1) numTriangles+(1+(-1)^i)/2-1+twist,numTriangles,(i+1)numTriangles+1]
				}
			]&/@Range[numTriangles]
		},{i,0,numHeight-1}],
		opt
	]
]]/;numTriangles>=2&&numHeight>=1


Options[polygonalLinkage]=Options[framework];

polygonalLinkage[pts_?(MatrixQ[#,NumericQ]&),opt:OptionsPattern[]]:=framework[
	pts,
	rigidBar/@Partition[Range[Length[pts]],2,1,1],
	opt
]/;Last[Dimensions[pts]]==2


Options[KLChainUnitCell]=Join[
	Options[framework],
	{
	"barColor"->Blue,
	"springColor"->Black
	}
];

KLChainUnitCell[xSpacing_,r_,t_,opt:OptionsPattern[]]:=
	framework[
	{
	{0,0},{r Cos[t],r Sin[t]},{xSpacing,0},{xSpacing,0}+{r Cos[t],-r Sin[t]},{2 xSpacing,0},{2 xSpacing,0}+r {Cos[t],Sin[t]}
	},
	{
	joint[1],joint[3],
	Property[rigidBar[{1,2}],MeshCellStyle->OptionValue["barColor"]],
	Property[rigidBar[{3,4}],MeshCellStyle->OptionValue["barColor"]],
	Property[rigidBar[{2,4}],MeshCellStyle->OptionValue["springColor"]],
	Property[rigidBar[{4,6}],MeshCellStyle->OptionValue["springColor"]]
	},
	Evaluate[FilterRules[{opt},Options[framework]]]
	]


componentPattern[x_Blank]:=If[Length[x]==0,{x,_,_},{x[[1]],_,_}]
componentPattern[r_Alternatives]:=componentPattern/@r
componentPattern[h_[r_Alternatives]]:=componentPattern[h/@r]
componentPattern[h_[n_List]]:=With[{numbers=Range[Length[n]]},{h,Alternatives@@Map[RotateRight[n,#]&,numbers],_}]
componentPattern[h_[n : Except[_Alternatives|_List]]]:={h,n,_}


renumberVerticesUnpacked[{coordinates_?MatrixQ,mesh_List,components_List},reorderedVertices:{__Integer}]:=With[
{
	reorderingRules=Dispatch[Thread[reorderedVertices->Range[Length[reorderedVertices]]]]
},
	{
		coordinates[[reorderedVertices]],
		replaceUnpackedCells[mesh,reorderingRules],
		replaceUnpackedCells[components,reorderingRules]
	}
]/;Sort[reorderedVertices]==Range[Length[coordinates]]


deleteCellsUnpacked[{coordinates_?MatrixQ,mesh_List,components_List},deletedVertices:{__Integer}]:=
Module[
{
	remainingVertices=Complement[Range[Length[coordinates]],deletedVertices]
},
	{
		coordinates,
		Select[mesh,ContainsNone[Flatten[{#[[2]]}],deletedVertices]&],
		Select[components,ContainsNone[Flatten[{#[[2]]}],deletedVertices]&]
	}
]/;Max[deletedVertices]<=Length[coordinates]


deleteVerticesUnpacked[{coordinates_,mesh_,components_},deletedVertices_]:=
With[
{
	remainingVertices=Complement[Range[Length[coordinates]],deletedVertices]
},
	({#[[ 1,Range[Length[remainingVertices]] ]],#[[2]],#[[3]]}&)[
		renumberVerticesUnpacked[deleteCellsUnpacked[{coordinates,mesh,components},deletedVertices],Join[remainingVertices,deletedVertices]]
	]
]

deleteVerticesUnpacked[vertices_]:=(deleteVerticesUnpacked[#,vertices]&)


listCells[{coordinates_,displayCells_,componentCells_},pattern_]:=
With[
{patt=componentPattern[pattern]},
{Cases[displayCells,pattern],Cases[componentCells,patt]}
]


gatherCells[{coordinates_,displayCells_,componentCells_}]:=
	GatherBy[Join[displayCells,componentCells],Sort[Flatten[{#[[2]]}]]&]


mergeFunction[Line|Point|Polygon, added_, data_]:=Normal[ Merge[ Join[ data, FilterRules[Flatten[{added}],$meshRegionProperties] ], Last ] ]
mergeFunction[head_,added_,data_]:=Normal[Merge[ Join[ data, FilterRules[Flatten[{added}],Options[head]]], Last ] ]

applyToCells[{coordinates_,displayCells_,componentCells_},pattern_,do_]:=
Module[
{
x,
patt=componentPattern[pattern]
},With[
{
	replacementRule=(x:patt:>{ x[[1]], x[[2]], mergeFunction[ x[[1]], do, x[[3]] ] } )
},
	{coordinates,displayCells,componentCells}/.replacementRule
]]

applyToCells[pattern_,do_]:=(applyToCells[#,pattern,do]&)


removeCells[{coordinates_,displayCells_,componentCells_},pattern_]:=
With[{patt=componentPattern[pattern]},
	{coordinates,DeleteCases[displayCells,patt],DeleteCases[componentCells,patt]}
]
removeCells[pattern_]:=(removeCells[#,pattern]&)


removeData[{coordinates_,displayCells_,componentCells_},pattern_,data_]:=
Module[{x},With[{patt=componentPattern[pattern]},
With[{
rules=(x:patt:>{x[[1]],x[[2]],FilterRules[x[[3]],Except[data] ]}),
componentrules=(x:patt:>{x[[1]],x[[2]],mergeFunction[ x[[1]], Options[x[[1]]], FilterRules[x[[3]],Except[data] ] ]})
},
	{coordinates,displayCells/.rules,componentCells/.componentrules}
]]]

removeData[pattern_,data_]:=(removeData[#,pattern,data]&)


(* if here, the list of objects are not well-formed *)
listFaces::notv=="One or more vertices do not exist.";


listFaces[m:mechanismPattern]:=MeshCells[m["mesh"],2][[All,1]]

(*--from one or more vertices--*)
listFaces[m : mechanismPattern, vertex_Integer] /; MeshCellCount[m,0]>=vertex:=
With[{faces=MeshCells[m["mesh"],2][[All,1]]},
	orderFaces[rotateTo[#,vertex]& /@ Select[ faces, MemberQ[#,vertex]& ], vertex]
]

listFaces[m : mechanismPattern, vertices : {__Integer}]:= connectivity[m,"vertices"->"ordered faces"][[vertices]] /; Max[vertices]<=MeshCellCount[m,0]
listFaces[m : mechanismPattern, _Integer|{__Integer}]:="nothing" /; Message[listFaces::notv]

(*--from edges--*)
listFaces[mr : mechanismPattern, pairList_?(MatrixQ[#,IntegerQ]&)] /; Dimensions[pairList][[2]]==2:=
With[{faces=MeshCellIndex[mr["mesh"],Line/@pairList]},
	connectivity[mr["mesh"],"edges"->"ordered faces"][[ faces[[All,2]] ]]/;faces=!=$Failed
]

listFaces::notedge="One or more specified edges do not exist.";
listFaces[mr : mechanismPattern, _?MatrixQ]:="nothing"/;Message[listFaces::notedge]

listFaces::badlist="The input is not a list of vertices or list of edges.";
listFaces[mr : mechanismPattern, Except[_?MatrixQ]]:="nothing" /; Message[listFaces::badlist]


listEdges[m : mechanismPattern]:=MeshCells[m["mesh"],1][[All,1]]

(*from vertex*)
listEdges[mr : mechanismPattern, v_Integer]:=With[{edges=MeshCells[mr["mesh"],1][[All,1]]},Cases[Join[edges,Reverse/@edges],{v,_}]]

listEdges[mr : mechanismPattern,{v__Integer}]:=With[{edges=MeshCells[mr["mesh"],1][[All,1]]},
	SortBy[GatherBy[Join[edges,Reverse/@edges],First],First@First@#&][[{v}]]
]
listEdges[v:{__Integer}]:=Partition[v,2,1,{1,1}]
(*from faces*)
listEdges[faces:{_?(VectorQ[#,IntegerQ]&)}]:=Partition[#,2,1,{1,1}]&/@faces


(* if here, the list of objects are not well-formed *)
listEdges::badlist="The heads of list are not all the same.";
listEdges[mr:_MeshRegion|_compiledMeshRegion,x_List]:="nothing" /; Message[listEdges::badlist]
listEdges[mr:_MeshRegion|_compiledMeshRegion,x_]:={}


listVertices[mr : mechanismPattern]:=MeshCells[mr["mesh"],0][[All,1]]
listVertices[mr : mechanismPattern, vertex_Integer|Point[vertex_Integer]] /; 0<vertex<=MeshCellCount[mr,0]:=Last/@listFaces[mr,vertex]

listVertices::bounds="Vertex is not in the provided mechanism.";
listVertices[mr : mechanismPattern, _Integer|Point[_Integer]]:="nothing"/;Message[listVertices::bounds]


interiorEdges[m : mechanismPattern]:=interiorEdges[m["mesh"]]
interiorVertices[m : mechanismPattern]:=interiorVertices[m["mesh"]]
boundaryEdges[m : mechanismPattern]:=boundaryEdges[m["mesh"]]
boundaryVertices[m : mechanismPattern]:=boundaryVertices[m["mesh"]]
boundaryFaces[m : mechanismPattern]:=boundaryFaces[m["mesh"]]


connectivity[m : mechanismPattern, Rule[s1_String,s2_String] ]:=connectivity[m["mesh"],s1->s2]


MeshCellCount[m_framework,r___]^:=MeshCellCount[m["mesh"],r]
MeshCellCount[m_origami,r___]^:=MeshCellCount[m["mesh"],r]


MeshCoordinates[m_framework]^:=MeshCoordinates[m["mesh"]]
MeshCoordinates[m_origami]^:=MeshCoordinates[m["mesh"]]


Rationalize[m_framework,dx___]^:=m["positions"->Rationalize[m["positions"],dx]]
Rationalize[m_origami,dx___]^:=m["positions"->Rationalize[m["positions"],dx]]


Precision[m_framework]^:=Precision[m["positions"]]
Precision[m_origami]^:=Precision[m["positions"]]


Map[f_, m_framework]^:=With[
{newPositions=f /@ m["positions"]},
	m[ "positions"->newPositions, "mesh"-> deformMesh[m["mesh"],newPositions] ]
]


Map[f_, m_origami]^:=With[
{newPositions=f /@ m["positions"]},
	m[ "positions" -> newPositions, "mesh" -> deformMesh[ m["mesh"], If[ displayDimension[m]==2, to2D[newPositions], newPositions ] ] ]
]


deleteVertices[m:mechanismPattern,{}]:=m
deleteVertices[m:mechanismPattern,verticesToDelete:{__Integer}]:=With[
{
	deletableVertices=DeleteDuplicates[verticesToDelete], (*not sure if this is necessary*)
	unpackedMechanism=m["unpack"]
},
	Head[m][deleteVerticesUnpacked[unpackedMechanism,deletableVertices]]
] /; Max[verticesToDelete]<=MeshCellCount[m,0]

deleteVertices::range="One or more vertices are out of range.";
deleteVertices::nov="Second argument should be a list of vertex indices to delete.";
deleteVertices[m:mechanismPattern,{__Integer}]:="nothing"/;Message[deleteVertices::range]
deleteVertices[m:mechanismPattern,_]:="nothing"/;Message[deleteVertices::nov]


deleteDanglingVertices[m_origami]:=deleteDanglingVertices[m,"faces"]
deleteDanglingVertices[m_framework]:=deleteDanglingVertices[m,"edges"]
deleteDanglingVertices[m:mechanismPattern,type:"faces"|"edges"]:=deleteDanglingVertices[m,type]

deleteDanglingVertices[m:mechanismPattern,"faces"]:=With[
{vertexSelector=Transpose[{Range[MeshCellCount[m,0]],Length/@connectivity[m["mesh"],"vertices"->"faces"]}]},
	deleteVertices[m,Select[vertexSelector,#[[2]]<1&][[All,1]]]
]

deleteDanglingVertices[m:mechanismPattern,"edges"]:=With[
{vertexSelector=Complement[Range[MeshCellCount[m,0]],connectivity[m["mesh"],"vertices"->"edges"][[All,1,1]]]},
	deleteVertices[m,vertexSelector]
]

deleteDanglingVertices::typ="Second argument should be either \"faces\" or \"edges\" to whether dangling vertices are indicated by a lack of faces or lack of edges.";
deleteDanglingVertices[m:mechanismPattern,_String]:="nothing"/;Message[deleteDanglingVertices::typ]


deleteCells[m : mechanismPattern, cellPattern_]:=Head[m][removeCells[m["unpack"],cellPattern]]
deleteCells[cellPattern_][m : mechanismPattern]:=Head[m][removeCells[m["unpack"],cellPattern]]


deleteData[m : mechanismPattern, cellPattern_]:=Head[m][removeData[m["unpack"],cellPattern]]
deleteData[cellPattern_][m : mechanismPattern]:=Head[m][removeData[m["unpack"],cellPattern]]


addCells[m : mechanismPattern, newCells_]:=
With[
{
newMechanism=Head[m][mechanismPositions[m],Flatten[{newCells}]]["unpack"],
unpackedMech=m["unpack"]
},
	Head[m][{newMechanism[[1]],Join[unpackedMech[[2]],newMechanism[[2]]],Join[unpackedMech[[3]],newMechanism[[3]]]}]
]


mechanismComponents[m : mechanismPattern]:=mechanismComponents[m,_]
mechanismComponents[m : mechanismPattern, pattern_]:=repackMechanismCells[Cases[unpackCells[m["components"]],componentPattern[pattern]]]

mechanismComponents[m : mechanismPattern, Rule[cellPattern_,data:{__Rule}|_Rule]]:=Head[m][applyToCells[m["unpack"],cellPattern,data]]
mechanismComponents[m : mechanismPattern, r:__Rule]:=Head[m][Fold[applyToCells[#1,#2[[1]],#2[[2]]]&,m["unpack"],{r}]]


modifyMechanism["Methods"]={MeshCellLabel,MeshCellStyle,"add","addComponent","style","label","shape"};


modifyMechanism::unknown="Unknown method `1`.";


modifyMechanism[m : mechanismPattern, MeshCellStyle->s_, r___]:=
	modifyMechanism[ m["mesh"->MeshRegion[m["mesh"], MeshCellStyle->s]], r]


modifyMechanism[m:mechanismPattern,MeshCellLabel->s_,r___]:=
	modifyMechanism[m["mesh"->MeshRegion[m["mesh"],MeshCellLabel->s]],r]


modifyMechanism[m:mechanismPattern,"addComponent"->addList_,r___]:=modifyMechanism[
	m["components"->repackMechanismCells[Join[unpackCells[m["components"]],unpackCells[Flatten[{addList}]]]]]
,r]


modifyMechanism[m:mechanismPattern,"add"->addList_,r___]:=Module[{
unpackedm=m["unpack"],
newmech=Head[m][mechanismPositions[m],Flatten[{addList}]]["unpack"]
},
	modifyMechanism[
		Head[m][{unpackedm[[1]],Join[unpackedm[[2]],newmech[[2]]],Join[unpackedm[[3]],newmech[[3]]]}]
,r]]


modifyMechanism::stylecell="Cell `1` should be either Point, Line, or Polygon to change style.";

toMeshStyle[style : {Line,_,_}|{Point,_,_}|{Polygon,_,_}]:=style
toMeshStyle[{rigidBar,indices_,styles_}]:={Line,indices,styles}
toMeshStyle[{joint,indices_,styles_}]:={Point,indices,styles}
toMeshStyle[style : {_,_,_}]:=(Message[modifyMechanism::stylecell,style[[1]]]; style)

styleListParse[Rule[x_ , style_]]:={toMeshStyle[componentPattern[x]], style}
styleListParse[_]:={"donotmatchthis",Null}


modifyMechanism[m : mechanismPattern, "style"->styleList_, r___]:=
modifyMechanism[
	Module[{type, indices, stylespec},With[
	{
		data = {type : #[[1,1]],indices : #[[1,2]], stylespec_} :> {
			type, 
			indices, 
			Join[
				FilterRules[stylespec , {MeshCellLabel,MeshCellShapeFunction}], (*filter out MeshCellStyle*)
				{MeshCellStyle->#[[2]]}
			]
			}& /@ styleListParse /@ styleList,
		unpackedMechanism=m["unpack"]
	},
	Head[m][ { unpackedMechanism[[1]], unpackedMechanism[[2]] /. data, unpackedMechanism[[3]] } ]
	]]
,r]


modifyMechanism[m : mechanismPattern, "label"->styleList_, r___]:=
modifyMechanism[
	Module[{x,y,z},With[{
		data={x:#[[1,1]],y:#[[1,2]],z_}:>{x,y,Join[FilterRules[z,{MeshCellStyle,MeshCellShapeFunction}],{MeshCellLabel->#[[2]]}]}& /@ styleListParse /@ styleList
	},
	Head[m][m["unpack"]/.data]
	]]
,r]


modifyMechanism[m:mechanismPattern,"shape"->styleList_,r___]:=modifyMechanism[
	Module[{x,y,z},With[{
		data={x:#[[1,1]],y:#[[1,2]],z_}:>{x,y,Join[FilterRules[z,{MeshCellStyle,MeshCellLabel}],{MeshCellShapeFunction->#[[2]]}]}&/@styleListParse/@styleList
	},
	Head[m][m["unpack"]/.data]
	]]
,r]


modifyMechanism[m:mechanismPattern,Rule[method_,data_],r___]:=(Message[modifyMechanism::unknown,method]; modifyMechanism[m,r])


modifyMechanism[m:mechanismPattern]:=m


displaceVertices::dim="Displacements are not the same dimension as the mechanism embedding dimension.";
displaceVertices::rules="Displacements should be in the form of vertex -> displacement.";

displacementRuleQ[Rule[_Integer,_?VectorQ]]:=True
displacementRuleQ[_]:=False


displacementRules[numVertices_, r: _?displacementRuleQ|{__?displacementRuleQ}]:=
With[{displacements=Range[numVertices]/.r},
	With[{dim=Max[Length/@displacements]},
		Replace[displacements,Rule[_Integer,ConstantArray[0,dim]],1]
]]
displacementRules[_,_]:="nothing"/;Message[displaceVertices::rules]


displaceVerticesInternal[m_,r_]:=
Module[{displacements=displacementRules[MeshCellCount[m,0],r]},
	m["positions"]+displacements /; MatrixQ[displacements]&&Dimensions[displacements][[2]]==embeddingDimension[m]
]
displaceVerticesInternal[_,r:_?displacementRuleQ|{__?displacementRuleQ}]:="nothing"/;Message[displaceVertices::dim]


displaceVertices[m : mechanismPattern, r_]:=
Module[{res=displaceVerticesInternal[m, r]},
	res /; Head[res]=!=displaceVerticesInternal
]


mechanismPositions[m_?mechanismQ]:=m["positions"]


mechanismPositions[Rule[m_framework,newPositions_?(MatrixQ[#,NumericQ]&)]]:=
	m[
		"positions"->newPositions,
		"mesh"->deformMesh[m["mesh"],newPositions]
	] /; Dimensions[newPositions]=={MeshCellCount[m,0],embeddingDimension[m]}

mechanismPositions::baddimmatch="Positions do not correspond to number of vertices or dimension of mechanism.";
mechanismPositions[Rule[m_framework,newPositions_?(MatrixQ[#,NumericQ]&)]]:="nothing"/;Message[mechanismPositions::baddimmatch]


mechanismPositions[Rule[m_origami,newPositions_?(MatrixQ[#,NumericQ]&)]]:=
	m[
		"positions"->to3D[newPositions],
		"mesh"->deformMesh[m["mesh"],newPositions]
	]/;Length[newPositions]==MeshCellCount[m,0]&&Not[displayDimension[m]==3&&Last[Dimensions[newPositions]]==2]

mechanismPositions::notmat="Positions are not numeric and of the same dimension.";				
mechanismPositions::badmatch="Positions do not correspond to number of vertices of origami.";
mechanismPositions::baddim="Origami structure is already manifestly in 3D. Positions must also be in 3D.";
mechanismPositions[Rule[m_origami,newPositions_?MatrixQ]]:="nothing"/;Which[
	Not[MatrixQ[newPositions,NumericQ]],
		Message[mechanismPositions::notmat]; False,
	Length[newPositions]!=MeshCellCount[m,0],
		Message[mechanismPositions::badmatch]; False,
	displayDimension[m]==3&&Last[Dimensions[newPositions]]==2,
		Message[mechanismPositions::baddim]; False,
	True,False
]


mechanismPositionsInternal[m_origami,r_]:=Module[
{displacements=displacementRules[MeshCellCount[m,0],r]},
	Which[
		Dimensions[displacements][[2]]==3,
			mechanismPositions[m->(m["positions"]+displacements)],
		Dimensions[displacements][[2]]==2 && displayDimension[m]==2,
			m[
				"positions"->(m["positions"]+to3D[displacements]),
				"mesh"->deformMesh[m["mesh"],MeshCoordinates[m["mesh"]]+displacements]
			],
		Dimensions[displacements][[2]]==2&&displayDimension[m]==3,
			Message[mechanismPositions::baddim]; $Failed,
		True,
			$Failed
	]
]
mechanismPositionsInternal[m_framework,r_]:=Module[{newPositions=Check[displaceVertices[m,r],$Failed]},
	If[newPositions===$Failed,$Failed,mechanismPositions[m->newPositions]]
]

mechanismPositions[Rule[m_?mechanismQ,r_]]:=Module[{res=mechanismPositionsInternal[m,r]}, res /; res=!=$Failed]


mechanismPositions::badpos="Second argument must be a list of positions or a list of displacement rules for vertices.";
mechanismPositions[Rule[m_?mechanismQ,_]]:="nothing"/;Message[mechanismPositions::badpos]


Options[joinMechanism]={"overlapPrecision"->10^(-12)};


joinMechanism[m__?mechanismQ, opt : OptionsPattern[]]:=Module[
{
startingIndices=Most@Accumulate[Join[{1},MeshCellCount[#,0]&/@{m}]],
unpackedMechanisms
},
	Head[{m}[[1]]]@Join[MapThread[Join,MapThread[#1["unpack",#2]&,{{m},startingIndices}]],opt]
]/;SameQ@@(Head/@{m})


joinMechanism::notsame="Cannot join different mechanism types together.";
joinMechanism[m__]:="nothing"/;Message[joinMechanism::notsame]


Options[tesselateMechanism]={"overlapPrecision"->10^(-6)};


tesselateMechanism[m:mechanismPattern,basis_?(VectorQ[#,NumericQ]&),n1_Integer,opt:OptionsPattern[]]:=
	tesselateMechanism[m,{basis,ConstantArray[0,Length[basis]]},{n1,1},opt]&&n1>0


tesselateMechanism[m:mechanismPattern,basis_?(MatrixQ[#,NumericQ]&),{n1_Integer,n2_Integer},opt:OptionsPattern[]]:=
Module[
{
	translatedMechanisms,
	newIndices=Flatten[Array[1+MeshCellCount[m,0] (#2-1+n2 (#1-1))&,{n1,n2}]],
	newCoordinates=Flatten[Array[ConstantArray[#1 basis[[1]]+#2 basis[[2]],MeshCellCount[m,0]]&,{n1,n2}],1]+ConstantArray[m["positions"],n1 n2]
},
	Head[m][Join[MapThread[Join,MapThread[#1["unpack",#2]&,{m["positions"->#]&/@newCoordinates,newIndices}]]],opt]

]/;Length[basis]==2&&n1>0&&n2>0


embeddingDimension[m : mechanismPattern]:=Last[Dimensions[m["positions"]]]
embeddingDimension[Rule[m : mechanismPattern, dim : 2|3]]:=m["positions"->PadRight[m["positions"],{Length[m["positions"]],dim}]]

embeddingDimension::dim="Dimension `1` must a positive integer that is either 2 or 3.";
embeddingDimension[Rule[m : mechanismPattern, dim_]]:="nothing" /; Message[embeddingDimension::dim,dim]


displayDimension[m : mechanismPattern]:=RegionEmbeddingDimension[m["mesh"]]
displayDimension[Rule[m : mechanismPattern, dim : 2|3]]:=m["mesh"->deformMesh[m["mesh"],PadRight[MeshCoordinates[m["mesh"]],{MeshCellCount[m,0],dim}]]]

displayDimension::dim="Dimension `1` must be a positive integer that is either 2 or 3.";
displayDimension[Rule[m : mechanismPattern, dim_]]:="nothing" /; Message[displayDimension::dim,dim]


incrementVertices[d_List]:=#+1&/@d
decrementVertices[d_List]:=#-1&/@d


saveToFOLD[m:mechanismPositions,filename_String]:=Export[{
	"file_spec"->1.1,
	"file_creator"->"Mathematica",
	"file_classes"->{"singleModel"},
	"frame_classes"->{"creasePattern"},
	"frame_attributes"->{
		Switch[displayDimension[m],2,"2D",3,"3D",_,Nothing],
		If[surfaceQ[m["mesh"]],"manifold",Nothing],
		If[orientedQ[m["mesh"]],"orientable","nonOrientable"]
	},
	"frame_unit"->"unit",
	"vertices_coords"->m["positions"],
	"edges_vertices"->decrementVertices/@listEdges[m],
	"faces_vertices"->decrementVertices/@listFaces[m]
},"JSON"]


Options[loadFromFOLD]=Join[{"face"->(face[#]&)},Options[origami]];


loadFromFOLD[filename_String,opt:OptionsPattern[]]:=Module[
{
	inputData=Import[filename,"JSON"],
	coords,edges,faces
},
	If[inputData===$Failed,
		$Failed,

		coords="vertices_coords"/.inputData;
		edges="edges_vertices"/.inputData;
		faces="faces_vertices"/.inputData;
		origami[coords,Join[OptionValue["face"]/@incrementVertices/@faces],FilterRules[{opt},Options[origami]]]
	]
]


displacementVector::edges="Second argument should be a properly formed list of edges {{v1,v2},...}";
displacementVector::bounds="Some vertices are out-of-bounds.";

displacementLength::edges="Second argument should be a properly formed list of edges {{v1,v2},...}";
displacementLength::bounds="Some vertices are out-of-bounds.";

displacementLengthSquared::edges="Second argument should be a properly formed list of edges {{v1,v2},...}";
displacementLengthSquared::bounds="Some vertices are out-of-bounds.";

turningAngle::triples="Second argument should be a properly formed list of triples {{v1,v2,v3},...}";
turningAngle::bounds="Some vertices are out-of-bounds.";

normalVector::faces="Second argument should be a properly formed list of faces {{v1,v2,v3,...},...}";
normalVector::bounds="Some vertices are out-of-bounds.";
normalVector::norm="Option \"normalization\" must be True or False.";

planarAngle::bounds="Some vertices are out-of-bounds.";
planarAngle::triples="Last argument is not a list of three points defining angles.";


faceVolume::dim="Dimension of positions is not 3.";
faceVolume::base="Dimension of base point is not 3.";
faceVolume::faces="Faces must be a list of triangles.";
faceVolume::bounds="Some vertices are out of bounds.";

faceArea::faces="Faces must be a list of triangles.";
faceArea::bounds="Some vertices are out of bounds.";


foldAngle::bounds="Some vertices are out of bounds.";
foldAngle::edges="Last argument should be a list of edges of the form {{v1,v2},...}.";
foldAngle::quadruples="Last argument should be lists of 4 vertices defining a fold.";
foldAngle::pos="Positions do not match those of MeshRegion.";
foldAngle::dim="MeshRegion positions should be in 3D.";
foldAngle::notfold="One of the folds does not exist.";


gaussianCurvature::vertices="Last argument is not a list of vertices.";
gaussianCurvature::bounds="Some vertices are out of bounds.";
gaussianCurvature::dim="Dimension must be 3.";
gaussianCurvature::arg="The arguments do not match.";
gaussianCurvature::triples="The last argument must be a list of planar angles surrounding each vertex.";


edgeListQ[e_]:=And[
	MatrixQ[e,IntegerQ],
	Last[Dimensions[e]]==2
	]


angleListQ[e_]:=And[
	MatrixQ[e,IntegerQ],
	Last[Dimensions[e]]==3
	]


ClearAll[faceListQ];
faceListQ[faces:{__?(VectorQ[#,IntegerQ]&)}]:=AllTrue[Length/@faces,#>2&]
faceListQ[_]:=False


triangulatedFaceListQ[faces_]:=And[
	MatrixQ[faces,IntegerQ],
	Last[Dimensions[faces]]==3
]


boundsQ[arg1_?MatrixQ,e_]:=Max[e]<=Length[arg1]
boundsQ[m_?mechanismQ,e_]:=Max[e]<=MeshCellCount[m["mesh"],0]
boundsQ[_,_]:=False


displacementVector[positions_?vertexCoordinatesQ,edgelist_]:=displacementVectorInternal[positions,edgelist] /; 
	Which[
		Not[boundsQ[positions,edgelist]],
			Message[displacementVector::bounds]; False,
		Not[edgeListQ[edgelist]],
			Message[displacementVector::edges]; False,
		True,True
	]
displacementVector[m : mechanismPattern, edgelist_]:=displacementVectorInternal[m["positions"],edgelist] /; Which[
	Not[boundsQ[m,edgelist]],
		Message[displacementVector::bounds]; False,
	Not[edgeListQ[edgelist]],
		Message[displacementVector::edges]; False,
	True,True
]
displacementVector[m : mechanismPattern, positions_, edgelist_]:=displacementVectorInternal[positions,edgelist]


displacementVectorInternal[positions_,edgeList_]:=
With[{flippedEdgeList=Transpose[edgeList]},
	positions[[flippedEdgeList[[2]]]]-positions[[flippedEdgeList[[1]]]]
]


displacementLength[positions_?vertexCoordinatesQ,edgelist_]:=displacementLengthInternal[positions,edgelist] /; Which[
	Not[edgeListQ[edgelist]],
		Message[displacementLength::edges]; False,
	Not[boundsQ[positions,edgelist]],
		Message[displacementLength::bounds]; False,
	True, True
]

displacementLength[m : mechanismPattern ,edgelist_]:=displacementLengthInternal[m["positions"],edgelist] /; Which[
	Not[edgeListQ[edgelist]],
		Message[displacementLength::edges]; False,
	Not[boundsQ[m,edgelist]],
		Message[displacementLength::bounds]; False,
	True, True
]
displacementLength[m : mechanismPattern , positions_, edgelist_]:=displacementLength[positions,edgelist]


displacementLengthInternal[positions_?(MatrixQ[#,MachineRealQ]&), edgelist_]:=displacementLengthCompiled[Length[positions[[1]]]][positions,ToPackedArray[edgelist]]
displacementLengthInternal[positions_,edgelist_]:=displacementLengthAnalytic[positions,ToPackedArray[edgelist]]


displacementLengthCompiled[d_Integer]:=displacementLengthCompiled[d]=
Compile[
{{pos,_Real,2},{edges,_Integer,2}},
	Module[{i,j},
		Table[
			With[{
			index1=Compile`GetElement[edges,i,1],
			index2=Compile`GetElement[edges,i,2]
			},
			Sqrt[Sum[(Compile`GetElement[pos,index1,j]-Compile`GetElement[pos,index2,j])^2,{j,1,d}]]
			],
		{i,1,Length[edges]}
		]
	],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]


displacementLengthAnalytic[positions_,edgeList_]:=
	expandExpression[Sqrt[(# . #&)/@displacementVectorInternal[positions,edgeList]]]


displacementLengthSquared[positions_?vertexCoordinatesQ,edgelist_]:=displacementLengthSquaredInternal[positions,edgelist] /; Which[
	Not[edgeListQ[edgelist]],
		Message[displacementLength::edges]; False,
	Not[boundsQ[positions,edgelist]],
		Message[displacementLength::bounds]; False,
	True, True
]

displacementLengthSquared[m : mechanismPattern ,edgelist_]:=displacementLengthSquaredInternal[m["positions"],edgelist] /; Which[
	Not[edgeListQ[edgelist]],
		Message[displacementLength::edges]; False,
	Not[boundsQ[m,edgelist]],
		Message[displacementLength::bounds]; False,
	True, True
]
displacementLengthSquared[m : mechanismPattern , positions_, edgelist_]:=displacementLengthSquared[positions,edgelist]


displacementLengthSquaredInternal[positions_?(MatrixQ[#,MachineRealQ]&), edgelist_]:=displacementLengthSquaredCompiled[Length[positions[[1]]]][positions,ToPackedArray[edgelist]]
displacementLengthSquaredInternal[positions_,edgelist_]:=displacementLengthSquaredAnalytic[positions,ToPackedArray[edgelist]]


displacementLengthSquaredCompiled[d_Integer]:=displacementLengthSquaredCompiled[d]=
Compile[
{{pos,_Real,2},{edges,_Integer,2}},
	Module[{i,j},
		Table[
			With[{
			index1=Compile`GetElement[edges,i,1],
			index2=Compile`GetElement[edges,i,2]
			},
			Sum[(Compile`GetElement[pos,index1,j]-Compile`GetElement[pos,index2,j])^2,{j,1,d}]
			],
		{i,1,Length[edges]}
		]
	],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]


displacementLengthSquaredAnalytic[positions_,edgeList_]:=
	expandExpression[Map[# . # &,displacementVectorInternal[positions,edgeList]]]


turningAngle[positions_?vertexCoordinatesQ,triplelist_]:=turningAngleInternal[positions,triplelist] /; Which[
	Not[angleListQ[triplelist]],
		Message[turningAngle::triples]; False,
	Not[boundsQ[positions,triplelist]],
		Message[turningAngle::bounds]; False,
	True,True
]
turningAngle[m : mechanismPattern,triplelist_]:=turningAngleInternal[m["positions"],triplelist] /; Which[
	Not[angleListQ[triplelist]],
		Message[turningAngle::triples]; False,
	Not[boundsQ[m,triplelist]],
		Message[turningAngle::bounds]; False,
	True,True
]
turningAngle[m : mechanismPattern, positions_,triplelist_]:=turningAngle[positions,triplelist]


turningAngleInternal[positions_?(MatrixQ[#,MachineRealQ]&), tripleList_]:=turningAngleCompiled[Length[positions[[1]]]][m["positions"],ToPackedArray[tripleList]]
turningAngleInternal[positions_,tripleList_]:=turningAngleAnalytic[Length[positions[[1]]],positions,ToPackedArray[tripleList]]


turningAngleCompiled[3]:=turningAngleCompiled[3]=
Compile[
{{pos,_Real,2},{triplets,_Integer,2}},
	Module[{i},
		With[{
			p1x=Compile`GetElement[pos,Compile`GetElement[triplets,i,2],1]-Compile`GetElement[pos,Compile`GetElement[triplets,i,1],1],
			p1y=Compile`GetElement[pos,Compile`GetElement[triplets,i,2],2]-Compile`GetElement[pos,Compile`GetElement[triplets,i,1],2],
			p1z=Compile`GetElement[pos,Compile`GetElement[triplets,i,2],3]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],3],
			p2x=Compile`GetElement[pos,Compile`GetElement[triplets,i,3],1]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],1],
			p2y=Compile`GetElement[pos,Compile`GetElement[triplets,i,3],2]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],2],
			p2z=Compile`GetElement[pos,Compile`GetElement[triplets,i,3],3]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],3]
		},
			ArcCos[(p1x p2x+p1y p2y+p1z p2z)/(Sqrt[p1x^2+p1y^2+p1z^2] Sqrt[p2x^2+p2y^2+p2z^2])]
		]
	],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]

turningAngleCompiled[2]:=turningAngleCompiled[2]=
Compile[
{{pos,_Real,2},{triplets,_Integer,2}},
	Module[{i},
		Table[With[{
			p1x=Compile`GetElement[pos,Compile`GetElement[triplets,i,2],1]-Compile`GetElement[pos,Compile`GetElement[triplets,i,1],1],
			p1y=Compile`GetElement[pos,Compile`GetElement[triplets,i,2],2]-Compile`GetElement[pos,Compile`GetElement[triplets,i,1],2],
			p2x=Compile`GetElement[pos,Compile`GetElement[triplets,i,3],1]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],1],
			p2y=Compile`GetElement[pos,Compile`GetElement[triplets,i,3],2]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],2]
		},
			ArcTan[p1x p2x + p1y p2y,p1x p2y - p2x p1y]
		],{i,1,Length[triplets]}]
	],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]


(*
this funny construction here works better during expansions because of the branch cuts of ArcCos[]

The problem arises in Series[ArcCos[1-xx^2],{xx,0,2}] which requires the choice of a branch. This last part
hasn't been solved but at least the answer comes out faster. The rest of the branch cut issues
are handled automatically in expandExpression[], which does what it can to make imaginary components zero.

There should be a better way to handle this but this seems to work in most cases.
*)
turningAngleAnalytic[3,data_,tripleList_]:=
With[
{
	cosvectorAngle3D=Function[{p1,p2},
		With[
			{x=p1[[1]],y=p1[[2]],z=p1[[3]],xx=p2[[1]],yy=p2[[2]],zz=p2[[3]]},
			(x xx+y yy+z zz)/(Sqrt[x^2+y^2+z^2] Sqrt[xx^2+yy^2+zz^2])
		]
	]
},
	(expandExpression@With[{pts=data[[#]]},ArcCos[expandExpression@cosvectorAngle3D[pts[[2]]-pts[[1]],pts[[3]]-pts[[2]]]]])&/@tripleList
]


turningAngleAnalytic[2,data_,tripleList_]:=
With[
{
	vectorAngle2D=Function[{p1,p2},
		With[
			{x=p1[[1]],y=p1[[2]],xx=p2[[1]],yy=p2[[2]]},
			ArcTan[x xx + y yy,x yy - xx y]	
		]
	]
},
	(expandExpression@With[{pts=data[[#]]},vectorAngle2D[pts[[2]]-pts[[1]],pts[[3]]-pts[[2]]]])&/@tripleList
]


Options[normalVector]={"normalize"->True};

normalVector[pos_?vertexCoordinatesQ, faces_,OptionsPattern[]]:=normalVectorInternal[pos,faces,OptionValue["normalize"]] /; Which[
	Not[BooleanQ[OptionValue["normalize"]]],
		Message[normalVector::norm]; False,
	Not[faceListQ[faces]],
		Message[normalVector::faces]; False,
	Not[boundsQ[pos,faces]],
		Message[normalVector::bounds]; False,
	True, True
]
normalVector[m : mechanismPattern, faces_,OptionsPattern[]]:=normalVectorInternal[m["positions"],faces,OptionValue["normalize"]] /; Which[
	Not[BooleanQ[OptionValue["normalize"]]],
		Message[normalVector::norm]; False,
	Not[faceListQ[faces]],
		Message[normalVector::faces]; False,
	Not[boundsQ[m,faces]],
		Message[normalVector::bounds]; False,
	True, True
]
normalVector[m : mechanismPattern, pos_?vertexCoordinatesQ,faces_,opt : OptionsPattern[]]:=normalVector[pos,faces,opt]


normalVectorInternal[pos_?(MatrixQ[#,MachineRealQ]&),faces_,normalize_ : True]:=normalVectorCompiled[normalize,Length[pos[[1]]]][pos,ToPackedArray[faces]]
normalVectorInternal[pos_,faces_,normalize_ : True]:=normalVectorAnalytic[normalize,Length[pos[[1]]],pos,faces]


normalVectorCompiled[True,3]:=normalVectorCompiled[True,3]=
Compile[
{{pos,_Real,2},{faces,_Integer,2}},
	Module[{i},
		Table[
			With[
			{
				x=Compile`GetElement[pos,Compile`GetElement[faces,i,3],1]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],1],
				y=Compile`GetElement[pos,Compile`GetElement[faces,i,3],2]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],2],
				z=Compile`GetElement[pos,Compile`GetElement[faces,i,3],3]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],3],
				xx=Compile`GetElement[pos,Compile`GetElement[faces,i,1],1]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],1],
				yy=Compile`GetElement[pos,Compile`GetElement[faces,i,1],2]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],2],
				zz=Compile`GetElement[pos,Compile`GetElement[faces,i,1],3]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],3]
			},
			{
				(-yy z+y zz)/Sqrt[(xx y-x yy)^2+(xx z-x zz)^2+(yy z-y zz)^2],
				(xx z-x zz)/Sqrt[(xx y-x yy)^2+(xx z-x zz)^2+(yy z-y zz)^2],
				(-xx y+x yy)/Sqrt[(xx y-x yy)^2+(xx z-x zz)^2+(yy z-y zz)^2]
			}
			],
			{i,1,Length[faces]}
		]
	],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]
normalVectorCompiled[False,3]:=normalVectorCompiled[False,3]=
Compile[
{{pos,_Real,2},{faces,_Integer,2}},
	Module[{i},
		Table[
			With[
			{
				x=Compile`GetElement[pos,Compile`GetElement[faces,i,3],1]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],1],
				y=Compile`GetElement[pos,Compile`GetElement[faces,i,3],2]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],2],
				z=Compile`GetElement[pos,Compile`GetElement[faces,i,3],3]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],3],
				xx=Compile`GetElement[pos,Compile`GetElement[faces,i,1],1]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],1],
				yy=Compile`GetElement[pos,Compile`GetElement[faces,i,1],2]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],2],
				zz=Compile`GetElement[pos,Compile`GetElement[faces,i,1],3]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],3]
			},
			{
				(-yy z+y zz),
				(xx z-x zz),
				(-xx y+x yy)
			}
			],
			{i,1,Length[faces]}
		]
	],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]


normalVectorCompiled[True,2]:=normalVectorCompiled[True,2]=
Compile[
{{pos,_Real,2},{faces,_Integer,2}},
	Module[{i},
		Table[
			With[
			{
				x=Compile`GetElement[pos,Compile`GetElement[faces,i,3],1]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],1],
				y=Compile`GetElement[pos,Compile`GetElement[faces,i,3],2]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],2],
				xx=Compile`GetElement[pos,Compile`GetElement[faces,i,1],1]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],1],
				yy=Compile`GetElement[pos,Compile`GetElement[faces,i,1],2]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],2]
			},
				Sign[-xx y+x yy]
			],
			{i,1,Length[faces]}
		]
	],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]
normalVectorCompiled[False,2]:=normalVectorCompiled[False,2]=
Compile[
{{pos,_Real,2},{faces,_Integer,2}},
	Module[{i},
		Table[
			With[
			{
				x=Compile`GetElement[pos,Compile`GetElement[faces,i,3],1]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],1],
				y=Compile`GetElement[pos,Compile`GetElement[faces,i,3],2]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],2],
				xx=Compile`GetElement[pos,Compile`GetElement[faces,i,1],1]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],1],
				yy=Compile`GetElement[pos,Compile`GetElement[faces,i,1],2]-Compile`GetElement[pos,Compile`GetElement[faces,i,2],2]
			},
				-xx y+x yy
			],
			{i,1,Length[faces]}
		]
	],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]


normalVectorAnalytic[True (* normalized *),3, positions_, triples_]:=
With[
{
	data=positions,
	normalVector3D=Function[
		{p1,p2},
		With[
			{
			x=p1[[1]],y=p1[[2]],z=p1[[3]],xx=p2[[1]],yy=p2[[2]],zz=p2[[3]]
			},
			{
			(-yy z+y zz)/Sqrt[(xx y-x yy)^2+(xx z-x zz)^2+(yy z-y zz)^2],
			(xx z-x zz)/Sqrt[(xx y-x yy)^2+(xx z-x zz)^2+(yy z-y zz)^2],
			(-xx y+x yy)/Sqrt[(xx y-x yy)^2+(xx z-x zz)^2+(yy z-y zz)^2]
			}
		]
	]
},
	With[{p=data[[#]]},expandExpression@normalVector3D[p[[3]]-p[[2]],p[[1]]-p[[2]]]]&/@triples
] 

normalVectorAnalytic[False (* normalized *),3, positions_, triples_]:=
With[
{
	data=positions,
	unnormalVector3D=Function[
		{p1,p2},
		With[
			{
			x=p1[[1]],y=p1[[2]],z=p1[[3]],xx=p2[[1]],yy=p2[[2]],zz=p2[[3]]
			},
			{
			-yy z+y zz,
			xx z-x zz,
			-xx y+x yy
			}
		]
	]
},
	With[{p=data[[#]]},expandExpression@unnormalVector3D[p[[3]]-p[[2]],p[[1]]-p[[2]]]]&/@triples
] 


planarAngle[pos_?vertexCoordinatesQ,triples_]:=planarAngleInternal[pos,triples] /; Which[
	Not[angleListQ[triples]],
		Message[planarAngle::triples]; False,
	Not[boundsQ[pos,triples]],
		Message[planarAngle::bounds]; False,
	True, True
]
planarAngle[m : mechanismPattern,triples_]:=planarAngleInternal[m["positions"],triples] /; Which[
	Not[angleListQ[triples]],
		Message[planarAngle::triples]; False,
	Not[boundsQ[m,triples]],
		Message[planarAngle::bounds]; False,
	True, True
]
planarAngle[m : mechanismPattern,pos_?vertexCoordinatesQ,triples_]:=planarAngle[pos,triples]


planarAngleInternal[pos_?(MatrixQ[#,MachineRealQ]&),triples_]:=planarAngleCompiled[Length[pos[[1]]]][pos,triples]
planarAngleInternal[pos_,triples_]:=planarAngleAnalytic[Length[pos[[1]]],pos,triples]


planarAngleCompiled[3]:=planarAngleCompiled[3]=
Compile[
{{pos,_Real,2},{triplets,_Integer,2}},Module[{i},
	Table[
		With[{
		x=Compile`GetElement[pos,Compile`GetElement[triplets,i,1],1]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],1],
		y=Compile`GetElement[pos,Compile`GetElement[triplets,i,1],2]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],2],
		z=Compile`GetElement[pos,Compile`GetElement[triplets,i,1],3]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],3],
		xx=Compile`GetElement[pos,Compile`GetElement[triplets,i,3],1]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],1],
		yy=Compile`GetElement[pos,Compile`GetElement[triplets,i,3],2]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],2],
		zz=Compile`GetElement[pos,Compile`GetElement[triplets,i,3],3]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],3]
		},
		ArcTan[x xx+y yy+z zz,Sqrt[(xx y-x yy)^2+(xx z-x zz)^2+(yy z-y zz)^2]]
		],
	{i,1,Length[triplets]}
	]],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]
planarAngleCompiled[2]:=planarAngleCompiled[2]=Compile[
{{pos,_Real,2},{triplets,_Real,2}},Module[{i},
	Table[With[{
		x=Compile`GetElement[pos,Compile`GetElement[triplets,i,1],1]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],1],
		y=Compile`GetElement[pos,Compile`GetElement[triplets,i,1],2]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],2],
		xx=Compile`GetElement[pos,Compile`GetElement[triplets,i,3],1]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],1],
		yy=Compile`GetElement[pos,Compile`GetElement[triplets,i,3],2]-Compile`GetElement[pos,Compile`GetElement[triplets,i,2],2]
	},
			ArcTan[x xx+y yy,(xx y-x yy)^2]
	],{i,1,Length[triplets]}
	]
],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]


planarAngleAnalytic[3,positions_,tripleList_]:=
With[
{
	data=positions,
	angleFunc=Function[{p1,p2},
		With[
			{x=p1[[1]],y=p1[[2]],z=p1[[3]],xx=p2[[1]],yy=p2[[2]],zz=p2[[3]]},
			ArcTan[x xx+y yy+z zz,Sqrt[(xx y-x yy)^2+(xx z-x zz)^2+(yy z-y zz)^2]]
		]
	]
},
	With[{pts=data[[#]]},expandExpression@angleFunc[pts[[1]]-pts[[2]],pts[[3]]-pts[[2]]]]&/@tripleList
]


planarAngleAnalytic[2,positions_,tripleList_]:=
With[
{
	data=positions,
	angleFunc=Function[{p1,p2},
		With[
			{x=p1[[1]],y=p1[[2]],xx=p2[[1]],yy=p2[[2]]},
			ArcTan[x xx+y yy,(xx y-x yy)^2]
		]
	]
},
	With[{pts=data[[#]]},expandExpression@angleFunc[pts[[1]]-pts[[2]],pts[[3]]-pts[[2]]]]&/@tripleList
]


(*list all the folds in all orientations as quickly as possible*)
possibleFoldsQ[m : mechanismPattern, indices_]:=
Module[{folds, edges=listEdges[m]},
	folds=Flatten[Select[Thread[{Transpose[{edges, Reverse[edges,{2}]}],connectivity[m,"edges"->"faces"]}],Length[Last[#]]==2&][[All,1]],1];
	ContainsOnly[indices,folds]
]


foldAngle[m : mechanismPattern,positions_,edgelist_]:=foldAngleInternal[m,positions,edgelist] /; Which[
	Not[edgeListQ[edgelist]], Message[foldAngle::edges]; False,
	Not[boundsQ[positions,edgelist]], Message[foldAngle::bounds]; False,
	embeddingDimension[m]!=3, Message[foldAngle::dim]; False,
	Dimensions[positions] != {MeshCellCount[m,0],3}, Message[foldAngle::pos]; False,
	Not @ possibleFoldsQ[m, edgelist], Message[foldAngle::notfold]; False,
	True,True
]
foldAngle[m : mechanismPattern, edgelist_]:=foldAngleInternal[m,m["positions"],edgelist] /; Which[
	Not[edgeListQ[edgelist]], Message[foldAngle::edges]; False,
	Not[boundsQ[m,edgelist]], Message[foldAngle::bounds]; False,
	embeddingDimension[m]!=3, Message[foldAngle::dim]; False,
	Not @ possibleFoldsQ[m, edgelist],Message[foldAngle::notfold]; False,
	True,True
]


foldAngleInternal[m : mechanismPattern, positions_?(MatrixQ[#,MachineRealQ]&), edgelist_]:=foldAngleCompiled[][positions,listQuadruples[m["mesh"],edgelist]]
foldAngleInternal[m : mechanismPattern, positions_, edgelist_]:=foldAngleAnalytic[positions,listQuadruples[m["mesh"],edgelist]]


(*does no argument checking*)
listQuadruples[m_MeshRegion,edgelist_]:=
With[
{
faces=connectivity[m,"edges"->"ordered faces"][[ MeshCellIndex[m,Line/@edgelist][[All,2]] ]]
},
	ToPackedArray[If[Length[#]==2,{#[[2,1]],#[[2,2]],#[[1,2]],Last@#[[2]]},{#[[1,1]],#[[1,2]],0,0}]&/@faces]
]


foldAngleCompiled[]:=foldAngleCompiled[]=
Compile[
{{pos,_Real,2},{faces,_Integer,2}},
Table[
	If[Compile`GetElement[faces,i,3]==0,
	0,
	With[
		{
		p1x=Compile`GetElement[pos,Compile`GetElement[faces,i,1],1],
		p1y=Compile`GetElement[pos,Compile`GetElement[faces,i,1],2],
		p1z=Compile`GetElement[pos,Compile`GetElement[faces,i,1],3],
		p2x=Compile`GetElement[pos,Compile`GetElement[faces,i,2],1],
		p2y=Compile`GetElement[pos,Compile`GetElement[faces,i,2],2],
		p2z=Compile`GetElement[pos,Compile`GetElement[faces,i,2],3],
		p3x=Compile`GetElement[pos,Compile`GetElement[faces,i,3],1],
		p3y=Compile`GetElement[pos,Compile`GetElement[faces,i,3],2],
		p3z=Compile`GetElement[pos,Compile`GetElement[faces,i,3],3],
		p4x=Compile`GetElement[pos,Compile`GetElement[faces,i,4],1],
		p4y=Compile`GetElement[pos,Compile`GetElement[faces,i,4],2],
		p4z=Compile`GetElement[pos,Compile`GetElement[faces,i,4],3]
		},
		ArcTan[(p1y (p2x-p3x)+p2y p3x-p2x p3y+p1x (-p2y+p3y)) (-p2y p4x+p1y (-p2x+p4x)+p1x (p2y-p4y)+p2x p4y)+(p1z (p2x-p3x)+p2z p3x-p2x p3z+p1x (-p2z+p3z)) (-p2z p4x+p1z (-p2x+p4x)+p1x (p2z-p4z)+p2x p4z)+(p1z (p2y-p3y)+p2z p3y-p2y p3z+p1y (-p2z+p3z)) (-p2z p4y+p1z (-p2y+p4y)+p1y (p2z-p4z)+p2y p4z),Sqrt[(p1x-p2x)^2+(p1y-p2y)^2+(p1z-p2z)^2] (-p1x p2z p3y+p1x p2y p3z+p2z p3y p4x-p2y p3z p4x+p1x p2z p4y-p2z p3x p4y-p1x p3z p4y+p2x p3z p4y+p1z (p2x p3y-p3y p4x+p2y (-p3x+p4x)-p2x p4y+p3x p4y)+(-p1x p2y+p2y p3x+p1x p3y-p2x p3y) p4z+p1y (p2z p3x-p2x p3z-p2z p4x+p3z p4x+p2x p4z-p3x p4z))]
	]],
	{i,1,Length[faces]}
],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]


foldAngleAnalytic[positions_,quadrupleList_]:=
	With[
	{
	p1x=positions[[#[[1]],1]],p1y=positions[[#[[1]],2]],p1z=positions[[#[[1]],3]],
	p2x=positions[[#[[2]],1]],p2y=positions[[#[[2]],2]],p2z=positions[[#[[2]],3]],
	p3x=positions[[#[[3]],1]],p3y=positions[[#[[3]],2]],p3z=positions[[#[[3]],3]],
	p4x=positions[[#[[4]],1]],p4y=positions[[#[[4]],2]],p4z=positions[[#[[4]],3]]
	},
	expandExpression@ArcTan[(p1y (p2x-p3x)+p2y p3x-p2x p3y+p1x (-p2y+p3y)) (-p2y p4x+p1y (-p2x+p4x)+p1x (p2y-p4y)+p2x p4y)+(p1z (p2x-p3x)+p2z p3x-p2x p3z+p1x (-p2z+p3z)) (-p2z p4x+p1z (-p2x+p4x)+p1x (p2z-p4z)+p2x p4z)+(p1z (p2y-p3y)+p2z p3y-p2y p3z+p1y (-p2z+p3z)) (-p2z p4y+p1z (-p2y+p4y)+p1y (p2z-p4z)+p2y p4z),Sqrt[(p1x-p2x)^2+(p1y-p2y)^2+(p1z-p2z)^2] (-p1x p2z p3y+p1x p2y p3z+p2z p3y p4x-p2y p3z p4x+p1x p2z p4y-p2z p3x p4y-p1x p3z p4y+p2x p3z p4y+p1z (p2x p3y-p3y p4x+p2y (-p3x+p4x)-p2x p4y+p3x p4y)+(-p1x p2y+p2y p3x+p1x p3y-p2x p3y) p4z+p1y (p2z p3x-p2x p3z-p2z p4x+p3z p4x+p2x p4z-p3x p4z))]
	]&/@quadrupleList


gaussianCurvature[m : mechanismPattern, vertexlist_]:= gaussianCurvatureInternal[m,m["positions"],vertexlist] /; Which[
	Not[VectorQ[vertexlist,IntegerQ]], Message[gaussianCurvature::vertices]; False,
	Max[vertexlist]>MeshCellCount[m,0] || Min[vertexlist]<1, Message[gaussianCurvature::bounds]; False,
	embeddingDimension[m]<2, False,
	True, True
]

gaussianCurvature[m : mechanismPattern, pos_, vertexlist_]:=gaussianCurvatureInternal[m,pos,vertexlist] /; Which[
	Not[VectorQ[vertexlist,IntegerQ]], Message[gaussianCurvature::vertices]; False,
	Max[vertexlist]>MeshCellCount[m,0] || Min[vertexlist]<1, Message[gaussianCurvature::bounds]; False,
	Dimensions[pos]!={MeshCellCount[m,0],embeddingDimension[m]},Message[gaussianCurvature::dim]; False,
	embeddingDimension[m]<2, False,
	True, True
]


gaussianCurvatureInternal[m : mechanismPattern, pos_,vertexlist_]:=ConstantArray[0,Length[vertexlist]] /; embeddingDimension[m]==2
gaussianCurvatureInternal[m : mechanismPattern, pos_?(MatrixQ[#,MachineRealQ]&),vertexlist_]:=
		gaussianCurvatureCompiled[][pos,
			ToPackedArray[PadRight[connectivity[m["mesh"],"vertices"->"ordered faces"]][[vertexlist]][[All,All,1;;3]]]
	]
gaussianCurvatureInternal[m : mechanismPattern, pos_,vertexlist_]:=
	gaussianCurvatureAnalytic[
		pos,
		ToPackedArray[
			Map[RotateRight,connectivity[m["mesh"],"vertices"->"ordered faces"][[vertexlist]],{2}][[All,All,1;;3]]
		]
	]


(*gaussianCurvature[pos_?(MatrixQ[#,MachineRealQ]&),triples:{__?(MatrixQ[#,IntegerQ]&)}]:=(
	gaussianCurvatureCompiled[][pos,ToPackedArray[PadRight[triples]]]
)/;And[
	Max[triples]<=Length[pos], (*vertices are all in bounds*)
	AllTrue[triples,Last[Dimensions[#]]==3&],
	Last[Dimensions[pos]]==3
	]

gaussianCurvature[pos_?MatrixQ,triples:{__?(MatrixQ[#,IntegerQ]&)}]:=(
	(2 Pi-Total[planarAngle[pos,#]])&/@triples
)/;And[
	Max[triples]<=Length[pos],
	AllTrue[triples,Last[Dimensions[#]]==3&],
	Last[Dimensions[pos]]==3
	]

gaussianCurvature[pos_?MatrixQ,triples_]:="nothing"/;Which[
	Head[triples]=!=List,
		Message[gaussianCurvature::triples]; False,
	Not[AllTrue[triples,Last[Dimensions[#]]==3&]],
		Message[gaussianCurvature::triples]; False,	
	Max[triples]>Length[pos],
		Message[gaussianCurvature::bounds]; False,
	Last[Dimensions[pos]]!=3,
		Message[gaussianCurvature::dim]; False,
	True,
		Message[gaussianCurvature::arg]; False
]*)


(*gaussianCurvature[m_?mechanismQ,vertexList_?(VectorQ[#,IntegerQ]&)]:=gaussianCurvature[m,mechanismPositions[m],vertexList]*)


(*(* MeshRegion, machine precision calculation*)
gaussianCurvature[m_?mechanismQ,pos_?(MatrixQ[#,MachineRealQ]&),vertexList_?(VectorQ[#,IntegerQ]&)]:=
	gaussianCurvatureCompiled[][
		pos,
		ToPackedArray[
			PadRight[connectivity[m["mesh"],"vertices"->"ordered faces"]][[vertexList]][[All,All,1;;3]]
		]
	]/; And[
		Max[vertexList]<=MeshCellCount[m["mesh"],0],
		Last[Dimensions[pos]]\[Equal]3
		]*)


(*(*MeshRegion, analytic*)
gaussianCurvature[m_?mechanismQ,pos_?MatrixQ,vertexList_?(VectorQ[#,IntegerQ]&)]:=(
	gaussianCurvature[
		pos,
		ToPackedArray[
			Map[RotateRight,connectivity[m["mesh"],"vertices"->"ordered faces"][[vertexList]],{2}][[All,All,1;;3]]
		]
	]
)/; And[
	Max[vertexList]<=Length[pos],
	Last[Dimensions[pos]]\[Equal]3
	]*)


(*gaussianCurvature[m_?mechanismQ,pos_,vertices_]:="nothing"/;Which[
	Not[VectorQ[vertices,IntegerQ]],
		Message[gaussianCurvature::vertices]; False,	
	Max[vertices]>Length[pos],
		Message[gaussianCurvature::bounds]; False,
	Last[Dimensions[pos]]!=3,
		Message[gaussianCurvature::dim]; False,
	embeddingDimension[m]!=3,
		Message[gaussianCurvature::dim]; False,
	True,
		Message[gaussianCurvature::arg]; False
]

gaussianCurvature[m_?mechanismQ,vertices_]:="nothing"/;Which[
	Not[VectorQ[vertices,IntegerQ]],
		Message[gaussianCurvature::vertices]; False,	
	Max[vertices]>MeshCellCount[m["mesh"],0],
		Message[gaussianCurvature::bounds]; False,
	embeddingDimension[m]!=3,
		Message[gaussianCurvature::dim]; False,
	True,
		Message[gaussianCurvature::arg]; False
]*)


gaussianCurvatureCompiled[]:=gaussianCurvatureCompiled[]=
Compile[{{pos,_Real,2},{triplets,_Integer,3}},
	Module[{i,j},Table[2 Pi-Sum[
		If[Compile`GetElement[triplets,j,i,1]==0,
			0,
			With[{
			x=Compile`GetElement[pos,Compile`GetElement[triplets,j,i,3],1]-Compile`GetElement[pos,Compile`GetElement[triplets,j,i,1],1],
			y=Compile`GetElement[pos,Compile`GetElement[triplets,j,i,3],2]-Compile`GetElement[pos,Compile`GetElement[triplets,j,i,1],2],
			z=Compile`GetElement[pos,Compile`GetElement[triplets,j,i,3],3]-Compile`GetElement[pos,Compile`GetElement[triplets,j,i,1],3],
			xx=Compile`GetElement[pos,Compile`GetElement[triplets,j,i,2],1]-Compile`GetElement[pos,Compile`GetElement[triplets,j,i,1],1],
			yy=Compile`GetElement[pos,Compile`GetElement[triplets,j,i,2],2]-Compile`GetElement[pos,Compile`GetElement[triplets,j,i,1],2],
			zz=Compile`GetElement[pos,Compile`GetElement[triplets,j,i,2],3]-Compile`GetElement[pos,Compile`GetElement[triplets,j,i,1],3]
			},
			ArcTan[x xx+y yy+z zz,Sqrt[(xx y-x yy)^2+(xx z-x zz)^2+(yy z-y zz)^2]]
			]
		],
		{i,1,Length[Compile`GetElement[triplets,j]]}(* Sum *)
	],{j,1,Length[triplets]}] (* Table *)
	],
	RuntimeOptions->"Speed",
	CompilationTarget->$compilationTarget
]


gaussianCurvatureAnalytic[pos_,{triples__?(MatrixQ[#,IntegerQ]&)}]:=
	(expandExpression@(2 Pi-Total[planarAngle[pos,#]]))&/@{triples}


Options[alignMechanism]=Join[Options[FindGeometricTransform],{"vertices"->All}];

alignMechanism[m1_?mechanismQ,m2_?mechanismQ,opt:OptionsPattern[]]:=
	mechanismPositions[m2->#[[2]]]&[alignMechanism[m1["positions"],m2["positions"]]]

alignMechanism[p1_?(MatrixQ[#,NumericQ]&),m2_?mechanismQ,opt:OptionsPattern[]]:=
	{#[[1]],mechanismPositions[m2->#[[2]]]}&[alignMechanism[p1,m2["positions"],opt][[2]]]

alignMechanism[p1_?(MatrixQ[#,NumericQ]&),p2_?(MatrixQ[#,NumericQ]&),opt:OptionsPattern[]]:=
Module[{points1,points2,alignment,transform},
	{points1,points2}=If[OptionValue["vertices"]===All,
		{p1,p2},
		{p1[[Flatten@OptionValue["vertices"]]],p2[[Flatten@OptionValue["vertices"]]]}
	];
	{alignment,transform}=FindGeometricTransform[points1,points2,Join[FilterRules[{opt},Options[FindGeometricTransform]],{TransformationClass->"Rigid"}]];
	{alignment,transform[p2]}
]


congruentQ[tolerance:_?NumericQ:10^(-1)][pos1_?(MatrixQ[#,NumericQ]&),pos2_?(MatrixQ[#,NumericQ]&)]:=congruentQ[pos1,pos2,tolerance]

congruentQ[m1_?mechanismQ,m2_?mechanismQ,tolerance:_?NumericQ:10^(-1)]:=congruentQ[m1["positions"],m2["positions"],tolerance]
congruentQ[pos1_?(MatrixQ[#,NumericQ]&),pos2_?(MatrixQ[#,NumericQ]&),tolerance:_?NumericQ:10^(-1)]:=With[
{
(* a naive way to pick three equivalent points on each set of positions *)
points1=pos1,points2=pos2
},
	FindGeometricTransform[points1,points2,TransformationClass->"Rigid",Method->"Linear"][[1]]<tolerance
]


selectConstraints[m_,positions_,components_List]:=selectConstraints[m,positions,#]&/@Flatten[components]


selectConstraints[m_,positions_,rigidBar[indices_,data_]]:=
With[{constraints=componentData["stiffness",m,positions,rigidBar[indices,data]]},
	rigidBar[Pick[indices,constraints,Infinity],Pick[data,constraints,Infinity]]
]

selectConstraints[m_,positions_,fold[indices_,data_]]:=
With[{constraints=componentData["torsionalStiffness",m,positions,fold[indices,data]]},
	fold[Pick[indices,constraints,Infinity],Pick[data,constraints,Infinity]]
]

selectConstraints[m_,positions_,joint[indices_,data_]]:=
With[{constraints=componentData["stiffness",m,positions,joint[indices,data]]},
	joint[Pick[indices,constraints,Infinity],Pick[data,constraints,Infinity]]
]

selectConstraints[m_,positions_,other_]:={}


Options[linearMotions]=Options[NullSpace];
linearMotions[m_,rigidityMatrix_,opt:OptionsPattern[]]:=Module[
{dim=embeddingDimension[m],lin=NullSpace[rigidityMatrix,opt]},
	If[Length[lin]>0,
		Partition[Orthogonalize[lin],{1,dim}][[All,All,1]],
		{}
	]
]


analyticEnergyQ[Automatic,positions_]:=True
analyticEnergyQ[energyExpression_,positions_]:=With[
{number=N[energyExpression/.Dispatch[dataRules[vertexPosition,positions]]]},
	Im[Chop[number]]==0&&NumericQ[number]&&Chop[Im[number]]==0
]


pinnedJoints[m_,initialPositions_]:=
Module[
{
	constrainedVertices=selectConstraints[m,initialPositions,Cases[m["components"],_joint]],
	components,positions
},
	If[Length[constrainedVertices]>0,
		components=componentData["components",m,initialPositions,constrainedVertices[[1]]];
		positions=componentData["position",m,initialPositions,constrainedVertices[[1]]];
	
		Flatten @ MapThread[Thread[vertexPosition[#1,#2]->#3[[#4]]] &,{
			constrainedVertices[[1,1]],
			components,
			positions,
			components/.{"x"->1,"y"->2,"z"->3}
			}
		],
		
		{}
	]
]


dynamicVariables[m_, pinnedVertices_,initialPositions_]:=
Cases[
	Transpose[{Flatten @ vertexPosition[m],Flatten @ initialPositions}]/.pinnedVertices,
	{_vertexPosition,_}
]


evaluateEnergy[m : mechanismPattern, positions_?MatrixQ, energy: Except[_compiledMechanismEnergy]]:=
	energy /. Dispatch[dataRules[vertexPosition,positions]]
evaluateEnergy[m : mechanismPattern, positions_?VectorQ, energy: Except[_compiledMechanismEnergy]]:=
	energy /. Dispatch[Thread[Flatten[vertexPosition[m]]->positions]]
evaluateEnergy[m : mechanismPattern, positions_?MatrixQ, energy_?compiledMechanismEnergyQ]:=
	energy[[2]][Flatten[positions],energy["data"]]
evaluateEnergy[m : mechanismPattern, positions_?VectorQ, energy_?compiledMechanismEnergyQ]:=
	energy[[2]][positions,energy["data"]]


Options[constraintEquations]:={"output"->vertexDisplacement}


constraintEquations[m : mechanismPattern, positions_ : Automatic, order : 1|2|Infinity, OptionsPattern[]]:=
With[
{
actualPositions=If[ positions===Automatic, m["positions"], positions ],
output=OptionValue["output"]
},
	constraintEquationsInternal[m,actualPositions,order,m["components"],output] /; Which[
		Not[vertexCoordinatesQ[m,actualPositions]],
			Message[constraintEquations::pos]; False,
		Not[MatchQ[output,vertexPosition | vertexDisplacement]],
			Message[constraintEquations::output]; False,
		True, True
		]
]

constraintEquations::pos="Positions do not correspond to mechanism vertices.";
constraintEquations::output="Option \"output\" must be either vertexDisplacement or vertexPosition.";


(*legacy version in case we call it this way*)
constraintEquationsInternal[m_,actualPositions_,order_,components_]:=
	Flatten[componentConstraints[m,actualPositions,selectConstraints[m,actualPositions,#],order,vertexDisplacement]&/@components]


constraintEquationsInternal[m_,actualPositions_,order_,components_,output_]:=
	Flatten[componentConstraints[m,actualPositions,selectConstraints[m,actualPositions,#],order,output]&/@components]


componentConstraints[m_, positions_, rigidBar[indices_,data_], 1, vertexDisplacement]:=
	2 MapThread[#1 . #2&,{displacementVector[positions,indices],displacementVector[vertexDisplacement[m],indices]}]

componentConstraints[m_, positions_, rigidBar[indices_,data_], 1, vertexPosition]:=
	2 MapThread[#1 . #2&,{displacementVector[positions,indices],displacementVector[vertexPosition[m]-positions,indices]}]

componentConstraints[m_, positions_, rigidBar[indices_,data_], 2|Infinity, vertexDisplacement]:=
	displacementLengthSquared[positions+vertexDisplacement[m],indices]-componentData["length",m,positions,rigidBar[indices,data]]^2

componentConstraints[m_,positions_,rigidBar[indices_,data_],2|Infinity,vertexPosition]:=
	displacementLengthSquared[vertexPosition[m],indices]-componentData["length",m,positions,rigidBar[indices,data]]^2


componentConstraints[m_,positions_,fold[indices_,data_],order:1|2,vertexDisplacement]:=Module[{eps},
	foldAngle[m,positions+infinitesimal[eps,order] vertexDisplacement[m],indices]/.infinitesimal[eps,order]->1
]/;Length[indices]>0
componentConstraints[m_,positions_,fold[indices_,data_],Infinity,vertexDisplacement]:=
	foldAngle[m,positions+vertexDisplacement[m],indices]/;Length[indices]>0
	
componentConstraints[m_,positions_,fold[indices_,data_],order:1|2,vertexPosition]:=Module[{eps},
	foldAngle[m,positions+infinitesimal[eps,order] (vertexPosition[m]-positions),indices]/.infinitesimal[eps,order]->1
]/;Length[indices]>0
componentConstraints[m_,positions_,fold[indices_,data_],Infinity,vertexPosition]:=
	foldAngle[m,vertexPosition[m],indices]/;Length[indices]>0

componentConstraints[m_,positions_,fold[{},{}],_,_]:={}


componentConstraints[m_,positions_,joint[indices_,data_],1|2|Infinity,output_]:=
With[{
componentsToUse=Replace[
	componentData["components",m,positions,joint[indices,data]],
	All->All[embeddingDimension[m]],
	1]
},
	Flatten[MapThread[output[#1,#2]&,{indices,componentsToUse}]]
]


componentConstraints[m_,positions_,angleJoint[indices_,data_],order:1|2,vertexDisplacement]:=Module[{eps},
	turningAngle[positions+infinitesimal[eps,order] vertexDisplacement[m],indices]/.infinitesimal[eps,order]->1
]/;Length[indices]>0
componentConstraints[m_,positions_,angleJoint[indices_,data_],Infinity,vertexDisplacement]:=
	turningAngle[positions+vertexDisplacement[m],indices]/;Length[indices]>0

componentConstraints[m_,positions_,angleJoint[indices_,data_],order:1|2,vertexPosition]:=Module[{eps},
	turningAngle[positions+infinitesimal[eps,order] (vertexPosition[m]-positions),indices]/.infinitesimal[eps,order]->1
]/;Length[indices]>0
componentConstraints[m_,positions_,angleJoint[indices_,data_],Infinity,vertexPosition]:=
	turningAngle[vertexPosition[m],indices]/;Length[indices]>0

componentConstraints[m_,positions_,angleJoint[{},{}],_,_]:={}


componentConstraints[m_,positions_,_,_,_]:={}


Options[constraintMatrix]={"constraints"->None};


constraintMatrix[m : mechanismPattern, positions: Except[_Rule] : Automatic, OptionsPattern[]]:=
With[{
actualPositions=If[positions===Automatic,m["positions"],positions]
},
	constraintMatrixInternal[
		m,
		actualPositions,
		reduceConstraintToOrder[actualPositions,constraintVector[actualPositions,OptionValue["constraints"]],1],
		m["components"]
	] /; vertexCoordinatesQ[m,actualPositions]
]

constraintMatrix::vcoord="Vertex positions do not match mechanism.";
constraintMatrix[m : mechanismPattern, Except[_Rule|Automatic], OptionsPattern[]]:="nothing"/;Message[constraintMatrix::vcoord]


constraintMatrix::stressed="Mechanism is stressed. Constraint matrix may not be useful.";

constraintMatrixInternal[m_, positions_, linearConstraints_, componentList_]:=
With[
{constraintMatrices=CoefficientArrays[
	Flatten[Join[constraintEquationsInternal[m,positions,1,componentList,vertexDisplacement],linearConstraints]],
	Flatten[vertexDisplacement[m]]
	]
},
	If[constraintMatrices=={{}},
		{ConstantArray[0,MeshCellCount[m,0] embeddingDimension[m]]},

		If[numericCoordinatesQ[positions],
			If[PossibleZeroQ[constraintMatrices[[1]].constraintMatrices[[1]]],
				constraintMatrices[[2]],
				Message[constraintMatrix::stressed]; constraintMatrices[[2]]
			],

			constraintMatrices[[2]]
		]
	]
]


compatibilityMatrix[m : mechanismPattern, positions_ : Automatic]:=
With[{
actualPositions=If[positions===Automatic,m["positions"],positions],
indices=Cases[m["components"],_rigidBar][[1,1]]
},
	compatibilityMatrixInternal[m,actualPositions, indices] /; vertexCoordinatesQ[m,actualPositions]
]

compatibilityMatrix::nop="Specified positions do not match mechanism.";
compatibilityMatrix[m:mechanismPattern, _]:="nothing"/;Message[compatibilityMatrix::nop]


blowupEdge[2,positionDifference_][edgeIndex_,{c1_,c2_}]:=
With[{pos=2 positionDifference[[edgeIndex]]},
{
	{edgeIndex, 1+2 (c1-1)}->pos[[1]],
	{edgeIndex, 1+2 (c2-1)}->-pos[[1]],
	{edgeIndex, 2+2 (c1-1)}->pos[[2]],
	{edgeIndex, 2+2 (c2-1)}->-pos[[2]]
}]

blowupEdge[3,positionDifference_][edgeIndex_,{c1_,c2_}]:=
With[{pos=2 positionDifference[[edgeIndex]]},
{
	{edgeIndex, 1+3 (c1-1)}->pos[[1]],
	{edgeIndex, 1+3 (c2-1)}->-pos[[1]],
	{edgeIndex, 2+3 (c1-1)}->pos[[2]],
	{edgeIndex, 2+3 (c2-1)}->-pos[[2]],
	{edgeIndex, 3+3 (c1-1)}->pos[[3]],
	{edgeIndex, 3+3 (c2-1)}->-pos[[3]]
}]

compatibilityMatrixInternal[m_, positions_, indices_]:=
With[{
	edgeIndices = Range[Length[indices]], 
	d = embeddingDimension[m], 
	positionDifference = (#[[1]]-#[[2]]&) @ ((positions[[#]]&) /@ Transpose[indices])},
	SparseArray[ Flatten[ MapThread[ blowupEdge[d, positionDifference], {edgeIndices, indices}], 1 ] ]
]


Options[selfStresses]=Join[{"orthogonalize"->False},Options[NullSpace]];


selfStresses::orth="Option \"orthogonalize\" should be True or False.";
selfStresses::notnum="Positions are not valid for mechanism.";


selfStresses[m_?mechanismQ,opt:OptionsPattern[]]:=selfStressesInternal[m,m["positions"],OptionValue["orthogonalize"],FilterRules[{opt},Options[NullSpace]]]
selfStresses[m_?mechanismQ,Automatic,opt:OptionsPattern[]]:=selfStressesInternal[m,m["positions"],OptionValue["orthogonalize"],FilterRules[{opt},Options[NullSpace]]]
selfStresses[m_?mechanismQ,positions_?MatrixQ,opt:OptionsPattern[]]:=
	selfStressesInternal[m,positions,OptionValue["orthogonalize"],FilterRules[{opt},Options[NullSpace]]] /; Which[
		Not[numericCoordinatesQ[m,positions]],
			Message[selfStresses::notnum]; False,
		Not[BooleanQ[OptionValue["orthogonalize"]]],
			Message[selfStresses::orth]; False,
		True,True
	]


selfStressesInternal[m_,positions_,orthogonalize:True|False,nullspaceOptions_]:=
Module[{edges,cmat,ns,components},
	ns=NullSpace[
		Transpose[constraintMatrixInternal[m,positions,{},components=Cases[m["components"],_rigidBar]]],
		nullspaceOptions
	];

	components->#&/@ If[orthogonalize,Orthogonalize[ns],ns]
]


fixVertices["eq", m : mechanismPattern, v1_Integer|{v1_Integer}]:=
	vertexDisplacement[v1,All[embeddingDimension[m]]] /; (0<v1<=MeshCellCount[m,0])

fixVertices["eq", m : mechanismPattern, {v1_Integer,v2_Integer}]:=With[
{
	vec=displacementVector[m,listEdges[m,v2]]
},
	Flatten[{
		vertexDisplacement[v1,All[2]],
		Orthogonalize[RotationMatrix[Pi/2] . # &/@ vec][[1]] . vertexDisplacement[v2,All[2]]
	}]
] /; embeddingDimension[m]==2 && (0<v1<=MeshCellCount[m,0]) && (0<v2<=MeshCellCount[m,0])


fixVertices[m_?mechanismQ,{v1_Integer,v2_Integer,v3_Integer}]:=
With[{coord=m["positions"]},With[{vert=Cross[coord[[v2]]-coord[[v1]],coord[[v3]]-coord[[v1]]]},
	First@Quiet[Solve[Flatten[{
	vertexDisplacement[v1,All[3]],
	(coord[[v3]]-coord[[v2]]).vertexDisplacement[v2,All[3]],
	vert . vertexDisplacement[v2,All[3]],
	vert . vertexDisplacement[v3,All[3]]
	}]==0,Flatten[vertexDisplacement[{v1,v2,v3},All[3]]]],Solve::svars]
]]/;embeddingDimension[m]==3


fixVertices[m_?mechanismQ,{v1_Integer,v2_Integer}]:=With[{coord=m["positions"]},
	First@Quiet[Solve[Flatten[{
	vertexDisplacement[v1,All[2]],
	(RotationMatrix[Pi/2] . (coord[[v2]]-coord[[v1]])).vertexDisplacement[v2,All[2]]
	}]==0,Flatten[vertexDisplacement[{v1,v2},All[2]]]],Solve::svars]
]/;embeddingDimension[m]==2


fixVertices[m_?mechanismQ,{v1_Integer}]:=With[{coord=m["positions"]},
	Thread[vertexDisplacement[v1,All[embeddingDimension[m]]]->0]
]


fixVertices::num="Number of vertices required to eliminate rigid body motions is `1`.";
fixVertices[m_?mechanismQ,x_]:="nothing"/;Message[fixVertices::num,Length[x]]


Options[infinitesimalMotions]=Join[{"constraints"->None,"variables"->Automatic},Options[NullSpace]];


infinitesimalMotions[m : mechanismPattern, positions: Except[_Rule] : Automatic, opt:OptionsPattern[]]:=
With[{
	actualPositions=If[positions===Automatic,m["positions"],positions]
},
	Module[
		{res=infinitesimalMotionsInternal[m,actualPositions,OptionValue["constraints"],OptionValue["variables"],FilterRules[{opt},Options[NullSpace]]]},
		res /; res=!=$Failed
	 ] /; vertexCoordinatesQ[m,actualPositions]
]

infinitesimalMotions::failed="Failed to find an appropriate solution. Check the constraints.";
infinitesimalMotions::pos="Positions do not match those of mechanism.";
infinitesimalMotions[m : mechanismPattern, positions : Except[Automatic|_Rule], OptionsPattern[]]:="nothing"/;
	Which[
		Not[vertexCoordinatesQ[m,positions]],
			Message[infinitesimalMotions::pos]; False,
		True, False
	]


infinitesimalMotions::var="Variables listed are not of the form vertexDisplacement[n,c].";
infinitesimalMotions::sing="Jacobian matrix is singular. Recovering using generic variables.";
infinitesimalMotions::jac="Jacobian matrix may not be invertible. Choosing different displacements may give better results.";
infinitesimalMotions::lin="Found `1` linear motions so `1` displacements are needed.";


linearMotionsToDisplacementRules[m_,linearMotions_,inputDisplacements_]:={} /; Length[linearMotions]==0

linearMotionsToDisplacementRules[m_,linearMotions_,inputDisplacements_List]:=
With[
(*preprocess arguments*)
{displacements=Flatten[{inputDisplacements}]},
Module[
{x,y,c,rules,jacobianMatrix,inverseJacobian,displacementIndices},
	displacementIndices=displacements/.vertexDisplacement[x_,y_]->{x,y}/.{"x"->1,"y"->2,"z"->3};
	jacobianMatrix=linearMotions[[All,Sequence@@#]]&/@displacementIndices;
	
	(*if inverting the jacobian fails entirely, we'll need to deal with that.*)
	inverseJacobian=Check[Inverse[jacobianMatrix],
		Message[infinitesimalMotions::sing];
		Return[linearMotionsToDisplacementRules[m,linearMotions,Automatic]],
		Inverse::sing
	];
	(*warn that the jacobian matrix is almost singular*)
	If[Abs[Det[jacobianMatrix]]<10^(-16),Message[infinitesimalMotions::jac]];

	rules=Thread[Array[c,Length[jacobianMatrix]]->inverseJacobian . Flatten[{displacements}]];
	Thread[Flatten[vertexDisplacement[m]]->Flatten[Array[c,Length[jacobianMatrix]] . linearMotions/.rules]]

]/; Length[linearMotions]==Length[displacements]&&MatchQ[displacements,{__vertexDisplacement}] ]

linearMotionsToDisplacementRules[m_,linearMotions_,Automatic]:=Module[{v=Unique[]},
	Thread[Flatten[vertexDisplacement[m]]->Flatten[Array[v,Length[linearMotions]] . linearMotions]]
]/;Length[linearMotions]>0

linearMotionsToDisplacementRules[m_,linearMotions_,c_Symbol]:=
	Thread[Flatten[vertexDisplacement[m]]->Flatten[Array[c,Length[linearMotions]] . linearMotions]]/;Length[linearMotions]>0


linearMotionsToDisplacementRules[m_,linearMotions_,displacements_]:=Which[
	Not[MatchQ[Flatten[{displacements}],{__vertexDisplacement}]],
		Message[infinitesimalMotions::var];
		$Failed,
	Length[linearMotions]!=Length[Flatten[{displacements}]],
		Message[infinitesimalMotions::lin,Length[linearMotions]];
		$Failed,
	True,
		$Failed
]


infinitesimalMotionsInternal[m_,positions_,inputConstraints_,v_,nullspaceOptions_]:=
Module[{matrix,dependencies,solution},
With[{
variables=Flatten[vertexDisplacement[m]],

(*collect all the constraints valid to 2nd order in the displacements *)
equations=Join[
	constraintEquationsInternal[m,positions,2,m["components"]],
	(*parseConstraints[2,m,inputConstraints][[1]]/.Dispatch[dataRules[vertexPosition,positions]]*)
	reduceConstraintToOrder[positions,constraintVector[positions,inputConstraints],2]/.Dispatch[dataRules[vertexPosition,positions]]
]
},
	(*linearize the equations*)
	matrix=CoefficientArrays[equations,variables];

	(*
	Find dependencies among the linear equations.

	When the constraints arise only from edge stretching, these dependences are the self-stresses.
	*)
	dependencies=Orthogonalize[NullSpace[Transpose[matrix[[2]]],nullspaceOptions]];

	(*the linear displacements that are allowed*)
	solution=linearMotionsToDisplacementRules[m,linearMotions[m,matrix[[2]],nullspaceOptions],v];

	Which[
		solution===$Failed, $Failed,

		Length[solution]>0,
			Expand[(*analytical processing that I prefer, but should not take a long time to perform*)
				{
				vertexDisplacement[m],
				If[Length[dependencies]>0,dependencies . equations,{}]
				}/.Dispatch[solution]
			],
		
		(*no solution but no errors either*)
		True,
			Message[infinitesimalMotions::failed];
			{{},{}}
	]
]]


compiledMechanismEnergy[variables_List,energy_CompiledFunction,gradient_CompiledFunction]["variables"]:=variables

Format[compiledMechanismEnergy[variables_List,energy_CompiledFunction,gradient_CompiledFunction]]:=
StringJoin[
	"compiledMechanismEnergy[",
	If[Length[variables]<10,
		ToString[variables],
		"{"<>ToString[First[variables]<>"..."<>Last[variables]<>"}"]
	],
	"]"
]


compiledMechanismEnergy[variables_?VectorQ,energy_CompiledFunction,gradient_CompiledFunction]["data"]:=variables

compiledMechanismEnergy[variables_List,energy_CompiledFunction,gradient_CompiledFunction]["energy"][pos_,data_]:=
	energy[pos,data]/;NumericQ[pos[[1]]]
compiledMechanismEnergy[variables_List,energy_CompiledFunction,gradient_CompiledFunction]["gradient"][pos_,data_]:=
	gradient[pos,data]/;NumericQ[pos[[1]]]

compiledMechanismEnergy[variables_List,energy_CompiledFunction,gradient_CompiledFunction][v_?(VectorQ[#,NumericQ]&)]:=compiledMechanismEnergy[v,energy,gradient]


compiledMechanismEnergyQ[compiledMechanismEnergy[variables_,energy_CompiledFunction,gradient_CompiledFunction]]:=VectorQ[variables]
compiledMechanismEnergyQ[_]:=False

compiledNumericalMechanismEnergyQ[compiledMechanismEnergy[variables_,energy_CompiledFunction,gradient_CompiledFunction]]:=VectorQ[variables,NumericQ]
compiledNumericalMechanismEnergyQ[_]:=False


Options[compiledMechanismEnergy]:={"constraints"->None,"additional"->0};


compiledMechanismEnergy[m : mechanismPattern, pos : Except[_Rule] : Automatic,opt:OptionsPattern[]]:=
With[{actualPositions=If[pos===Automatic,m["positions"],pos]},
Module[
{res=compiledMechanismEnergyInternal[m,actualPositions,OptionValue["constraints"],OptionValue["additional"]]},
	res/;res=!=$Failed
]/;vertexCoordinatesQ[m,actualPositions]
]

compiledMechanismEnergy::pos="Provided positions do not correspond to mechanism.";
compiledMechanismEnergy[m : mechanismPattern, pos : Except[_Rule|Automatic],opt:OptionsPattern[]]:="nothing"/;Message[compiledMechanismEnergy::pos]


compiledMechanismEnergyInternal[m_,positions_,constraints_,additional_]:=
Module[
{
	symbols,energy=mechanismEnergy[m,positions,"constraints"->constraints]+additional
},
	symbols=DeleteDuplicates@Select[Cases[energy,_Symbol,Infinity],Not[NumericQ[#]]&];

	Check[
		compiledMechanismEnergy[
			symbols,
			compileEnergy[m,energy,symbols,$compilationTarget],
			compileGradient[m,energy,symbols,$compilationTarget]
		],
		$Failed
	]
]


compileEnergy[m_,energy_,symbols_,compiler_]:=Module[
{
body,
variables=Flatten[vertexPosition[m]],
injector,c,
dataInjector,data
},
	injector=Dispatch@Thread[variables->(Hold[c[[#]]]&/@Range[Length@variables])];
	dataInjector=Dispatch@Thread[symbols->(Hold[data[[#]]]&/@Range[Length@symbols])];
	body=energy/.injector/.dataInjector;
	ReleaseHold[Hold[Compile][
		{{c,_Real,1},{data,_Real,1}},
		body,
		RuntimeOptions->{"EvaluateSymbolically"->False},
		CompilationTarget->compiler
	]]
]


compileGradient[m_,energy_,symbols_,compiler_]:=Module[
{
body,
variables=Flatten[vertexPosition[m]],
injector,c,
dataInjector,data
},
	injector=Dispatch@Thread[variables->(Hold[c[[#]]]&/@Range[Length@variables])];
	dataInjector=Dispatch@Thread[symbols->(Hold[data[[#]]]&/@Range[Length@symbols])];
	body=D[energy,{variables}]/.injector/.dataInjector;
	ReleaseHold[Hold[Compile][
		{{c,_Real,1},{data,_Real,1}},
		body,
		RuntimeOptions->{"EvaluateSymbolically"->False},
		CompilationTarget->compiler
	]]
]


Options[mechanismEnergy]={"constraints"->None};


$defaultStiffness[rigidBar]=1;
$defaultStiffness[fold]=10^(-4);
$defaultStiffness[joint]=10^(-4);
$defaultStiffness[angleJoint]=10^(-4);
$defaultStiffness["constraints"]=10^(-1);

$defaultStiffness::err="`1` does not have a default stiffness.";
$defaultStiffness[s_]:="nothing"/; Message[$defaultStiffness::err,s]


mechanismEnergy[m : mechanismPattern,positions: Except[_Rule] : Automatic,OptionsPattern[]]:=
With[
{
actualPositions=If[positions===Automatic,m["positions"],positions],
arbitraryPositions=vertexPosition[m]
},
	(
		Total[ Flatten[componentEnergy[m,actualPositions,arbitraryPositions,#]&/@m["components"] ]] +
			+ $defaultStiffness["constraints"] (# . #&)[constraintVector[actualPositions,OptionValue["constraints"]]]/2
	)/; vertexCoordinatesQ[m,actualPositions]
]

mechanismEnergy::pos="Positions do not correspond to mechanism vertices.";
mechanismEnergy[m : mechanismPattern, positions : Except[Automatic|_Rule],___]:="nothing"/;Message[mechanismEnergy::pos]


componentEnergy[m_?mechanismQ,positions_?MatrixQ,arbitraryPositions_,spring[indices_,data_]]:=
With[{
lengths=componentData["length",m,positions,spring[indices,data]],
forces=componentData["force",m,positions,spring[indices,data]],
stiffnesses=componentData["stiffness",m,positions,spring[indices,data]]
},
	stiffnesses MapThread[#1[#2,#3]&,{forces,displacementLength[arbitraryPositions,indices],lengths}]
]


componentEnergy[m_?mechanismQ,positions_?MatrixQ,arbitraryPositions_,rigidBar[indices_,data_]]:=
With[{
lengths=componentData["length",m,positions,rigidBar[indices,data]],
stiffnesses=componentData["stiffness",m,positions,rigidBar[indices,data]]/.Infinity->$defaultStiffness[rigidBar]
},
	stiffnesses (displacementLengthSquared[arbitraryPositions,indices]-lengths^2)^2/2
]


componentEnergy[m_?mechanismQ,positions_?MatrixQ,arbitraryPositions_,fold[indices_,data_]]:=
With[{
angles=componentData["angle",m,positions,fold[indices,data]],
stiffnesses=componentData["torsionalStiffness",m,positions,fold[indices,data]]/.Infinity->$defaultStiffness[fold]
},
	stiffnesses (foldAngle[m,arbitraryPositions,indices]-angles)^2/2
]


componentEnergy[m_?mechanismQ, positions_?MatrixQ, arbitraryPositions_, joint[indices_,data_]]:=Module[
{allStiffnesses=componentData["stiffness",m,positions,joint[indices,data]], stiffnessRule},
	stiffnessRule= Not[MatchQ[#,Infinity]]&/@allStiffnesses;
	If[Count[stiffnessRule,True]>0,
		With[{
			newIndices = Pick[ indices, stiffnessRule ],
			position = Pick[componentData["position",m,positions,joint[indices,data]],stiffnessRule],
			components = Flatten[{#}]& /@ (Pick[componentData["components",m,positions,joint[indices,data]],stiffnessRule] /.{"x"->1,"y"->2,"z"->3}),
			stiffnesses = Pick[allStiffnesses,stiffnessRule]
		},
			stiffnesses MapThread[
				Flatten[ #2[[#1]] ] . Flatten[ #2[[#1]] ]&,
				{ components,  arbitraryPositions[[newIndices]] - position } 
			]
		],
	0
	]
]


componentEnergy[m_?mechanismQ,positions_?MatrixQ,arbitraryPositions_,angleJoint[indices_,data_]]:=
With[
{
angles=componentData["angle",m,positions,angleJoint[indices,data]],
stiffnesses=componentData["angularStiffness",m,positions,angleJoint[indices,data]] /. Infinity->$defaultStiffness[angleJoint]
},
	stiffnesses (turningAngle[arbitraryPositions,indices]-angles)^2/2
]


componentEnergy[m_?mechanismQ,positions_?MatrixQ,arbitraryPositions_,_]:={0}


Options[minimizeEnergy]=Join[{"initial"->Automatic},Options[mechanismEnergy],Options[FindMinimum]];
SetAttributes[minimizeEnergy,HoldRest];


minimizeEnergy[m : mechanismPattern, energy : Except[_Rule] : Automatic,opt:OptionsPattern[]]:=
With[
{
	initialPosition=If[OptionValue["initial"]===Automatic,m["positions"],OptionValue["initial"]],
	energyFunction=If[energy===Automatic,mechanismEnergy[m, FilterRules[{opt},Options[mechanismEnergy]]], energy]
},
	Module[
	{res=minimizeEnergyInternal[
		m,
		energyFunction,
		initialPosition,
		FilterRules[{opt},Options[FindMinimum]]
		]
	},
	res/;Head[res]=!=minimizeEnergyInternal&&res=!=$Failed
	]/; numericCoordinatesQ[m , initialPosition]
] 


minimizeEnergy::badinitial="Initial conditions are not well-formed numeric positions matching the mechanism.";
minimizeEnergy::data="Data for compiled function not a vector of numerical values.";
minimizeEnergy::energy="Energy is not numerical at initial condition.";


minimizeEnergyInternal[m_,energy_?compiledNumericalMechanismEnergyQ,initialPositions_,minimizationOptions_]:=
Module[{output,constraints=pinnedJoints[m,initialPositions]},
With[
{
initial=Sequence@@dynamicVariables[m,constraints,initialPositions],(* {variable 1, value 1},{variable 2, value 2}, ... *)
variables=Flatten[vertexPosition[m]]/.Dispatch[constraints],
options=Sequence@@minimizationOptions,
data=energy["data"]
},
	output=FindMinimum[energy["energy"][variables,data],initial,Gradient:>energy["gradient"][variables,data],options];
	If[MatchQ[output[[2]],{__Rule}],
		{output[[1]],vertexPosition[m]/.Dispatch[output[[2]]]/.constraints},
		$Failed
	]
]]

minimizeEnergyInternal[m_,_?compiledMechanismEnergyQ,__]:="nothing" /; Message[minimizeEnergy::data]


minimizeEnergyInternal[m_,energyExpression_,initialPositions_,minimizationOptions_]:=
Module[{output,initial},With[
{
constraints=pinnedJoints[m,initialPositions],
options=Sequence@@minimizationOptions
},
	(*construct the variables for FindMinimum*)
	initial=Sequence@@dynamicVariables[m,constraints,initialPositions];

	output=FindMinimum@@{energyExpression/.Dispatch[constraints],initial,options};
	If[MatchQ[output[[2]],{__Rule}],
		{output[[1]],vertexPosition[m]/.Dispatch[output[[2]]]/.constraints},
		$Failed
	]
]] /; analyticEnergyQ[energyExpression,initialPositions]

minimizeEnergyInternal[__]:="nothing" /; Message[minimizeEnergy::energy]


Options[repeatedMinimizeEnergy]=Join[{"MaxEnergy"->Infinity},Options[randomDisplacements],Options[minimizeEnergy]];
SetAttributes[repeatedMinimizeEnergy,HoldRest];


repeatedMinimizeEnergy::numneg="Number of repetitions should be a positive integer.";
repeatedMinimizeEnergy::energy="Energy is not numerical at initial condition.";
repeatedMinimizeEnergy::max="Option \"MaxEnergy\" does not have a valid value.";
repeatedMinimizeEnergy::pos="Initial positions are not numerical and valid.";
repeatedMinimizeEnergy::cvmit="Excluding `1` non-convergent results.";
repeatedMinimizeEnergy::comp="Compiled energy has non-numerical data.";


repeatedMinimizeEnergy[m:mechanismPattern,energy_:Automatic,num_Integer,opt:OptionsPattern[]]:=With[
{
	initialPosition=If[OptionValue["initial"]===Automatic,m["positions"],OptionValue["initial"]],
	energyFunction=If[energy===Automatic,mechanismEnergy[m,FilterRules[{opt},Options[mechanismEnergy]]],energy]
},
	Module[{res=repeatedMinimizeEnergyInternal[
		m,
		initialPosition,
		energyFunction[m,energy,FilterRules[{opt},Options[mechanismEnergy]]],
		num,
		OptionValue["MaxEnergy"],
		FilterRules[{opt},Options[randomDisplacements]],
		FilterRules[{opt},Options[FindMinimum]]
	]},
		res/;Head[res]=!=repeatedMinimizeEnergyInternal
	]/;repeatedMinimizeEnergyArgumentsQ[m,energyFunction,initialPosition,num,OptionValue["MaxEnergy"]]
]


repeatedMinimizeEnergyArgumentsQ[m_,energy_,initial_,num_,maxenergy_]:=Which[
	Not[IntegerQ[num]&&num>0],
		Message[repeatedMinimizeEnergy::numneg]; False,
	Not[maxenergy===Infinity||(NumericQ[maxenergy]&&maxenergy>0)],
		Message[repeatedMinimizeEnergy::max]; False,
	Not[numericCoordinatesQ[m,initial]],
		Message[repeatedMinimizeEnergy::pos]; False,
	compiledMechanismEnergyQ[energy]&&Not[compiledNumericalMechanismEnergyQ[energy]],
		Message[minimizeEnergy::data]; False,
	Not[compiledMechanismEnergyQ[energy]]&&Not[analyticEnergyQ[energy,m["positions"]]],
		Message[minimizeEnergy::energy]; False,

	True, True
]


repeatedMinimizeEnergyInternal[m_,positions_,energy_,num_,maxenergy_,randomOptions_,minimizationOptions_]:=
Module[{output,ctr=0},
	output=Select[
		Array[
			Check[
				minimizeEnergyInternal[m,energy,positions+randomDisplacements[m,randomOptions],minimizationOptions],
				ctr++;
				{Infinity,$Failed},
				FindMinimum::cvmit
			]&,
			num
		],
		(*use only values below the maximum specified energy*)
		First[#]<maxenergy&
	];
	If[ctr>0,Message[repeatedMinimizeEnergy::cvmit,ctr]];
	If[Length[output]>0,
		Transpose[{output[[All,1]],Join[{output[[1,2]]},Last[alignMechanism[output[[1,2]],#]]&/@output[[2;;All,2]]]}],
		{}
	]
]


Options[tallyRepeatedMinimizeEnergy]=Options[repeatedMinimizeEnergy];

tallyRepeatedMinimizeEnergy[m:mechanismPattern,num_Integer,tol:_?NumericQ:10^(-6),opt:OptionsPattern[]]:=Module[{
res=repeatedMinimizeEnergy[m,num,opt]},
	tallyRepeatedMinimizeEnergyOutput[res,tol]/;Head[res]=!=repeatedMinimizeEnergy
]
tallyRepeatedMinimizeEnergy[m:mechanismPattern,energy_,num_Integer,tol:_?NumericQ:10^(-6),opt:OptionsPattern[]]:=Module[{
res=repeatedMinimizeEnergy[m,energy,num,opt]},
	tallyRepeatedMinimizeEnergyOutput[res,tol]/;Head[res]=!=repeatedMinimizeEnergy
]

tallyRepeatedMinimizeEnergyOutput[{},_]:={}
tallyRepeatedMinimizeEnergyOutput[res_,tol_]:=With[{output=Transpose[res]},
	{Max[output[[1]]],Tally[output[[2]],Flatten[#1-#2].Flatten[#1-#2]<tol^2&]}
]


Options[findMinimalTrajectory]={
	"additional"->0,
	"constraints"->None,
	Method->{"ElasticBand", MaxIterations->10^5}
};


findMinimalTrajectory["Methods"]={{"ElasticBand", Join[{"stiffness"->10^(-4)},"Options[FindMinimum]"]}};

findMinimalTrajectory[ m : mechanismPattern, start_, end_, steps_, opt : OptionsPattern[] ]:=
Module[{method = Flatten[{OptionValue[Method]}], res},
	res = Switch[First[method],
		"ElasticBand",
			findMinimalTrajectoryElasticBand[m, start, end, steps, mechanismEnergy[m, "constraints"->OptionValue["constraints"]]+OptionValue["additional"], Sequence @@ Rest[method] ],
		_,
			Message[findMinimalTrajectory::meth];
			$Failed
	];
	
	res /; res =!= $Failed
]

findMinimalTrajectory::method="`1` is not a recognized method. Only \"ElasticBand\" is currently recognized.";


findMinimalTrajectory::ebstiff="Stiffness in \"ElasticBand\" method must be a positive numerical value.";
findMinimalTrajectory::ebstart="Start positions are not numeric coordinates corresponding to mechanism.";
findMinimalTrajectory::ebend="End positions are not numeric coordinates corresponding to mechanism.";
findMinimalTrajectory::steps="Number of steps should be a positive integer.";

ClearAll[findMinimalTrajectoryElasticBand];
Options[findMinimalTrajectoryElasticBand]=Join[{"stiffness"->10^(-4)},Options[FindMinimum]];

findMinimalTrajectoryElasticBand[m_, startPositions_,endPositions_, steps_, energy_, opt : OptionsPattern[]]:=
Module[{
stiffness = OptionValue["stiffness"],
fixedVertices = pinnedJoints[m, startPositions], variable, internalVariables, partialEnergy, newVariables, potentialEnergy, initialConditions,
minimizationOptions = FilterRules[{opt},Options[FindMinimum]], solution
},

	Which[
		Not[ NumericQ[stiffness] && stiffness > 0 ],
			Message[findMinimalTrajectory::ebstiff]; Return[$Failed],
		Not @ numericCoordinatesQ[m, startPositions],
			Message[findMinimalTrajectory::ebstart]; Return[$Failed],
		Not @ numericCoordinatesQ[m, endPositions],
			Message[findMinimalTrajectory::ebend]; Return[$Failed],
		Not[ IntegerQ[steps] && steps>0 ],
			Message[findMinimalTrajectory::steps]; Return[$Failed]
	];

	internalVariables= Join[
		{dataRules[vertexPosition,startPositions]},
		Flatten[MapThread[ #1 -> #2&, {vertexPosition[m], #}, 2],2]& /@ Array[variable, {steps, MeshCellCount[m,0],embeddingDimension[m]}],
		{dataRules[vertexPosition,endPositions]}
	];

	newVariables = Flatten[vertexPosition[m] /. fixedVertices] /. internalVariables;

	partialEnergy = energy /. fixedVertices;

	potentialEnergy = Total @ Flatten @ {
	(*local equations*)
	(partialEnergy /. # &) /@ internalVariables,

	(*elastic band equations*)
	(stiffness (#[[2]]-#[[1]]) . (#[[2]]-#[[1]])&) /@ Partition[newVariables, 2, 1]
	};

	initialConditions = DeleteCases[ 
		Transpose @ {Flatten[ Drop[ Rest @ newVariables, -1] ], Flatten[startPositions + (endPositions - startPositions)/(steps+1) #& /@ Range[steps] ]},
		{_?NumericQ, _}
	];

	solution = FindMinimum @@ {potentialEnergy, initialConditions, minimizationOptions };
	If[Head[solution] =!= FindMinimum, Partition[#,embeddingDimension[m]]& /@ (newVariables /. solution[[2]]), $Failed]
]


Options[dynamicalSystemEquations]={
	"constraints"->None, (*a list of constraints*)
	"mass"->1,
	"drag"->0,
	"additional"->0 (*additional terms to add to the energy*)
};

Options[dynamicalSystem]=Join[
	Options[dynamicalSystemEquations],
	Options[NDSolve]
];


dynamicalSystemEquations::drag="Option \"drag\" cannot be parsed.";
dynamicalSystemEquations::mass="Option \"mass\" cannot be parsed.";
dynamicalSystemEquations::pos="Not a valid set of positions.";
dynamicalSystemEquations::var="Variables should be of the form {variable, time}.";


validEquationsParamQ[value_?NumericQ]:=value >= 0
validEquationsParamQ[value : Except[_List]]:=Not[NumericQ[value]]
validEquationsParamQ[_]:=False

expandEquationDrags[m_, drags_?validEquationsParamQ]:=ConstantArray[drags, MeshCellCount[m,0] ]
expandEquationDrags[m_, drags : {__?validEquationsParamQ}]:=drags /; Length[drags]==MeshCellCount[m,0]
expandEquationDrags[m_, None]:=ConstantArray[0, MeshCellCount[m,0] ]
expandEquationDrags[m_, _]:=(Message[dynamicalSystemEquations::drag]; $Failed)

expandEquationMasses[m_, masses_?validEquationsParamQ]:=ConstantArray[masses, MeshCellCount[m,0] ]
expandEquationMasses[m_, masses : {__?validEquationsParamQ}]:=masses /; Length[masses]==MeshCellCount[m,0]
expandEquationMasses[m_, None | 0]:=None
expandEquationMasses[m_, _]:=(Message[dynamicalSystemEquations::mass]; $Failed)

evaluateEquationPositions[m_, Automatic]:=m["positions"]
evaluateEquationPositions[m_, positions_]:=positions /; vertexPositionsQ[m,positions]
evaluateEquationPositions[m_, _]:=(Message[dynamicalSystemEquations::pos]; $Failed)


dynamicalSystemEquations[m : mechanismPattern, initialPositions_ : Automatic, {variableName_Symbol, timeVariable_Symbol}, opt : OptionsPattern[] ]:=
Module[{
energy = mechanismEnergy[m, "constraints" -> OptionValue["constraints"]] + OptionValue["additional"],
positions = evaluateEquationPositions[m,initialPositions],
drags = expandEquationDrags[m, OptionValue["drag"]],
masses = expandEquationMasses[m, OptionValue["mass"]]
},
	With[{res=dynamicalSystemEquationsInternal[m, positions, variableName, timeVariable, masses, drags, energy ]},
		res /; res =!= $Failed
	] /; drags =!= $Failed && masses =!= $Failed && positions =!= $Failed && variableName =!= timeVariable
]

dynamicalSystemEquations[m : mechanismPattern, initialPositions_ : Automatic, {_,_}, OptionsPattern[]]:="nothing" /; Message[dynamicalSystemEquations::vars]
dynamicalSystemEquations[m : mechanismPattern, initialPositions_ : Automatic, Except[_List] , OptionsPattern[]]:="nothing" /; Message[dynamicalSystemEquations::vars]


dynamicalSystem::drag="Option \"drag\" cannot be parsed.";
dynamicalSystem::mass="Option \"mass\" cannot be parsed.";
dynamicalSystem::timespec="The last argument should be of the form {time variable, start time, end time} with start and end times being numerical and the time variable being a Symbol.";


validDynamicalParamQ[value_]:=NumericQ[value] && value >= 0

expandDynamicalDrags[m_, drags_?validDynamicalParamQ]:=ConstantArray[drags, MeshCellCount[m,0] ]
expandDynamicalDrags[m_, drags : {__?validDynamicalParamQ}]:=drags /; Length[drags]==MeshCellCount[m,0]
expandDynamicalDrags[m_, None]:=ConstantArray[0, MeshCellCount[m,0] ]
expandDynamicalDrags[m_, _]:=(Message[dynamicalSystem::drag]; $Failed)

ClearAll[expandDynamicalMasses];
expandDynamicalMasses[m_, None | 0]:= None
expandDynamicalMasses[m_, masses_?validDynamicalParamQ]:= ConstantArray[masses, MeshCellCount[m,0] ]
expandDynamicalMasses[m_, masses : {__?validDynamicalParamQ}]:= masses /; Length[masses] == MeshCellCount[m,0]
expandDynamicalMasses[m_, _]:=(Message[dynamicalSystem::mass]; $Failed)


parseInitialConditions[m_, positions : _?MatrixQ | Automatic]:={parsePositions[m, positions], parseVelocities[m, None]}
parseInitialConditions[m_, {positions : _?MatrixQ | Automatic, velocities_?MatrixQ}]:={parsePositions[m, positions], parseVelocities[m, velocities]}
parseInitialConditions[m_, _]:=$Failed

parsePositions[m_, Automatic]:=m["positions"]
parsePositions[m_, positions_?MatrixQ]:=positions /; numericCoordinatesQ[m,positions]
parsePositions[m_, positions_?MatrixQ]:=$Failed

parseVelocities[m_, velocities_]:= velocities /; numericCoordinatesQ[m, velocities]
parseVelocities[m_, None]:= ConstantArray[0, {MeshCellCount[m,0], embeddingDimension[m]}]


dynamicalSystem[m : mechanismPattern, initialConditions_ : Automatic, {time_Symbol, start_?NumericQ, end_?NumericQ}, opt : OptionsPattern[] ]:=
Module[{
energy = mechanismEnergy[m, "constraints" -> OptionValue["constraints"]] + OptionValue["additional"],
parsedInitialConditions = parseInitialConditions[m, initialConditions],
drags = expandDynamicalDrags[m, OptionValue["drag"]],
masses = expandDynamicalMasses[m, OptionValue["mass"]]
},
	With[{res=dynamicalSystemInternal[m, masses, drags, parsedInitialConditions, energy, {time, start, end}, FilterRules[{opt}, Options[NDSolve]] ]},
		res /; res =!= $Failed
	] /; drags =!= $Failed && masses =!= $Failed && parsedInitialConditions =!= $Failed
]

dynamicalSystem[m : mechanismPattern, _ : Automatic, {_,_,_} ]:="nothing" /; Message[dynamicalSystem::timespec]
dynamicalSystem[m : mechanismPattern, _ : Automatic, Except[_List] ]:="nothing" /; Message[dynamicalSystem::timespec]


dynamicalSystemEquationsInternal[m_, initialPositions_, v_, timeVariable_, masses_, drags_, energy_]:=
Module[{pinnedVertices = Dispatch[ pinnedJoints[ m, initialPositions ] ], variables, gradient, equationSystem, i, j, t},
	variables=vertexPosition[m] /. pinnedVertices /. vertexPosition[i_, j_] :> v[i, j][t];
	gradient=Partition[ D[ energy, { Flatten[ vertexPosition[m] ] }], embeddingDimension[m] ] /. pinnedVertices /. vertexPosition[i_, j_] :> v[i, j][t];
	
	equationSystem = Flatten[
		If[masses === None, ConstantArray[0, Dimensions[initialPositions] ], DiagonalMatrix[ masses ] . D[ variables, {t, 2} ] ] 
			+ DiagonalMatrix[ drags ] . D[ variables, {t, 1} ] + gradient
	] /. t->timeVariable;

	(*we need to explicitly eliminate the equations that are predetermined by the pinned vertices or there will be too many equations*)
	Pick[ equationSystem, Not[ NumericQ[#] ]& /@ Flatten[variables] ]
]


dynamicalSystemInternal[m_, masses_, drags_, {initialPositions_, initialVelocities_}, energy_, {timeVariable_, start_, end_}, opt_]:=
Module[{equations, v, variables, processedVariables, solution, i, j, pinnedVertices = Dispatch[ pinnedJoints[ m, initialPositions ] ]},
	(*list only the non-pinned variables*)
	variables = Flatten[ vertexPosition[m] /. pinnedVertices /. vertexPosition[i_, j_] :> v[i, j][timeVariable] ];

	equations = Flatten[{
		(*the dynamical system equations*)
		dynamicalSystemEquationsInternal[m, initialPositions, v, timeVariable, masses, drags, energy],

		(*initial positions*)
		Select[ Flatten[ (variables /. timeVariable->0) - Flatten[initialPositions]], Not[ NumericQ[ # ] ]& ],

		(*initial velocities if needed*)
		If[masses === None,
			{},
			Select[ (( D[ variables, timeVariable ] /. timeVariable->0 ) - Flatten[initialVelocities]), Not[ NumericQ[ # ] ]& ]
		]
	}];
	
	solution = NDSolve[ Thread[ equations == 0 ],  Select[ variables, Not[ NumericQ[#] ] & ], {timeVariable, start, end }, opt ];

	(*did NDSolve return a list of rules?*)
	If[MatchQ[solution,{{__Rule}}],
		vertexPosition[m] /. pinnedVertices /. vertexPosition[i_, j_] :> v[i, j][timeVariable] /. solution[[1]],
		$Failed
	]
]


Options[isometricTrajectory]={
"stepsize"->1/10,
"initial"->Automatic,
"stepOptions"->{MaxIterations->10^4},
Method->"Minimization",
Tolerance->10^(-8),
"constraints"->None,
"compile"->Automatic
};


isometricTrajectory::const="Constraints contain symbolic variables.";
isometricTrajectory::ener="Energy contains symbolic variables.";
isometricTrajectory::dir="Initial direction is not numerical or is not compatible with mechanism.";
isometricTrajectory::pos="Initial positions are not numerical or are not compatible with mechanism.";
isometricTrajectory::steps="Number of steps is not a positive integer.";
isometricTrajectory::stepsize="Option \"stepsize\" should be a positive, real number.";
isometricTrajectory::compile="Option \"compile\" should be a Boolean, Automatic, or a numerical compiledMechanismEnergy[].";
isometricTrajectory::meth="Method function `1` is not valid.";
isometricTrajectory::stfunc="Step function `1` is not valid.";
isometricTrajectory::meth="Method `1` is not recognized.";


isometricTrajectory[m : mechanismPattern, initialDirection_, steps_, opt : OptionsPattern[]]:=
With[{positions=If[OptionValue["initial"]===Automatic,m["positions"],OptionValue["initial"]]},
With[{constraints=constraintVector[positions,If[OptionValue["constraints"]===None,{},OptionValue["constraints"]]]},
	isometricTrajectoryInternal[
		m,
		{positions,initialDirection},
		{steps,OptionValue["stepsize"]},
		{OptionValue["compile"],constraints},
		{OptionValue[Method],OptionValue[Tolerance],OptionValue["stepOptions"]}
	] /; Which[ (*argument checking*)
		Not[IntegerQ[steps] && steps>0], Message[isometricTrajectory::steps]; False,
		Not[NumericQ[OptionValue["stepsize"]]&&OptionValue["stepsize"]>0], Message[isometricTrajectory::stepsize]; False,
		Not[numericCoordinatesQ[m,positions+initialDirection]], Message[isometricTrajectory::dir]; False,
		Not[BooleanQ[OptionValue["compile"]]||OptionValue["compile"]===Automatic||compiledNumericalMechanismEnergyQ[OptionValue["compile"]]||analyticEnergyQ[OptionValue["compile"],positions]],
			 Message[isometricTrajectory::compile]; False,
		Not[MatchQ[OptionValue[Method],"Minimization"|"RandomWalk"|None]],
			Message[isometricTrajectory::meth,OptionValue[Method]]; False,
		True, True
]

] /; Which[Not[numericCoordinatesQ[m,positions]], Message[isometricTrajectory::pos]; False, True,True]
]


isometricTrajectoryInternal[m_, {initialPositions_,initialDirection_},{steps_,stepsize_},{energy_,constraintVec_},{method_,tolerance_,stepOptions_}]:=
Module[{energyTemp,out},With[
{
variables=Flatten[vertexDisplacement[m]],
blankPositions=Flatten[vertexPosition[m]],
positions=Flatten[initialPositions],
initialDirectionNormalized=Normalize[Flatten[initialDirection]],

(*figure out the constraints we want to use at 1st order and at infinite order*)
firstOrderConstraints=Join[
	constraintEquationsInternal[m,vertexPosition[m],1,m["components"]],
	reduceConstraintToOrder[vertexPosition[m],constraintVec,1]
	],
fullConstraints=Join[
	constraintEquationsInternal[m,initialPositions,Infinity,m["components"],vertexPosition],
	constraintVec
]},
With[
{
(*this function will find the numerical 1st order constraint matrix*)
constraintMatFunction=(CoefficientArrays[firstOrderConstraints/.Dispatch[Thread[blankPositions->#]],variables][[2]]&),

(*figure out the energy we want to use*)
constraintEnergy=Which[
	energy===Automatic, fullConstraints . fullConstraints,
	energy===False, fullConstraints . fullConstraints,
	energy===True, compiledMechanismEnergy[{},
		compileEnergy[m,fullConstraints . fullConstraints,{},$compilationTarget],
		compileGradient[m,fullConstraints . fullConstraints,{},$compilationTarget]],
	True, energy (*user may be passing an energy*)
	]
},
	ArrayReshape[#,{Length[#],MeshCellCount[m,0],embeddingDimension[m]}]&[ FoldList[
		(*take one step*)
		(
		energyTemp=evaluateEnergy[m,#1[[1]],constraintEnergy];
		isometricTrajectoryStep[
			{method,stepsize,tolerance},
			m,
			#1, (*the latest position and step direction*)
			{constraintMatFunction[#1[[1]]],constraintEnergy}, (* {the matrix of linear constraints, an energy associated with the constraints} *)
			variables,
			stepOptions]
		)&,
		{positions,initialDirectionNormalized},
		Range[steps]
	][[All,1]] ]

]]]


isometricTrajectoryStep[{"Minimization",stepsize_,tolerance_},m_,{positions_,lastDirection_},{constraintMat_,constraintEnergy_},var_,stepOptions_]:=
Module[{
	nullspaceBasis=Orthogonalize[NullSpace[constraintMat,FilterRules[stepOptions,Options[NullSpace]]]],
	newDirection,
	trialStep
},
	newDirection=If[Length[nullspaceBasis]>0,
		Normalize[Transpose[nullspaceBasis] . nullspaceBasis . lastDirection],

		Message[isometricTrajectory::dirns,positions];
		ConstantArray[0,Length[positions]]
	];
	trialStep=positions+ stepsize newDirection;
	{
	If[ evaluateEnergy[m, trialStep, constraintEnergy] > tolerance,
		Flatten[minimizeEnergyInternal[m,constraintEnergy, Partition[positions+stepsize newDirection,embeddingDimension[m]], FilterRules[stepOptions,Options[FindMinimum]]][[2]]],
		trialStep
	],
	newDirection
	}
]


isometricTrajectoryStep[{"RandomWalk",stepsize_,tolerance_},m_,{positions_,lastDirection_},{constraintMat_,constraintEnergy_},var_,stepOptions_]:=
Module[{
nullspaceBasis=Orthogonalize[NullSpace[constraintMat,FilterRules[stepOptions,Options[NullSpace]]]],
newDirection,trialStep
},
	newDirection=If[Length[nullspaceBasis]>0,
		Normalize[RandomReal[{-stepsize,stepsize},Length[nullspaceBasis]] . nullspaceBasis],

		Message[isometricTrajectory::dirns,positions];
		ConstantArray[0,Length[positions]]
	];
	trialStep=positions+ stepsize newDirection;
	{
	If[ evaluateEnergy[m, trialStep, constraintEnergy] > tolerance,
		Flatten[minimizeEnergyInternal[m,constraintEnergy, Partition[positions+stepsize newDirection,embeddingDimension[m]], FilterRules[stepOptions,Options[FindMinimum]]][[2]]],
		trialStep
	],
	newDirection
	}
]


isometricTrajectoryStep[{None,stepsize_,tolerance_},m_,{positions_,lastDirection_},{constraintMat_,constraintEnergy_},var_,stepOptions_]:=
Module[{
	nullspaceBasis=Orthogonalize[NullSpace[constraintMat,FilterRules[stepOptions,Options[NullSpace]]]],
	newDirection
},
	newDirection=If[Length[nullspaceBasis]>0,
		Normalize[Transpose[nullspaceBasis] . nullspaceBasis . lastDirection],

		Message[isometricTrajectory::dirns,positions];
		ConstantArray[0,Length[positions]]
	];
	{positions+stepsize newDirection,newDirection}
]


Options[toMeshRegion]=Options[MeshRegion];

toMeshRegion[m : mechanismPattern,positions: Except[_Rule] : Automatic,opt:OptionsPattern[]]:=
With[{pos=If[positions===Automatic,m["positions"],positions]},
	MeshRegion[
		pos,
		meshCells[m["mesh"]],
		Join[Method->{"CoplanarityTolerance"->100},opt]
	] /; numericCoordinatesQ[m,pos]
]

toMeshRegion::pos="Positions are not numeric or do not correspond to mechanism.";
toMeshRegion[m : mechanisnPattern,pos : Except[_Rule|Automatic] ,OptionsPattern[]]:="nothing"/;Message[toMeshRegion::pos]


applyDefaultStyle[{Automatic,x_Polygon}]:={LightBlue,x}
applyDefaultStyle[{Automatic,x_Line}]:={Black,x}
applyDefaultStyle[{Automatic,x_Point}]:={Black,x}
applyDefaultStyle[{x:Except[Automatic],y_}]:={x,y}


mechanismPrimitives[m : mechanismPattern, positions : Except[_Rule] : Automatic,cellspec_:All]:=
With[{
	pos=If[positions===Automatic,m["positions"],positions]
},
	With[
	{
	properties=PropertyValue[{m["mesh"],Flatten[MeshCells[m["mesh"],cellspec]]},MeshCellStyle],
	primitives=Flatten[MeshPrimitives[mechanismPositions[m->pos]["mesh"],cellspec]]
	},
	applyDefaultStyle/@Transpose[{properties,primitives}]
	] /; numericCoordinatesQ[m,pos]
]


mechanismPrimitives::pos="Positions are not numeric or do not correspond to provided mechanism.";

mechanismPrimitives[m:mechanismPattern,__]:="nothing"/;Message[mechanismPrimitives::pos]


Options[toGraphics]=Options[Show];

toGraphics[m : mechanismPattern,positions: Except[_Rule] : Automatic,cellspec: _Integer|All : All, opt:OptionsPattern[]]:=
With[{
	pos=If[positions===Automatic,m["positions"],positions]
},
	Show[
		If[embeddingDimension[m]==3,Graphics3D,Graphics]/@mechanismPrimitives[m,pos,cellspec],
		opt
	]/;numericCoordinatesQ[m,pos]
]

toGraphics::pos="Positions are not valid or do not correspond to mechanism.";
toGraphics::cellspec="Cell specification is not an integer.";

toGraphics[m : mechanismPattern, Except[_Rule|Automatic], ___]:="nothing" /; Message[toGraphics::pos]
toGraphics[m : mechanismPattern, _, Except[ _Rule|All|_Integer ], ___]:="nothing" /; Message[toGraphics::cellspec]


Options[plotDisplacement]=Join[{"scale"->1},Options[Show]];


plotDisplacement[m : mechanismPattern , displacement_?(MatrixQ[#,NumericQ]&), opt:OptionsPattern[]]:=
With[{
	scale=Last@BoundingRegion[m["positions"],If[embeddingDimension[m]==2,"MinDisk","MinBall"]],
	graphics=If[embeddingDimension[m]==2,Graphics,Graphics3D]
},
	Show[
		MapThread[graphics[{
			Red,
			Arrow[{#1,#1+OptionValue["scale"] scale #2}]
		}]&,{m["positions"],displacement}],
		FilterRules[{opt},Options[Show]]
	]
] /; Dimensions[displacement]=={MeshCellCount[m,0],embeddingDimension[m]}


doublearrow[{start_,end_},{max_,min_},data_]:=With[
{displacement=(end-start)/2,center=(start+end)/2,scale=data/(max-min),dim=If[Length[start]==3,Graphics3D,Graphics]},
	dim[{
		If[Sign[data]>0,Blue,Red],
		Thickness[0.0075],
		Arrowheads[Sign[data] {-0.1,0.1}],
		Arrow[{center-scale displacement,center+scale displacement}]}
	]
]

arrow[{start_,end_},{max_,min_},data_]:=With[
{displacement=(end-start)/2,center=(start+end)/2,scale=2 data/(max-min),dim=If[Length[start]==3,Graphics3D,Graphics]},
	dim[{
		If[Sign[data]>0,Blue,Red],
		Thickness[0.0075],
		Arrowheads[{0.1}],
		Arrow[{center-9 scale displacement/10,center+9 scale displacement/10}]}
	]
]


Options[plotTension]=Options[Show];
plotTension[m : mechanismPattern, Rule[edges_?(MatrixQ[#,IntegerQ]&),data_?(VectorQ[#,NumericQ]&)],opt:OptionsPattern[]]:=
With[
{
pos=PadRight[m["positions"],{Length[m["positions"]],displayDimension[m]}],
dataMax=Max[data],dataMin=Min[data]
},
	Show[
		m["mesh"],
		MapThread[doublearrow[pos[[#1]],{dataMax,dataMin},#2]&,{edges,data}],
		opt
	]
]


Options[plotMechanism]=Options[Show];


plotMechanism[m : mechanismPattern, pos: _?MatrixQ|Automatic : Automatic, opt : OptionsPattern[]]:=
Module[{
	positions=If[pos===Automatic,m["positions"],pos],
	boundingRegion,boundingBoxRatios,size
},
	boundingRegion=Transpose[List@@Quiet[
		BoundingRegion[positions,If[embeddingDimension[m]==2,"MinRectangle","MinCuboid"]],
		BoundingRegion::degbr]];
	size=ConstantArray[{-#,#}, Length[boundingRegion] ] &[ Max[#[[2]]-#[[1]]&/@boundingRegion]/10 ];

	boundingBoxRatios=#[[2]]-#[[1]]&/@(boundingRegion+size);
	
	Show[
		mechanismPositions[m->positions]["mesh"],
		Join[{opt},{PlotRange->(boundingRegion+size),BoxRatios->boundingBoxRatios}]
	] /; numericCoordinatesQ[m, positions]
]


(*a list of positions in 2D*)
plotMechanism[m : mechanismPattern, positions_?(ArrayQ[#,_,NumericQ]&),opt:OptionsPattern[]]:=Module[
{
	boundingRegion=Transpose[List@@Quiet[BoundingRegion[Flatten[positions,1],"MinRectangle"],BoundingRegion::degbr]],
	plotRegion,boundingBoxRatios
},
	plotRegion=boundingRegion + ConstantArray[{-#,#}, Length[boundingRegion] ] &[ Max[#[[2]]-#[[1]]&/@boundingRegion]/10 ];
	boundingBoxRatios=#[[2]]-#[[1]]&/@plotRegion;

	Show[
		mechanismPositions[m->#]["mesh"],
		Join[{opt},{PlotRange->plotRegion,BoxRatios->boundingBoxRatios}]
	]&/@positions
]/; Drop[Dimensions[positions],1]=={MeshCellCount[m,0],2} && embeddingDimension[m]==2


(*a list of positions in 3D*)
plotMechanism[m_?mechanismQ,positions_?(ArrayQ[#,_,NumericQ]&),opt:OptionsPattern[]]:=Module[
{
	boundingRegion=Transpose[List@@Quiet[BoundingRegion[Flatten[positions,1],"MinCuboid"],BoundingRegion::degbr]],
	plotRegion,boundingBoxRatios
},
	plotRegion=boundingRegion + ConstantArray[{-#,#}, Length[boundingRegion] ] &[ Max[#[[2]]-#[[1]]&/@boundingRegion]/10 ];
	boundingBoxRatios=(#[[2]]-#[[1]])& /@ plotRegion;

	Show[
		mechanismPositions[m->#]["mesh"],
		Join[{opt},{PlotRange->plotRegion, BoxRatios->boundingBoxRatios}]
	]&/@positions
]/; Drop[Dimensions[positions],1]=={MeshCellCount[m,0],3} && embeddingDimension[m]==3


plotMechanism::pos="Positions are either not numerical or do not correspond to provided mechanism.";

plotMechanism[m : mechanismPattern, Except[_Rule|Automatic], OptionsPattern[]]:="nothing"/;Message[plotMechanism::pos]


angleText[m : mechanismPattern, {v1_Integer,v2_Integer,v3_Integer}, label_ : "",distance : _?NumericQ : 0]:=With[
{
	angleLocation=m["positions"][[v2,1;;displayDimension[m]]],
	vectors=-displacementVector[m["positions"],{{v3,v2},{v1,v2}}][[All,1;;displayDimension[m]]]
},
	Text[label,angleLocation + (distance+0.12) Mean[vectors]]
]


angleMarker[m : mechanismPattern, {v1_Integer,v2_Integer,v3_Integer}, radius : _?NumericQ : 1/10]:=With[
{
	(*project the vectors making this angle to the xy-plane*)
	angleLocation=m["positions"][[v2,1;;2]],
	vectors=displacementVector[m["positions"],{{v2,v1},{v2,v3}}][[All,1;;2]]
},
	Circle[angleLocation,
		Abs[radius] Sqrt[Min[vectors[[1]] . vectors[[1]],vectors[[2]] . vectors[[2]]]],
		(If[Pi+#[[2]]<Pi+#[[1]],{0,2Pi}+#,#]&)[ArcTan@@@vectors]
	]
] /; displayDimension[m]==2 && Max[{v1,v2,v3}]<=MeshCellCount[m,0] && Min[{v1,v2,v3}]>0


(*Code borrowed from https://mathematica.stackexchange.com/questions/10957/an-efficient-circular-arc-primitive-for-graphics3d*)
ClearAll[splineCircle2];
splineCircle[m_List, r_, angles_List: {0., 2. \[Pi]}] := 
 Module[{seg, \[Phi], start, end, pts, w, k, pihalf},
   pihalf = 0.5 \[Pi];
   {start, end} = Mod[N[angles], 2. \[Pi]];
   If[end <= start, end += 2. \[Pi]];
   seg = Quotient[N[end - start], pihalf];
   \[Phi] = Mod[N[end - start], pihalf];
   If[seg == 4, seg = 3; \[Phi] = pihalf];
   With[{
     cseg = Cos[pihalf seg], sseg = Sin[pihalf seg],
     c\[Phi] = Cos[\[Phi]], s\[Phi] = Sin[\[Phi]], 
     t\[Phi] = Tan[0.5 \[Phi]],
     rcs = r Cos[start], rss = r Sin[start]
     },
    pts = Join[
       Take[{{1., 0.}, {1., 1.}, {0., 1.}, {-1., 1.}, {-1., 0.}, {-1., -1.}, {0., -1.}}, 2 seg + 1],
       {{cseg - sseg t\[Phi], sseg + cseg t\[Phi]}, {cseg c\[Phi] - sseg s\[Phi], c\[Phi] sseg + cseg s\[Phi]}}
       ].{{rcs, rss}, {-rss, rcs}}
    ];
   pts = ConstantArray[m, Length[pts]] + 
     If[Length[m] == 2, 
      pts, 
      Join[pts, ConstantArray[{0.}, Length[pts]], 2]
     ];
   w = With[{c = 1./Sqrt[2.]}, 
     Join[Take[{1., c, 1., c, 1., c, 1.}, 2 seg + 1], {Cos[0.5 \[Phi]], 1.}]
     ];
   k = Join[{0, 0, 0}, Riffle[#, #] &@Range[seg + 1], {seg + 1}];
   BSplineCurve[pts, SplineDegree -> 2, SplineKnots -> k, SplineWeights -> w]
   ] /; Length[m] == 2 || Length[m] == 3
 
Options[circleFromPoints] = {arc -> False};

circleFromPoints[m : {q1_, q2_, q3_}, OptionsPattern[]] :=
Module[{c, r, \[Phi]1, \[Phi]2, p1, p2, p3, h, 
        rot = Quiet[RotationMatrix[{{0, 0, 1}, Cross[#1 - #2, #3 - #2]}],RotationMatrix::spln] &},
  {p1, p2, p3} = {q1, q2, q3}.rot[q1, q2, q3];
  h = p1[[3]];
  {p1, p2, p3} = {p1, p2, p3}[[All, ;; 2]];
  {c, r} = List @@ Circumsphere[{p1, p2, p3}];
  \[Phi]1 = ArcTan @@ (p3 - c);
  \[Phi]2 = ArcTan @@ (p1 - c);
  c = Append[c, h];
  If[OptionValue[arc] // TrueQ,
    MapAt[Function[{p}, rot[q1, q2, q3].p] /@ # &, splineCircle[c, r, {\[Phi]1, \[Phi]2}], {1}],
    MapAt[Function[{p}, rot[q1, q2, q3].p] /@ # &, splineCircle[c, r], {1}]
  ]
] /; MatrixQ[m, NumericQ] && Dimensions[m] == {3, 3}


angleMarker[m : mechanismPattern, {v1_Integer,v2_Integer,v3_Integer}, radius : _?NumericQ : 1/10]:=With[
{
	angleLocation=m["positions"][[v2]],
	(*project the vectors making this angle to the xy-plane*)
	vectors=displacementVector[m["positions"],{{v2,v1},{v2,v3}}]
},
	circleFromPoints[{angleLocation+radius vectors[[1]],angleLocation+radius (vectors[[1]]+vectors[[2]])/Sqrt[2],angleLocation+radius vectors[[2]]},arc ->True]
] /; displayDimension[m]==3 && Max[{v1,v2,v3}]<=MeshCellCount[m,0] && Min[{v1,v2,v3}]>0


angleMarker::bounds="Vertices are out of bounds.";
angleMarker[m : mechanismPattern, {v1_Integer,v2_Integer,v3_Integer}]:="nothing"/;Message[angleMarker::bounds]
angleMarker[m : mechanismPattern, {v1_Integer,v2_Integer,v3_Integer},_]:="nothing"/;Message[angleMarker::bounds]
angleMarker[m : mechanismPattern, {v1_Integer,v2_Integer,v3_Integer},_,_?NumericQ]:="nothing"/;Message[angleMarker::bounds]


periodicData[numberOfVertices_Integer,transformations_,data_]["Methods"]:={"transformations","data"}
periodicData[numberOfVertices_Integer,transformations_,data_]["transformations"]:=transformations
periodicData[numberOfVertices_Integer,transformations_,data_]["data"]:=data

Format[periodicData[numberOfVertices_Integer,transformations_,data_]]:=periodicData[transformations]


mapQ[{f_,map:_Function}]:=True
maoQ[_]:=False

identificationRules[m_?mechanismQ,f__?mapQ]:=Module[{x},With[
{
	labels={f}[[All,1]],
	maps={f}[[All,2]],
	pos=mechanismPositions[m],dim=embeddingDimension[m],
	ruleFunction=Function[{x},#[[1]]->x[#[[2]]]& ],
	vertices=listVertices[m]
},
	periodicData[
		Length[vertices],
		labels,
		vertices//. Flatten[MapThread[
			ruleFunction[#1]/@overlappingVertices[pos,#2/@pos]&,
			{labels,maps}
		]]
	]
]]


convertToUnitCells[periodicData[numberOfVertices_Integer,transformations_,data_]]:=Module[{n,d},With[
{
startingData=data/.n_Integer:>{n,{0,0}}
},
	startingData//.{
		transformations[[1]][{n_Integer,d_}]:>{n,d+{1,0}},
		transformations[[2]][{n_Integer,d_}]:>{n,d+{0,1}}
	}
]]


periodicEquivalenceClasses[m_?mechanismQ,pd_periodicData,elements:{__?(VectorQ[#,IntegerQ]&)}]:=
With[{unitCellRules=listVertices[m]->convertToUnitCells[pd]},
	GatherBy[
		SortBy[#,First]&/@(elements/.Dispatch[Thread[unitCellRules]]),
		{
		First/@#,
		#[[2]]-#[[1]]
		}&
	]/.Dispatch[Thread[Reverse[unitCellRules]]]
]


periodicEquivalenceClasses[m_?mechanismQ,pd_periodicData,elements:{__Integer}]:=
With[{unitCellRules=listVertices[m]->convertToUnitCells[pd]},
	Map[
		First,
		GatherBy[Thread[unitCellRules],#[[2,1]]&],
		{2}
	]
]


(*
	whenever vertex1 and vertex2 are related by a transformation, periodicityRules[mechanism, periodic data, function1, {functionX, functionY}] returns
	
		function[vertex1] \[Rule] functionX and functionY applied to function[vertex2] the appropriate number of times
		
e.g.
	Thread[periodicityRules[m0,pd,{#&,{#,0,0}}&,{#+{0,1,0}&,#+{0,0,1}&}]]
	
	returns vertex1 \[Rule] {vertex2, nx,ny} where {nx,ny} are the unit cell indices.
	
	Thread/@Thread[periodicityRules[m0,pd,{vertexPosition[#,All[3]]&,vertexPosition[#,All[3]]&},{#+l[[1]]&,#+l[[2]]&}]]
	
	returns the rules related vertexPositions to each other by the periodic lattice vectors
*)


periodicityRules[m_?mechanismQ,periodicData[numberOfVertices_Integer,transformations_,data_],{rule1_Function,rule2_Function},map:{__Function}]:=
	Module[{n},With[{
		mapRules=Thread[transformations->map],
		index1=rule1/@Range[numberOfVertices],
		index2=data /. n_Integer :> rule2[n]
	},
		Thread[index1 -> index2 /. mapRules]
	]]/;Length[map]==Length[transformations]


periodicCompatibilityMatrix[m_?mechanismQ,positions_?MatrixQ,complex_?VectorQ,opt:OptionsPattern[]]:=
Module[{mats},With[
{
periodRules=periodicityRules[m,positions,complex],
linearConstraintEquations=constraintEquations[m,positions,1],
variables=findVariables[m,complex]
},
	mats=CoefficientArrays[linearConstraintEquations//.periodRules,variables];
	If[PossibleZeroQ[mats[[1]].mats[[1]]],mats[[2]],Message[compatibilityMatrix::stressed]; mats[[2]]]
]]


Options[flatOrigamiQ]={ZeroTest->Automatic,Precision->Infinity};


flatOrigamiQ::precision="Precision is not a positive real number or Infinity.";
flatOrigamiQ::zerotest="ZeroTest function must return True or False.";


computePrecision[m_,Infinity]:=Precision[m]
computePrecision[m_,precision_?NumericQ]:=Min[Precision[m],precision]/;precision>0
computePrecision[m_,_]:=$Failed


computeZeroTestFunction[Automatic,Infinity]:=PossibleZeroQ
computeZeroTestFunction[Automatic,precision:_?NumericQ|MachinePrecision]:=(Abs[#]<=10^(-precision+1)&)
computeZeroTestFunction[f_,_]:=f


flatOrigamiQ[m_origami,OptionsPattern[]]:=Module[{
	actualPrecision=computePrecision[m,OptionValue[Precision]],zerotestFunction,res
},
	zerotestFunction=computeZeroTestFunction[OptionValue[ZeroTest],actualPrecision];

	res=flatOrigamiInternalQ[m,actualPrecision,zerotestFunction];
	res/;Which[
		Head[res]=!=flatOrigamiInternalQ,
			True,
		Not[BooleanQ[zerotestFunction[0]]],
			Message[flatOrigamiQ::zerotest]; False,
		actualPrecision===$Failed,
			Message[flatOrigamiQ::precision]; False,
		True,False
	]
]


flatOrigamiInternalQ[m_,precision:_?NumericQ|Infinity,zerotestFunction_?(BooleanQ[#[0]]&)]:=
	AllTrue[gaussianCurvature[N[m,precision],interiorVertices[m]],zerotestFunction]


Options[kawasakiQ]={
	ZeroTest->PossibleZeroQ,
	WorkingPrecision->Infinity
};


kawasakiQ[m_origami,opt:OptionsPattern[]]:=
With[
{
	v=interiorVertices[m],
	mNum=N[m,OptionValue[WorkingPrecision]]
},
	If[flatOrigamiQ[m,opt],
		And@@(OptionValue[ZeroTest][kawasakiAlternatingSum[mNum,#]]&/@v),
		False
	]
]/;(
	((NumericQ[OptionValue[WorkingPrecision]]&&OptionValue[WorkingPrecision]>0)||
	OptionValue[WorkingPrecision]===Infinity)&&
	BooleanQ[OptionValue[ZeroTest][0]]
)


kawasakiAlternatingSum[m_,v_Integer]:=
With[
{
	faces=RotateRight[#,1]&/@listFaces[m,v]
},
	If[OddQ[Length[faces]],
		1,
		Total[DiagonalMatrix[(-1)^# &/@Range[Length[faces]]] . planarAngle[m,faces]]
	]
]


kawasakiQ::workingprecision="Working precesion must be a real value larger than 0.";
kawasakiQ::zerotest="Zero test does not return True or False.";

kawasakiQ[m_origami,opt:OptionsPattern[]]:="nothing"/;Which[
	Not[(NumericQ[OptionValue[WorkingPrecision]]&&OptionValue[WorkingPrecision]>0)||OptionValue[WorkingPrecision]===Infinity],
		Message[kawasakiQ::workingprecision];
		False,
	Not[BooleanQ[OptionValue[ZeroTest][0]]],
		Message[kawasakiQ::zerotest];
		False,
	True,False
]


Options[randomOrigami]=Join[
	Options[origami],
	{
	Precision->MachinePrecision,
	MaxIterations->20,
	"minimumFolds"->4,
	"boundary"->CirclePoints[4]
	}
];


randomOrigami[numberOfVertices_Integer,opt:OptionsPattern[]]:=
Module[
{
ctr=1,
meshTry=randomMesh[numberOfVertices,OptionValue[Precision],OptionValue["boundary"]]
},
	While[
		Not[validMeshQ[numberOfVertices,meshTry,OptionValue["minimumFolds"],Length[OptionValue["boundary"]]]]&&
			ctr<=OptionValue[MaxIterations],
		meshTry=randomMesh[numberOfVertices,OptionValue[Precision],OptionValue["boundary"]];
		ctr++
	];
	If[ctr>OptionValue[MaxIterations],Message[randomOrigami::max,ctr-1]];

	origami[
		N[First[meshTry],OptionValue[Precision]],
		MeshCells[meshTry[[2]],2]/.Polygon->face,
		FilterRules[{opt},Options[origami]]
	]

]/;(
	numberOfVertices>0&&
	(IntegerQ[OptionValue["minimumFolds"]]&&OptionValue["minimumFolds"]>0)&&
	(IntegerQ[OptionValue[MaxIterations]]&&OptionValue[MaxIterations]>0)&&
	MatrixQ[OptionValue["boundary"],NumericQ]&&
	(NumericQ[OptionValue[Precision]]&&OptionValue[Precision]>0)
)


randomOrigami::max="Maximum number of iterations reached at `1` without finding a suitable random origami.";
randomOrigami::vnum="Number of vertices should be at least 1.";
randomOrigami::mfold="Minimum number of folds must be a position integer.";
randomOrigami::miter="Maximum number of iterations must be a position integer.";
randomOrigami::bound="Boundary points are not valid.";
randomOrigami::prec="Number of digits of precision must be a positive, integer.";

randomOrigami[n_,OptionsPattern[]]:="nothing"/;Which[
	Not[IntegerQ[n]&&n>0],Message[randomOrigami::vnum]; False,
	Not[IntegerQ[OptionValue["minimumFolds"]]&&OptionValue["minimumFolds"]>0],Message[randomOrigami::mfold]; False,
	Not[IntegerQ[OptionValue[MaxIterations]]&&OptionValue[MaxIterations]>0],Message[randomOrigami::mfold]; False,
	Not[MatrixQ[OptionValue["boundary"],NumericQ]], Message[randomOrigami::bound]; False,
	Not[(NumericQ[OptionValue[Precision]]&&OptionValue[Precision]>0)],Message[randomOrigami::prec]; False,
	True,False
]


randomMesh[numberOfVertices_,precision_,boundary_]:=Module[{points},
	points=Join[
		boundary,
		Select[
			RandomVariate[
				UniformDistribution[RegionBounds[Polygon[boundary]]],
				numberOfVertices,
				WorkingPrecision->precision
			],
			RegionMember[Polygon[boundary]]
		]
	];
	{points,DelaunayMesh[points]}
]


validMeshQ[numberOfVertices_,{points_,mesh_},minimumFolds_,boundarySize_]:=
	AllTrue[
		Length/@Drop[connectivity[mesh,"vertices"->"edges"],boundarySize],
		#>=minimumFolds&
	]&&Length[points]-boundarySize==numberOfVertices


foldMatrix[m_origami]:=foldMatrixInternal[m,m["positions"],interiorEdges[m]]
foldMatrix[m_origami,positions_]:=foldMatrixInternal[m,m["positions"],interiorEdges[m]]/;vertexCoordinatesQ[m,positions]
foldMatrix[m_origami,positions_,indices_?edgeListQ]:=foldMatrixInternal[m,positions,indices]/;vertexCoordinatesQ[m,positions]


foldMatrixInternal[m_,positions_,indices_?(MatrixQ[#,IntegerQ]&)]:= With[
{displacements=vertexDisplacement[m]},
	D[foldAngle[m,positions+displacements,indices],{Flatten[displacements]}]/.Dispatch[Thread[Flatten[displacements]->0]]
]


foldMatrix::notorig="Mechanism is not origami.";
foldMatrix::pos="Positions do not correspond to the mechanism provided.";
foldMatrix::indices="Indices provided do not correspond to a list of edges.";

foldMatrix[m_]:="nothing"/;Message[foldMatrix::notorig]
foldMatrix[m_,positions_]:="nothing"/;Which[
	Head[m]=!=origami,Message[foldMatrix::notorig],
	Not[vertexCoordinatesQ[m,positions]],Message[foldMatrix::pos],
	True,False
]
foldMatrix[m_,positions_,indices_]:="nothing"/;Which[
	Head[m]=!=origami,Message[foldMatrix::notorig],
	Not[vertexCoordinatesQ[m,positions]],Message[foldMatrix::pos],
	Last[Dimensions[indices]]!=2,Message[foldMatrix::indices],
	True,False
]


angularFoldMatrix[m_origami,vertex_Integer]:=angularFoldMatrix[m,m["positions"],vertex]
angularFoldMatrix[m_origami,positions_?MatrixQ,vertex_Integer]:=Module[
{vertices=listVertices[m,vertex],foldLengths,angles,heights},
	foldLengths=displacementLength[m["positions"],{#,vertex}&/@vertices];
	heights=Thread[vertexDisplacement[vertices,"z"]->foldLengths Array[angles,Length[vertices]]];
	Last@CoefficientArrays[
		-foldMatrixInternal[m,positions,{#,vertex}&/@vertices] . Flatten[vertexDisplacement[m,All[3]]]/.heights/.vertexDisplacement[_,_]->0,
		Array[angles,Length[vertices]]
	]
]/;MemberQ[interiorVertices[m],vertex]


angularFoldMatrix::notintv="Vertex should be an interior vertex.";
angularFoldMatrix::orig="Mechanism is not origami.";
angularFoldMatrix::pos="Positions do not correspond to the mechanism provided.";

angularFoldMatrix[m_origami,_]:="nothing"/;Message[angularFoldMatrix::notintv]
angularFoldMatrix[m_,positions_,v_]:="nothing"/;Which[
	Head[m]=!=origami,Message[angularFoldMatrix::orig],
	Not[vertexCoordinatesQ[m,positions]],Message[angularFoldMatrix::pos],
	Not[IntegerQ[v]]||Not[MemberQ[interiorVertices[m],v]],Message[angularFoldMatrix::notintv],
	True,False
]


toOrigami::notsurface="Input does not seem to be origami compatible because it is not a valid surface.";


surfaceQ[mr_]:=MeshRegionQ[mr]&&(And@@(Length[#]<=2&/@mechanisms`Private`connectivity[mr,"edges"->"faces"]))
toOrigami[mr_?surfaceQ]:=origami[MeshCoordinates[mr],MeshCells[mr,2]/.Polygon->face]

toOrigami[mr_framework]:=Module[{test},
	Check[
		test=toOrigami[mr["mesh"]];
		test["positions"->mr["positions"]],
		Message[toOrigami::notsurface];
		$Failed
	]
]


toOrigami[mr_MeshRegion]:="nothing" /; Message[toOrigami::notsurface]


Options[toFramework]=Options[framework];

toFramework[mr_MeshRegion,opt:OptionsPattern[]]:=framework[
	MeshCoordinates[mr],
	meshCells[mr]/.Line->rigidBar,
	opt
]

toFramework[{g_Graph,data___},opt:OptionsPattern[]]:=framework[
	GraphEmbedding[g,data],
	rigidBar[List@@#]&/@EdgeList[g],
	opt
]

toFramework[g_Graph,opt:OptionsPattern[]]:=framework[
	GraphEmbedding[g],
	rigidBar[List@@#]&/@EdgeList[g],
	opt
]


Options[HennebergOperation]:={
	WorkingPrecision->MachinePrecision,
	"boundary"->Automatic
};

HennebergOperation::boundary="Option \"boundary\" is not a list of boundary coordinates or a value 2D region from which to select additional vertices.";
HennebergOperation::precision="The requested precision is not a positive real number.";
HennebergOperation::dim="Mechanism must be embedded in 2D for the current version.";
HennebergOperation::type="Second argument is a list of either 1 or 2 specifying which Henneberg moves type should be taken in each step.";
HennebergOperation::mech="Mechanism must be a framework[].";

HennebergOperation[m_framework, listOfMoves : {Alternatives[1,2]..}, OptionsPattern[]]:=With[
{
mUnpacked=m["unpack"],
boundary=Which[
	OptionValue["boundary"]===Automatic,BoundingRegion[m["positions"],"MinDisk"],
	MatrixQ[OptionValue["boundary"],NumericQ]&&Dimensions[OptionValue["boundary"]][[2]]>2, Polygon[OptionValue["boundary"]],
	RegionQ[OptionValue["boundary"]]&&RegionDimension[OptionValue["boundary"]]==2,OptionValue["boundary"],
	True, (Message[HennebergOperation::boundary]; $Failed)
	],
precision=If[NumericQ[OptionValue[WorkingPrecision]]&&OptionValue[WorkingPrecision]>0,OptionValue[WorkingPrecision],Message[HennebergOperation::precision]; $Failed]
},
	Head[m][Fold[HennebergOperationInternal[#1,#2,boundary,precision]&,mUnpacked,listOfMoves]] /; embeddingDimension[m]==2&&boundary=!=$Failed&&precision=!=$Failed
]
HennebergOperation[m_framework?(embeddingDimension[#]!=2&), _,OptionsPattern[]]:="nothing"/;Message[HennebergOperation::dim]
HennebergOperation[m_framework, Except[{Alternatives[1,2]..}],OptionsPattern[]]:="nothing"/;Message[HennebergOperation::type]
HennebergOperation[m_origami, _,OptionsPattern[]]:="nothing"/;Message[HennebergOperation::mech]

HennebergOperationInternal[{coordinates_,displayCells_,componentCells_}, 1,boundary_,precision_]:=
With[
{(*choose a new vertex location*)
	newVertex=SelectFirst[
			RandomVariate[
				UniformDistribution[RegionBounds[boundary]],
				20,
				WorkingPrecision->precision
			],
			RegionMember[boundary]
		],
	(*choose two random vertices*)
	initialVertices=RandomSample[Range[Length[coordinates]],2]
},
	{
		Join[coordinates,{newVertex}],
		Join[displayCells,{
			{Line,{initialVertices[[1]],Length[coordinates]+1},{MeshCellStyle->Black}},
			{Line,{initialVertices[[2]],Length[coordinates]+1},{MeshCellStyle->Black}}
		}],
		Join[componentCells,{
			{rigidBar,{initialVertices[[1]],Length[coordinates]+1},Options[rigidBar]},
			{rigidBar,{initialVertices[[2]],Length[coordinates]+1},Options[rigidBar]}
		}]
	}
]

HennebergOperationInternal[{coordinates_,displayCells_,componentCells_},2, boundary_,precision_]:=
Module[
{
	v,
	edge=RandomChoice[Cases[componentCells,{rigidBar,_,_}]][[2]],
	t=RandomReal[{0,1}]
},
	v=RandomChoice[Complement[Range[Length[coordinates]],edge]];
	{
	(*add vertex somewhere along the chosen edge*)
	Join[coordinates,{ coordinates[[ edge[[1]] ]] + (coordinates[[ edge[[2]] ]] - coordinates[[ edge[[1]] ]]) t  }],

	Join[
		DeleteCases[displayCells,{_,edge|Reverse[edge],_}],
		{
		{Line,{edge[[1]],Length[coordinates]+1},{MeshCellStyle->{Black}}},
		{Line,{Length[coordinates]+1,edge[[2]]},{MeshCellStyle->{Black}}},
		{Line,{Length[coordinates]+1,v},{MeshCellStyle->{Black}}}
		}
	],

	Join[
		DeleteCases[componentCells,{_,edge|Reverse[edge],_}],
		{
		{rigidBar,{edge[[1]],Length[coordinates]+1},Options[rigidBar]},
		{rigidBar,{Length[coordinates]+1,edge[[2]]},Options[rigidBar]},
		{rigidBar,{Length[coordinates]+1,v},Options[rigidBar]}
		}
	]
	}
]


End[];

EndPackage[];



